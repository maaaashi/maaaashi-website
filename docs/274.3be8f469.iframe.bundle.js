"use strict";(self.webpackChunkmaaaashi_website=self.webpackChunkmaaaashi_website||[]).push([[274],{"./src/components/Tags/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});var next_image__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/next/image.js"),next_image__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(next_image__WEBPACK_IMPORTED_MODULE_1__),react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_libs_images__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/libs/images.ts"),__jsx=react__WEBPACK_IMPORTED_MODULE_0__.createElement,Tags=function Tags(_ref){var tags=_ref.tags;return __jsx("div",{className:"avatar-group justify-center gap-2 -space-x-6"},tags.map((function(tag,index){var icon=_libs_images__WEBPACK_IMPORTED_MODULE_2__.c[tag.name.toLocaleLowerCase()];if(icon)return __jsx("div",{key:index,className:"avatar"},__jsx("div",{className:"w-8 rounded-full ring ring-primary ring-offset-4 ring-offset-base-100 md:w-12"},__jsx(next_image__WEBPACK_IMPORTED_MODULE_1___default(),{src:icon,alt:tag.name,className:"bg-white"})))})))};Tags.displayName="Tags",Tags.__docgenInfo={description:"",methods:[],displayName:"Tags"};const __WEBPACK_DEFAULT_EXPORT__=Tags;try{Tags.displayName="Tags",Tags.__docgenInfo={description:"",displayName:"Tags",props:{tags:{defaultValue:null,description:"",name:"tags",required:!0,type:{name:"{ name: string; versions: any[]; }[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Tags/index.tsx#Tags"]={docgenInfo:Tags.__docgenInfo,name:"Tags",path:"src/components/Tags/index.tsx#Tags"})}catch(__react_docgen_typescript_loader_error){}},"./src/libs/images.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{c:()=>icons});const docker={src:"static/media/src/libs/images/icons/docker.png",height:287,width:336,blurDataURL:"static/media/src/libs/images/icons/docker.png"},nodejs={src:"static/media/src/libs/images/icons/nodejs.png",height:225,width:225,blurDataURL:"static/media/src/libs/images/icons/nodejs.png"},tailwind={src:"static/media/src/libs/images/icons/tailwind.jpg",height:900,width:900,blurDataURL:"static/media/src/libs/images/icons/tailwind.jpg"},gitlab={src:"static/media/src/libs/images/icons/gitlab.jpg",height:450,width:600,blurDataURL:"static/media/src/libs/images/icons/gitlab.jpg"},next={src:"static/media/src/libs/images/icons/next.svg",height:1365,width:1365,blurDataURL:"static/media/src/libs/images/icons/next.svg"};var icons={rubyonrails:{src:"static/media/src/libs/images/icons/rails.png",height:667,width:1e3,blurDataURL:"static/media/src/libs/images/icons/rails.png"},ruby:{src:"static/media/src/libs/images/icons/ruby.png",height:940,width:1438,blurDataURL:"static/media/src/libs/images/icons/ruby.png"},serverlessframework:{src:"static/media/src/libs/images/icons/serverless.png",height:320,width:320,blurDataURL:"static/media/src/libs/images/icons/serverless.png"},sveltekit:{src:"static/media/src/libs/images/icons/sveltekit.png",height:640,width:640,blurDataURL:"static/media/src/libs/images/icons/sveltekit.png"},qiita:{src:"static/media/src/libs/images/icons/qiita.png",height:630,width:1200,blurDataURL:"static/media/src/libs/images/icons/qiita.png"},typescript:{src:"static/media/src/libs/images/icons/typescript.png",height:2048,width:2048,blurDataURL:"static/media/src/libs/images/icons/typescript.png"},keycloak:{src:"static/media/src/libs/images/icons/keycloak.png",height:225,width:225,blurDataURL:"static/media/src/libs/images/icons/keycloak.png"},docker,vue:{src:"static/media/src/libs/images/icons/vue.png",height:209,width:241,blurDataURL:"static/media/src/libs/images/icons/vue.png"},nuxt:{src:"static/media/src/libs/images/icons/nuxt.png",height:1907,width:2560,blurDataURL:"static/media/src/libs/images/icons/nuxt.png"},javascript:{src:"static/media/src/libs/images/icons/javascript.png",height:1200,width:1200,blurDataURL:"static/media/src/libs/images/icons/javascript.png"},solid:{src:"static/media/src/libs/images/icons/solid.png",height:217,width:232,blurDataURL:"static/media/src/libs/images/icons/solid.png"},supabase:{src:"static/media/src/libs/images/icons/supabase.jpeg",height:280,width:280,blurDataURL:"static/media/src/libs/images/icons/supabase.jpeg"},alpine:{src:"static/media/src/libs/images/icons/alpine.png",height:139,width:160,blurDataURL:"static/media/src/libs/images/icons/alpine.png"},vite:{src:"static/media/src/libs/images/icons/vite.png",height:640,width:640,blurDataURL:"static/media/src/libs/images/icons/vite.png"},node:nodejs,mac:{src:"static/media/src/libs/images/icons/mac.png",height:225,width:225,blurDataURL:"static/media/src/libs/images/icons/mac.png"},vuetify:{src:"static/media/src/libs/images/icons/vuetify.png",height:1230,width:1076,blurDataURL:"static/media/src/libs/images/icons/vuetify.png"},svelte:{src:"static/media/src/libs/images/icons/svelte.png",height:1445,width:1200,blurDataURL:"static/media/src/libs/images/icons/svelte.png"},cfn:{src:"static/media/src/libs/images/icons/cfn.png",height:300,width:300,blurDataURL:"static/media/src/libs/images/icons/cfn.png"},skeleton:{src:"static/media/src/libs/images/icons/skeleton.png",height:722,width:668,blurDataURL:"static/media/src/libs/images/icons/skeleton.png"},safari:{src:"static/media/src/libs/images/icons/safari.png",height:2048,width:2057,blurDataURL:"static/media/src/libs/images/icons/safari.png"},css:{src:"static/media/src/libs/images/icons/css.png",height:512,width:512,blurDataURL:"static/media/src/libs/images/icons/css.png"},tailwind,tailwindcss:tailwind,vercel:{src:"static/media/src/libs/images/icons/vercel.svg",height:512,width:512,blurDataURL:"static/media/src/libs/images/icons/vercel.svg"},aws:{src:"static/media/src/libs/images/icons/aws.png",height:225,width:225,blurDataURL:"static/media/src/libs/images/icons/aws.png"},ec2:{src:"static/media/src/libs/images/icons/ec2.png",height:397,width:395,blurDataURL:"static/media/src/libs/images/icons/ec2.png"},stepFunctions:{src:"static/media/src/libs/images/icons/step-functions.png",height:225,width:225,blurDataURL:"static/media/src/libs/images/icons/step-functions.png"},azure:{src:"static/media/src/libs/images/icons/azure.png",height:2048,width:2048,blurDataURL:"static/media/src/libs/images/icons/azure.png"},deepl:{src:"static/media/src/libs/images/icons/deepl.png",height:225,width:225,blurDataURL:"static/media/src/libs/images/icons/deepl.png"},apollo:{src:"static/media/src/libs/images/icons/apollo.png",height:280,width:280,blurDataURL:"static/media/src/libs/images/icons/apollo.png"},gitlab,graphql:{src:"static/media/src/libs/images/icons/graphql.png",height:225,width:225,blurDataURL:"static/media/src/libs/images/icons/graphql.png"},next,"next.js":next,react:{src:"static/media/src/libs/images/icons/react.png",height:209,width:241,blurDataURL:"static/media/src/libs/images/icons/react.png"},vitest:{src:"static/media/src/libs/images/icons/vitest.png",height:225,width:225,blurDataURL:"static/media/src/libs/images/icons/vitest.png"},html:{src:"static/media/src/libs/images/icons/html.png",height:225,width:225,blurDataURL:"static/media/src/libs/images/icons/html.png"},nodejs,mysql:{src:"static/media/src/libs/images/icons/mysql.png",height:800,width:800,blurDataURL:"static/media/src/libs/images/icons/mysql.png"},"aws cdk":{src:"static/media/src/libs/images/icons/aws-cdk.png",height:315,width:560,blurDataURL:"static/media/src/libs/images/icons/aws-cdk.png"},jest:{src:"static/media/src/libs/images/icons/jest.png",height:2654,width:2400,blurDataURL:"static/media/src/libs/images/icons/jest.png"},git:{src:"static/media/src/libs/images/icons/git.png",height:383,width:383,blurDataURL:"static/media/src/libs/images/icons/git.png"},"docker swarm":docker,rspec:{src:"static/media/src/libs/images/icons/rspec.png",height:432,width:432,blurDataURL:"static/media/src/libs/images/icons/rspec.png"},"gitlab runner":gitlab,bootstrap:{src:"static/media/src/libs/images/icons/bootstrap.png",height:225,width:225,blurDataURL:"static/media/src/libs/images/icons/bootstrap.png"}}},"./src/libs/mockdata.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{c:()=>mockData});var mockData=[{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-3:135">Reactの<code>dangerouslySetInnerHTML</code>とは、生のHTMLをReactコンポーネントに直接注入するためのプロパティです。</p>\n<p data-sourcepos="5:1-5:4">例)</p>\n<div class="code-frame" data-lang="tsx" data-sourcepos="6:1-12:3">\n<div class="code-lang"><span class="bold"> index.tsx</span></div>\n<div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">&lt;a href="https://www.google.com" target="_blank"&gt;クリック&lt;/a&gt;</span><span class="dl">\'</span>\n\n<span class="k">return </span><span class="p">(</span>\n  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">dangerouslySetInnerHTML</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">__html</span><span class="p">:</span> <span class="nx">content</span> <span class="p">}</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n<span class="p">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="15:1-16:78">このプロパティを使ってしばしば外部コンテンツを表示したり、<br>\nユーザーの入力をプレビューしたりすることがあります。</p>\n<blockquote data-sourcepos="18:1-20:124">\n<p data-sourcepos="18:3-18:32">そう、丁度こんな風に</p>\n<a href="https://camo.qiitausercontent.com/f1c5b57948890056b0684ab28bf4a1e0b2275cf8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f35353563393332352d613538632d333564622d643463362d3135616461643932646239632e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F555c9325-a58c-35db-d4c6-15adad92db9c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=91ce1d0f713e8c0f4e311689f00232a7" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/555c9325-a58c-35db-d4c6-15adad92db9c.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F555c9325-a58c-35db-d4c6-15adad92db9c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=378a670be07e39536be305145ab5d945 1x" loading="lazy"></a>\n</blockquote>\n<p data-sourcepos="22:1-22:154">そんな<code>dangerouslySetInnerHTML</code>を初回描画時に読み込むと<code>Hydration failed</code>のエラーになりましたので、その解決方法です。</p>\n<h2 data-sourcepos="24:1-24:9">\n<span id="原因" class="fragment"></span><a href="#%E5%8E%9F%E5%9B%A0"><i class="fa fa-link"></i></a>原因</h2>\n<p data-sourcepos="26:1-29:45"><code>Hydration failed</code>とは、<br>\n<strong>サーバーサイド</strong>でレンダリングされたHTMLと、<br>\n<strong>クライアントサイド</strong>でレンダリングされたHTMLとの間で<br>\n不一致があるときに発生します。</p>\n<p data-sourcepos="31:1-31:33">つまり最初の例の場合、</p>\n<div class="code-frame" data-lang="html" data-sourcepos="33:1-35:3">\n<div class="code-lang"><span class="bold"> サーバーサイド</span></div>\n<div class="highlight"><pre><code><span class="nt">&lt;div&gt;&lt;/div&gt;</span>\n</code></pre></div>\n</div>\n<div class="code-frame" data-lang="html" data-sourcepos="37:1-41:3">\n<div class="code-lang"><span class="bold"> クライアントサイド</span></div>\n<div class="highlight"><pre><code><span class="nt">&lt;div&gt;</span>\n  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://www.google.com"</span> <span class="na">target=</span><span class="s">"_blank"</span><span class="nt">&gt;</span>クリック<span class="nt">&lt;/a&gt;</span>\n<span class="nt">&lt;/div&gt;</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="43:1-43:78">のように差が発生しているためエラーになっていました。</p>\n<h2 data-sourcepos="46:1-46:12">\n<span id="対処法" class="fragment"></span><a href="#%E5%AF%BE%E5%87%A6%E6%B3%95"><i class="fa fa-link"></i></a>対処法</h2>\n<h3 data-sourcepos="48:1-48:24">\n<span id="useeffectを使う" class="fragment"></span><a href="#useeffect%E3%82%92%E4%BD%BF%E3%81%86"><i class="fa fa-link"></i></a><code>useEffect</code>を使う</h3>\n<p data-sourcepos="50:1-50:90">useEffectを使い、最初のレンダリング後に表示したいものを表示する</p>\n<div class="code-frame" data-lang="tsx" data-sourcepos="52:1-62:3">\n<div class="code-lang"><span class="bold"> index.tsx</span></div>\n<div class="highlight"><pre><code><span class="kd">const</span> <span class="p">[</span><span class="nx">content</span><span class="p">,</span> <span class="nx">setContent</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">()</span>\n\n<span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="nf">setContent</span><span class="p">(</span><span class="dl">\'</span><span class="s1">&lt;a href="https://www.google.com" target="_blank"&gt;クリック&lt;/a&gt;</span><span class="dl">\'</span><span class="p">)</span>\n<span class="p">},</span> <span class="p">[])</span>\n\n<span class="k">return </span><span class="p">(</span>\n  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">dangerouslySetInnerHTML</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">__html</span><span class="p">:</span> <span class="nx">content</span> <span class="p">}</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n<span class="p">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="64:1-64:141">こうすることで、サーバーサイドとクライアントサイドのレンダリングの差異を無くすことができました</p>\n',body:'# はじめに\n\nReactの`dangerouslySetInnerHTML`とは、生のHTMLをReactコンポーネントに直接注入するためのプロパティです。\n\n例)\n```tsx: index.tsx\nconst content = \'<a href="https://www.google.com" target="_blank">クリック</a>\'\n\nreturn (\n  <div dangerouslySetInnerHTML={{ __html: content }}></div>\n)\n```\n\n\nこのプロパティを使ってしばしば外部コンテンツを表示したり、\nユーザーの入力をプレビューしたりすることがあります。\n\n> そう、丁度こんな風に\n> \n> <img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/555c9325-a58c-35db-d4c6-15adad92db9c.png" />\n\nそんな`dangerouslySetInnerHTML`を初回描画時に読み込むと`Hydration failed`のエラーになりましたので、その解決方法です。\n\n## 原因\n\n`Hydration failed`とは、\n**サーバーサイド**でレンダリングされたHTMLと、\n**クライアントサイド**でレンダリングされたHTMLとの間で\n不一致があるときに発生します。\n\nつまり最初の例の場合、\n\n```html: サーバーサイド\n<div></div>\n```\n\n```html: クライアントサイド\n<div>\n  <a href="https://www.google.com" target="_blank">クリック</a>\n</div>\n```\n\nのように差が発生しているためエラーになっていました。\n\n\n## 対処法\n\n### `useEffect`を使う\n\nuseEffectを使い、最初のレンダリング後に表示したいものを表示する\n\n```tsx: index.tsx\nconst [content, setContent] = useState()\n\nuseEffect(() => {\n  setContent(\'<a href="https://www.google.com" target="_blank">クリック</a>\')\n}, [])\n\nreturn (\n  <div dangerouslySetInnerHTML={{ __html: content }}></div>\n)\n```\n\nこうすることで、サーバーサイドとクライアントサイドのレンダリングの差異を無くすことができました\n',coediting:!1,comments_count:0,created_at:"2023-06-19T15:07:29+09:00",group:null,id:"957bf8a949833151612b",likes_count:1,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"TypeScript",versions:[]},{name:"React",versions:[]},{name:"Next.js",versions:[]}],title:"dangerouslySetInnerHTMLを使ってHTMLを描画しようとするとHydration failedになる",updated_at:"2023-06-19T15:07:29+09:00",url:"https://qiita.com/maaaashi/items/957bf8a949833151612b",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:392,team_membership:null,organization_url_name:null},{rendered_body:'<h2 data-sourcepos="1:1-1:15">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h2>\n<p data-sourcepos="3:1-4:68">最近、TDD・クリーンアーキテクチャについての理解を深めようと、<br>\n<strong>麻雀ゲーム</strong>をNextjs + TypeScriptで作り始めました。</p>\n<p data-sourcepos="6:1-6:109">「<strong>牌を引く</strong>」というユースケースについてのテストを書こうと思いましたが、</p>\n<p data-sourcepos="8:1-10:48">素人である私は、<br>\n<strong>ランダムに引かれるものをどうやってテストしたらいいんだ？</strong><br>\n<strong>数千回回して統計を取るのか...??</strong></p>\n<p data-sourcepos="12:1-12:63">という疑問を持ったので記事として残します。</p>\n<h2 data-sourcepos="14:1-14:9">\n<span id="結論" class="fragment"></span><a href="#%E7%B5%90%E8%AB%96"><i class="fa fa-link"></i></a>結論</h2>\n<p data-sourcepos="16:1-16:42"><strong>Math.randomのテストはいらない</strong></p>\n<p data-sourcepos="18:1-20:63">これを早く意識するべきでした。<br>\nランダム値を出力する機能は私の用意したものではなく、TypeScript(JavaScript)で用意されているものなので、<br>\nここのテストをあえてする必要はありません。</p>\n<p data-sourcepos="22:1-22:96"><strong>Math.randomのモックを用意し、それを使ってしまえばいい</strong>だけでした。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="24:1-35:3"><div class="highlight"><pre><code><span class="c1">// 一旦オリジナルのMath.randomを保存</span>\n<span class="kd">const</span> <span class="nx">originalMathRandom</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span>\n\n<span class="c1">// テスト実行</span>\n<span class="nb">Math</span><span class="p">.</span><span class="nx">random</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="mf">0.2</span>\n<span class="kd">const</span> <span class="nx">tile</span> <span class="o">=</span> <span class="nx">tileUsecase</span><span class="p">.</span><span class="nf">drawTIle</span><span class="p">()</span>\n<span class="nf">expect</span><span class="p">(</span><span class="nx">tile</span><span class="p">).</span><span class="nf">toEqual</span><span class="p">(</span><span class="nx">expected</span><span class="p">)</span>\n\n<span class="c1">// 最後に保存しておいたMath.randomをリストア</span>\n<span class="nb">Math</span><span class="p">.</span><span class="nx">random</span> <span class="o">=</span> <span class="nx">originalMathRandom</span>\n</code></pre></div></div>\n<h2 data-sourcepos="37:1-37:18">\n<span id="実行コード" class="fragment"></span><a href="#%E5%AE%9F%E8%A1%8C%E3%82%B3%E3%83%BC%E3%83%89"><i class="fa fa-link"></i></a>実行コード</h2>\n<details><summary>(テスト) TileUsecase.test.ts</summary><div>\n<div class="code-frame" data-lang="typescript" data-sourcepos="42:1-90:3">\n<div class="code-lang"><span class="bold"> src/__tests__/usecase/TileUsecase.test.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">expect</span><span class="p">,</span> <span class="nx">describe</span><span class="p">,</span> <span class="nx">it</span><span class="p">,</span> <span class="nx">vi</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">vitest</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">TileUsecase</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@/usecase/TileUsecase</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">Tile</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@/entities/Tile</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">TileUsecasePort</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@/usecase/port/TileUsecasePort</span><span class="dl">\'</span>\n\n<span class="nf">describe</span><span class="p">(</span><span class="dl">\'</span><span class="s1">TileUsecase</span><span class="dl">\'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="kd">let</span> <span class="na">tileUsecase</span><span class="p">:</span> <span class="nx">TileUsecase</span>\n  <span class="kd">const</span> <span class="na">deck</span><span class="p">:</span> <span class="nx">Tile</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span>\n    <span class="k">new</span> <span class="nc">Tile</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">man</span><span class="dl">\'</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">1</span><span class="dl">\'</span><span class="p">),</span>\n    <span class="k">new</span> <span class="nc">Tile</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">pin</span><span class="dl">\'</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">2</span><span class="dl">\'</span><span class="p">),</span>\n    <span class="k">new</span> <span class="nc">Tile</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">sou</span><span class="dl">\'</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">3</span><span class="dl">\'</span><span class="p">)</span>\n  <span class="p">]</span>\n\n  <span class="nf">it</span><span class="p">(</span><span class="dl">\'</span><span class="s1">tileUsecase.drawTile select a random tile from deck</span><span class="dl">\'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="kd">const</span> <span class="nx">tileUsecasePort</span> <span class="o">=</span> <span class="p">{}</span> <span class="k">as</span> <span class="nx">TileUsecasePort</span>\n\n    <span class="nx">tileUsecasePort</span><span class="p">.</span><span class="nx">drawTile</span> <span class="o">=</span> <span class="nx">vi</span><span class="p">.</span><span class="nf">fn</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n      <span class="kd">const</span> <span class="nx">randomNum</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">deck</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>\n      <span class="k">return</span> <span class="nx">deck</span><span class="p">[</span><span class="nx">randomNum</span><span class="p">]</span>\n    <span class="p">})</span>\n\n    <span class="nx">tileUsecase</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TileUsecase</span><span class="p">(</span><span class="nx">tileUsecasePort</span><span class="p">)</span>\n\n    <span class="kd">const</span> <span class="nx">originalMathRandom</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span>\n    <span class="kd">let</span> <span class="na">tile</span><span class="p">:</span> <span class="nx">Tile</span>\n\n    <span class="c1">// 0.2 is the random number of Math.random()</span>\n    <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="mf">0.2</span>\n\n    <span class="nx">tile</span> <span class="o">=</span> <span class="nx">tileUsecase</span><span class="p">.</span><span class="nf">drawTile</span><span class="p">()</span>\n    <span class="nf">expect</span><span class="p">(</span><span class="nx">tile</span><span class="p">).</span><span class="nf">toEqual</span><span class="p">(</span><span class="k">new</span> <span class="nc">Tile</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">man</span><span class="dl">\'</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">1</span><span class="dl">\'</span><span class="p">))</span>\n\n    <span class="c1">// 0.5 is the random number of Math.random()</span>\n    <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="mf">0.5</span>\n\n    <span class="nx">tile</span> <span class="o">=</span> <span class="nx">tileUsecase</span><span class="p">.</span><span class="nf">drawTile</span><span class="p">()</span>\n    <span class="nf">expect</span><span class="p">(</span><span class="nx">tile</span><span class="p">).</span><span class="nf">toEqual</span><span class="p">(</span><span class="k">new</span> <span class="nc">Tile</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">pin</span><span class="dl">\'</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">2</span><span class="dl">\'</span><span class="p">))</span>\n\n    <span class="c1">// 0.8 is the random number of Math.random()</span>\n    <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="mf">0.8</span>\n\n    <span class="nx">tile</span> <span class="o">=</span> <span class="nx">tileUsecase</span><span class="p">.</span><span class="nf">drawTile</span><span class="p">()</span>\n    <span class="nf">expect</span><span class="p">(</span><span class="nx">tile</span><span class="p">).</span><span class="nf">toEqual</span><span class="p">(</span><span class="k">new</span> <span class="nc">Tile</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">sou</span><span class="dl">\'</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">3</span><span class="dl">\'</span><span class="p">))</span>\n\n    <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span> <span class="o">=</span> <span class="nx">originalMathRandom</span>\n  <span class="p">})</span>\n<span class="p">})</span>\n</code></pre></div>\n</div>\n</div>\n</details>\n<details><summary>(ユースケース) TileUsecase.ts</summary><div>\n<div class="code-frame" data-lang="typescript" data-sourcepos="98:1-108:3">\n<div class="code-lang"><span class="bold"> src/usecase/TileUsecase.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">TileUsecasePort</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./port/TileUsecasePort</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="kd">class</span> <span class="nc">TileUsecase</span> <span class="p">{</span>\n  <span class="nf">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">inputPort</span><span class="p">:</span> <span class="nx">TileUsecasePort</span><span class="p">)</span> <span class="p">{}</span>\n\n  <span class="nf">drawTile</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">inputPort</span><span class="p">.</span><span class="nf">drawTile</span><span class="p">();</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n</div>\n</details>\n<details><summary>(ポート) TileUsecasePort.ts</summary><div>\n<div class="code-frame" data-lang="typescript" data-sourcepos="115:1-121:3">\n<div class="code-lang"><span class="bold"> src/usecase/port/TileUsecasePort.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Tile</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/entities/Tile</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="kr">interface</span> <span class="nx">TileUsecasePort</span> <span class="p">{</span>\n  <span class="nf">drawTile</span><span class="p">():</span> <span class="nx">Tile</span><span class="p">;</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n</div>\n</details>\n<details><summary>(エンティティ) Tile.ts</summary><div>\n<div class="code-frame" data-lang="typescript" data-sourcepos="128:1-150:3">\n<div class="code-lang"><span class="bold"> src/entities/Tile.ts</span></div>\n<div class="highlight"><pre><code><span class="kd">type</span> <span class="nx">Suit</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">man</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">pin</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">sou</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">zi</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="kd">class</span> <span class="nc">Tile</span> <span class="p">{</span>\n  <span class="nf">constructor</span><span class="p">(</span>\n    <span class="k">private</span> <span class="nx">_id</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>\n    <span class="k">private</span> <span class="nx">_suit</span><span class="p">:</span> <span class="nx">Suit</span><span class="p">,</span>\n    <span class="k">private</span> <span class="nx">_value</span><span class="p">:</span> <span class="kr">string</span>\n  <span class="p">)</span> <span class="p">{}</span>\n\n  <span class="kd">get</span> <span class="nf">id</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">;</span>\n  <span class="p">}</span>\n\n  <span class="kd">get</span> <span class="nf">suit</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_suit</span><span class="p">;</span>\n  <span class="p">}</span>\n\n  <span class="kd">get</span> <span class="nf">value</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_value</span><span class="p">;</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n</div>\n</details>\n',body:"## はじめに\n\n最近、TDD・クリーンアーキテクチャについての理解を深めようと、\n**麻雀ゲーム**をNextjs + TypeScriptで作り始めました。\n\n「**牌を引く**」というユースケースについてのテストを書こうと思いましたが、\n\n素人である私は、\n**ランダムに引かれるものをどうやってテストしたらいいんだ？**\n**数千回回して統計を取るのか...??**\n\nという疑問を持ったので記事として残します。\n\n## 結論\n\n**Math.randomのテストはいらない**\n\nこれを早く意識するべきでした。\nランダム値を出力する機能は私の用意したものではなく、TypeScript(JavaScript)で用意されているものなので、\nここのテストをあえてする必要はありません。\n\n**Math.randomのモックを用意し、それを使ってしまえばいい**だけでした。\n\n```typescript\n// 一旦オリジナルのMath.randomを保存\nconst originalMathRandom = Math.random\n\n// テスト実行\nMath.random = () => 0.2\nconst tile = tileUsecase.drawTIle()\nexpect(tile).toEqual(expected)\n\n// 最後に保存しておいたMath.randomをリストア\nMath.random = originalMathRandom\n```\n\n## 実行コード\n\n\n<details><summary>(テスト) TileUsecase.test.ts</summary><div>\n\n```typescript: src/__tests__/usecase/TileUsecase.test.ts\nimport { expect, describe, it, vi } from 'vitest'\nimport { TileUsecase } from '@/usecase/TileUsecase'\nimport { Tile } from '@/entities/Tile'\nimport { TileUsecasePort } from '@/usecase/port/TileUsecasePort'\n\ndescribe('TileUsecase', () => {\n  let tileUsecase: TileUsecase\n  const deck: Tile[] = [\n    new Tile(1, 'man', '1'),\n    new Tile(2, 'pin', '2'),\n    new Tile(3, 'sou', '3')\n  ]\n\n  it('tileUsecase.drawTile select a random tile from deck', () => {\n    const tileUsecasePort = {} as TileUsecasePort\n\n    tileUsecasePort.drawTile = vi.fn(() => {\n      const randomNum = Math.floor(Math.random() * deck.length)\n      return deck[randomNum]\n    })\n\n    tileUsecase = new TileUsecase(tileUsecasePort)\n\n    const originalMathRandom = Math.random\n    let tile: Tile\n\n    // 0.2 is the random number of Math.random()\n    Math.random = () => 0.2\n\n    tile = tileUsecase.drawTile()\n    expect(tile).toEqual(new Tile(1, 'man', '1'))\n\n    // 0.5 is the random number of Math.random()\n    Math.random = () => 0.5\n\n    tile = tileUsecase.drawTile()\n    expect(tile).toEqual(new Tile(2, 'pin', '2'))\n\n    // 0.8 is the random number of Math.random()\n    Math.random = () => 0.8\n\n    tile = tileUsecase.drawTile()\n    expect(tile).toEqual(new Tile(3, 'sou', '3'))\n\n    Math.random = originalMathRandom\n  })\n})\n```\n\n</div>\n\n</details>\n\n<details><summary>(ユースケース) TileUsecase.ts</summary><div>\n\n```typescript: src/usecase/TileUsecase.ts\nimport { TileUsecasePort } from \"./port/TileUsecasePort\";\n\nexport class TileUsecase {\n  constructor(private inputPort: TileUsecasePort) {}\n\n  drawTile() {\n    return this.inputPort.drawTile();\n  }\n}\n```\n\n</div>\n</details>\n\n<details><summary>(ポート) TileUsecasePort.ts</summary><div>\n\n```typescript: src/usecase/port/TileUsecasePort.ts\nimport { Tile } from \"@/entities/Tile\";\n\nexport interface TileUsecasePort {\n  drawTile(): Tile;\n}\n```\n\n</div>\n</details>\n\n<details><summary>(エンティティ) Tile.ts</summary><div>\n\n```typescript: src/entities/Tile.ts\ntype Suit = \"man\" | \"pin\" | \"sou\" | \"zi\";\n\nexport class Tile {\n  constructor(\n    private _id: number,\n    private _suit: Suit,\n    private _value: string\n  ) {}\n\n  get id() {\n    return this._id;\n  }\n\n  get suit() {\n    return this._suit;\n  }\n\n  get value() {\n    return this._value;\n  }\n}\n```\n\n</div>\n</details>\n\n\n\n",coediting:!1,comments_count:0,created_at:"2023-06-11T22:25:37+09:00",group:null,id:"b78653662814b8af4054",likes_count:1,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"TypeScript",versions:[]},{name:"Vitest",versions:[]}],title:"ランダムに一つピックアップするというテスト",updated_at:"2023-06-11T22:25:37+09:00",url:"https://qiita.com/maaaashi/items/b78653662814b8af4054",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:277,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-5:69">最近GraphQLについて学びまして、<br>\nNext.js + GraphQL + GraphQL CodeGenerator + Prismaの構成でTodoアプリを構築したので<br>\n軽〜く解説をしつつ、その記録をここに残します。</p>\n<p data-sourcepos="7:1-7:164"><a href="https://camo.qiitausercontent.com/4fac6f85ac23ce1353083031a87a1f1578abed84/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f64396336383664342d636137662d666563392d613931632d3162303530636661616666662e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fd9c686d4-ca7f-fec9-a91c-1b050cfaafff.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=de64112d9d2965da95e3eab5b36deb8c" alt="スクリーンショット 2023-04-15 20.58.42.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/d9c686d4-ca7f-fec9-a91c-1b050cfaafff.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fd9c686d4-ca7f-fec9-a91c-1b050cfaafff.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3a0d18302a874025533f8659264934ff 1x" loading="lazy"></a></p>\n<h1 data-sourcepos="9:1-9:8">\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h1>\n<ul data-sourcepos="11:1-16:0">\n<li data-sourcepos="11:1-11:13">Macbook Air</li>\n<li data-sourcepos="12:1-13:14">node\n<ul data-sourcepos="13:5-13:14">\n<li data-sourcepos="13:5-13:14">v18.13.0</li>\n</ul>\n</li>\n<li data-sourcepos="14:1-16:0">pnpm\n<ul data-sourcepos="15:5-16:0">\n<li data-sourcepos="15:5-16:0">7.27.0</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos="17:1-17:8">\n<span id="目次" class="fragment"></span><a href="#%E7%9B%AE%E6%AC%A1"><i class="fa fa-link"></i></a>目次</h1>\n<ul data-sourcepos="19:1-33:0">\n<li data-sourcepos="19:1-23:18">\n<a href="https://qiita.com/maaaashi/items/fe52db19759ea8a0be31" id="reference-36fe2a3375510a10cab2">前編</a>\n<ol data-sourcepos="20:5-23:18">\n<li data-sourcepos="20:5-20:22">Next Create App</li>\n<li data-sourcepos="21:5-21:32">GraphQLサーバー構築</li>\n<li data-sourcepos="22:5-22:19">Subscription</li>\n<li data-sourcepos="23:5-23:18">DB・Prisma</li>\n</ol>\n</li>\n<li data-sourcepos="24:1-29:32">\n<a href="https://qiita.com/maaaashi/items/722d75cf8bd25efded88" id="reference-e0939d211a58f878d354">中編</a>\n<ol data-sourcepos="25:5-29:32">\n<li data-sourcepos="25:5-25:21">GraphQL Schema</li>\n<li data-sourcepos="26:5-26:22">GraphQL Context</li>\n<li data-sourcepos="27:5-27:29">GraphQL Code Generator</li>\n<li data-sourcepos="28:5-28:23">GraphQL Resolver</li>\n<li data-sourcepos="29:5-29:32">GraphQLサーバー修正</li>\n</ol>\n</li>\n<li data-sourcepos="30:1-33:0">\n<a href="https://qiita.com/maaaashi/items/5c63398a34ac3ea8ddad">後編</a> 👈 今ここ\n<ol data-sourcepos="31:5-33:0">\n<li data-sourcepos="31:5-31:28">フロント側準備</li>\n<li data-sourcepos="32:5-33:0">フロント側実装</li>\n</ol>\n</li>\n</ul>\n<h1 data-sourcepos="34:1-34:8">\n<span id="後編" class="fragment"></span><a href="#%E5%BE%8C%E7%B7%A8"><i class="fa fa-link"></i></a>後編</h1>\n<p data-sourcepos="36:1-36:42">後編はフロント側の実装です。</p>\n<h2 data-sourcepos="38:1-38:27">\n<span id="1-フロント側準備" class="fragment"></span><a href="#1-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4%E6%BA%96%E5%82%99"><i class="fa fa-link"></i></a>1. フロント側準備</h2>\n<p data-sourcepos="40:1-40:80">TailwindCSSのフレームワークである<code>daisyUI</code>を使っていきます。</p>\n<p data-sourcepos="42:1-42:20"><iframe id="qiita-embed-content__ba8000b87ff6fa4f3d54da9d89829d46" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__ba8000b87ff6fa4f3d54da9d89829d46" data-content="https%3A%2F%2Fdaisyui.com%2F" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<p data-sourcepos="44:1-44:58">また、アイコンには<code>react-icons</code>を使います。</p>\n<p data-sourcepos="46:1-46:41"><iframe id="qiita-embed-content__12bd73f2b132f2643b4ec5b43652da8e" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__12bd73f2b132f2643b4ec5b43652da8e" data-content="https%3A%2F%2Freact-icons.github.io%2Freact-icons" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<h3 data-sourcepos="48:1-48:28">\n<span id="1-1-daisyui-react-icons" class="fragment"></span><a href="#1-1-daisyui-react-icons"><i class="fa fa-link"></i></a>1-1. daisyUI react-icons</h3>\n<ul data-sourcepos="50:1-72:0">\n<li data-sourcepos="50:1-55:0">\n<p data-sourcepos="50:3-50:9">install</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="52:5-54:7"><div class="highlight"><pre><code><span class="nv">$ </span>pnpm add daisyui react-icons\n</code></pre></div></div>\n</li>\n<li data-sourcepos="56:1-64:0">\n<p data-sourcepos="56:3-56:20">tailwind.config.js</p>\n<div class="code-frame" data-lang="js" data-sourcepos="58:5-63:7">\n<div class="code-lang"><span class="bold"> tailwind.config.js</span></div>\n<div class="highlight"><pre><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="c1">//...</span>\n  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">daisyui</span><span class="dl">"</span><span class="p">)],</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos="65:1-72:0">\n<p data-sourcepos="65:3-65:38">デフォルトのCSS, HTMLの削除</p>\n<div class="code-frame" data-lang="css" data-sourcepos="67:5-71:7">\n<div class="code-lang"><span class="bold"> global.css</span></div>\n<div class="highlight"><pre><code><span class="k">@tailwind</span> <span class="n">base</span><span class="p">;</span>\n<span class="k">@tailwind</span> <span class="n">components</span><span class="p">;</span>\n<span class="k">@tailwind</span> <span class="n">utilities</span><span class="p">;</span>\n</code></pre></div>\n</div>\n</li>\n</ul>\n<h3 data-sourcepos="73:1-73:31">\n<span id="1-2-apollo-clientの設定" class="fragment"></span><a href="#1-2-apollo-client%E3%81%AE%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>1-2. apollo-clientの設定</h3>\n<ul data-sourcepos="75:1-108:0">\n<li data-sourcepos="75:1-80:0">\n<p data-sourcepos="75:3-75:9">install</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="77:5-79:7"><div class="highlight"><pre><code>pnpm add @apollo/client\n</code></pre></div></div>\n</li>\n<li data-sourcepos="81:1-86:0">\n<p data-sourcepos="81:3-81:11">edit .env</p>\n<div class="code-frame" data-lang="text" data-sourcepos="83:5-85:7">\n<div class="code-lang"><span class="bold">.env</span></div>\n<div class="highlight"><pre><code>NEXT_PUBLIC_GRAPHQL_ENDPOINT="http://localhost:3000/api/graphql"\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos="87:1-108:0">\n<p data-sourcepos="87:3-87:15">edit _app.tsx</p>\n<div class="code-frame" data-lang="tsx" data-sourcepos="89:5-107:7">\n<div class="code-lang"><span class="bold"> src/pages/_app.tsx</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="dl">"</span><span class="s2">@/styles/globals.css</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="k">import</span> <span class="p">{</span> <span class="nx">ApolloClient</span><span class="p">,</span> <span class="nx">ApolloProvider</span><span class="p">,</span> <span class="nx">InMemoryCache</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@apollo/client</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">AppProps</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next/app</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ApolloClient</span><span class="p">({</span>\n  <span class="na">uri</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_GRAPHQL_ENDPOINT</span><span class="p">,</span>\n  <span class="na">cache</span><span class="p">:</span> <span class="k">new</span> <span class="nc">InMemoryCache</span><span class="p">(),</span>\n<span class="p">});</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">App</span><span class="p">({</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">pageProps</span> <span class="p">}:</span> <span class="nx">AppProps</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nf">return </span><span class="p">(</span>\n    <span class="p">&lt;</span><span class="nc">ApolloProvider</span> <span class="na">client</span><span class="p">=</span><span class="si">{</span><span class="nx">client</span><span class="si">}</span><span class="p">&gt;</span>\n      <span class="p">&lt;</span><span class="nc">Component</span> <span class="si">{</span><span class="p">...</span><span class="nx">pageProps</span><span class="si">}</span> <span class="p">/&gt;</span>\n    <span class="p">&lt;/</span><span class="nc">ApolloProvider</span><span class="p">&gt;</span>\n  <span class="p">);</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n</li>\n</ul>\n<h2 data-sourcepos="109:1-109:27">\n<span id="2-フロント側実装" class="fragment"></span><a href="#2-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4%E5%AE%9F%E8%A3%85"><i class="fa fa-link"></i></a>2. フロント側実装</h2>\n<h3 data-sourcepos="111:1-111:18">\n<span id="2-1-見た目" class="fragment"></span><a href="#2-1-%E8%A6%8B%E3%81%9F%E7%9B%AE"><i class="fa fa-link"></i></a>2-1. 見た目</h3>\n<p data-sourcepos="113:1-113:60">まずデータを入れずに見た目を調整します。</p>\n<p data-sourcepos="115:1-115:164"><a href="https://camo.qiitausercontent.com/a4f38d5f694d0932050b675312c81a2ae9ab438e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f64623339356535612d646637652d613435662d313563392d6162323639663162353638372e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fdb395e5a-df7e-a45f-15c9-ab269f1b5687.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4940d9f6c1df8cfcaa4534e1b9879e30" alt="スクリーンショット 2023-04-15 11.01.49.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/db395e5a-df7e-a45f-15c9-ab269f1b5687.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fdb395e5a-df7e-a45f-15c9-ab269f1b5687.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d6a4383cddd6ba4fdce8d21a13e8b95e 1x" loading="lazy"></a></p>\n<div class="code-frame" data-lang="tsx" data-sourcepos="118:1-165:3">\n<div class="code-lang"><span class="bold"> src/pages/index.tsx</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">AiOutlineCheckCircle</span><span class="p">,</span> <span class="nx">AiFillCheckCircle</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-icons/ai</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">BsFillTrash2Fill</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-icons/bs</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Home</span><span class="p">()</span> <span class="p">{</span>\n  <span class="nf">return </span><span class="p">(</span>\n    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"min-w-screen min-h-screen"</span> <span class="na">data-theme</span><span class="p">=</span><span class="s">"winter"</span><span class="p">&gt;</span>\n      <span class="p">&lt;</span><span class="nt">form</span> <span class="na">className</span><span class="p">=</span><span class="s">"flex p-10"</span><span class="p">&gt;</span>\n        <span class="p">&lt;</span><span class="nt">input</span>\n          <span class="na">type</span><span class="p">=</span><span class="s">"text"</span>\n          <span class="na">placeholder</span><span class="p">=</span><span class="s">"TODOを入力"</span>\n          <span class="na">className</span><span class="p">=</span><span class="s">"input input-bordered w-full"</span>\n        <span class="p">/&gt;</span>\n        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">className</span><span class="p">=</span><span class="s">"btn btn-primary"</span><span class="p">&gt;</span>送信<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>\n      <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>\n      <span class="p">&lt;</span><span class="nt">div</span>\n        <span class="na">className</span><span class="p">=</span><span class="s">"flex flex-col items-center gap-3 overflow-y-auto"</span>\n        <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="p">{</span>\n          <span class="na">maxHeight</span><span class="p">:</span> <span class="dl">"</span><span class="s2">calc(100vh - 150px)</span><span class="dl">"</span><span class="p">,</span>\n        <span class="p">}</span><span class="si">}</span>\n      <span class="p">&gt;</span>\n        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"p-3 bg-base-300 rounded-md w-2/3 flex items-center gap-3"</span><span class="p">&gt;</span>\n          <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>\n            <span class="si">{</span><span class="kc">true</span> <span class="p">?</span> <span class="p">(</span>\n              <span class="p">&lt;</span><span class="nc">AiFillCheckCircle</span>\n                <span class="na">size</span><span class="p">=</span><span class="si">{</span><span class="mi">40</span><span class="si">}</span>\n                <span class="na">className</span><span class="p">=</span><span class="s">"text-primary hover:text-primary-focus"</span>\n              <span class="p">/&gt;</span>\n            <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>\n              <span class="p">&lt;</span><span class="nc">AiOutlineCheckCircle</span>\n                <span class="na">size</span><span class="p">=</span><span class="si">{</span><span class="mi">40</span><span class="si">}</span>\n                <span class="na">className</span><span class="p">=</span><span class="s">"text-primary hover:text-primary-focus"</span>\n              <span class="p">/&gt;</span>\n            <span class="p">)</span><span class="si">}</span>\n          <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>\n          <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"text-lg font-bold flex-1"</span><span class="p">&gt;</span>hogehoge<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n          <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>\n            <span class="p">&lt;</span><span class="nc">BsFillTrash2Fill</span>\n              <span class="na">size</span><span class="p">=</span><span class="si">{</span><span class="mi">40</span><span class="si">}</span>\n              <span class="na">className</span><span class="p">=</span><span class="s">"text-error hover:text-error-content"</span>\n            <span class="p">/&gt;</span>\n          <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>\n        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n  <span class="p">);</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n<h3 data-sourcepos="167:1-167:24">\n<span id="2-2-データ利用" class="fragment"></span><a href="#2-2-%E3%83%87%E3%83%BC%E3%82%BF%E5%88%A9%E7%94%A8"><i class="fa fa-link"></i></a>2-2. データ利用</h3>\n<p data-sourcepos="169:1-169:161">次に<a href="https://qiita.com/maaaashi/items/722d75cf8bd25efded88">中編</a>で作成した<code>src/generated/request.ts</code>を使って、データを入れていきます。</p>\n<h3 data-sourcepos="171:1-171:34">\n<span id="-listtodo-todo一覧取得" class="fragment"></span><a href="#-listtodo-todo%E4%B8%80%E8%A6%A7%E5%8F%96%E5%BE%97"><i class="fa fa-link"></i></a>◆ listTodo: Todo一覧取得</h3>\n<div class="code-frame" data-lang="diff_tsx" data-sourcepos="173:1-263:3">\n<div class="code-lang"><span class="bold"> index.tsx</span></div>\n<div class="highlight"><pre><code><span class="hil"><span class="o">+ </span><span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">ListTodosQuery</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/generated/request</span><span class="dl">"</span><span class="p">;</span>\n</span><span class="hil"><span class="o">+ </span><span class="k">import</span> <span class="p">{</span>\n</span><span class="hil"><span class="o">+ </span>  <span class="nx">useListTodosQuery</span><span class="p">,</span>\n</span><span class="hil"><span class="o">+ </span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/generated/request</span><span class="dl">"</span><span class="p">;</span>\n</span><span class="hil"><span class="o">+ </span><span class="k">import</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>\n</span><span class="k">import</span> <span class="p">{</span> <span class="nx">AiOutlineCheckCircle</span><span class="p">,</span> <span class="nx">AiFillCheckCircle</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-icons/ai</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">BsFillTrash2Fill</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-icons/bs</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Home</span><span class="p">()</span> <span class="p">{</span>\n<span class="hil"><span class="o">+ </span><span class="kd">const</span> <span class="p">[</span><span class="nx">todos</span><span class="p">,</span> <span class="nx">setTodos</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">ListTodosQuery</span><span class="p">[</span><span class="dl">"</span><span class="s2">listTodos</span><span class="dl">"</span><span class="p">]</span><span class="o">&gt;</span><span class="p">([]);</span>\n</span><span class="hil"><span class="o">+ </span><span class="kd">const</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">refetch</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">useListTodosQuery</span><span class="p">();</span>\n</span>\n<span class="hil"><span class="o">+ </span><span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n</span><span class="hil"><span class="o">+ </span>  <span class="nf">setTodos</span><span class="p">(</span><span class="nx">data</span><span class="p">?.</span><span class="nx">listTodos</span> <span class="o">??</span> <span class="p">[]);</span>\n</span><span class="hil"><span class="o">+ </span><span class="p">},</span> <span class="p">[</span><span class="nx">data</span><span class="p">?.</span><span class="nx">listTodos</span><span class="p">]);</span>\n</span>\n<span class="hil"><span class="o">+ </span> <span class="nf">if </span><span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>loading...<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>\n</span><span class="hil"><span class="o">+ </span> <span class="nf">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>error...<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>\n</span><span class="hil"><span class="o">+ </span> <span class="nf">if </span><span class="p">(</span><span class="o">!</span><span class="nx">data</span><span class="p">?.</span><span class="nx">listTodos</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>data error...<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>\n</span>\n  <span class="nf">return </span><span class="p">(</span>\n    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"min-w-screen min-h-screen"</span> <span class="na">data-theme</span><span class="p">=</span><span class="s">"winter"</span><span class="p">&gt;</span>\n      <span class="p">&lt;</span><span class="nt">form</span> <span class="na">className</span><span class="p">=</span><span class="s">"flex p-10"</span><span class="p">&gt;</span>\n        <span class="p">&lt;</span><span class="nt">input</span>\n          <span class="na">type</span><span class="p">=</span><span class="s">"text"</span>\n          <span class="na">placeholder</span><span class="p">=</span><span class="s">"TODOを入力"</span>\n          <span class="na">className</span><span class="p">=</span><span class="s">"input input-bordered w-full"</span>\n        <span class="p">/&gt;</span>\n        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">className</span><span class="p">=</span><span class="s">"btn btn-primary"</span><span class="p">&gt;</span>送信<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>\n      <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>\n      <span class="p">&lt;</span><span class="nt">div</span>\n        <span class="na">className</span><span class="p">=</span><span class="s">"flex flex-col items-center gap-3 overflow-y-auto"</span>\n        <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="p">{</span>\n          <span class="na">maxHeight</span><span class="p">:</span> <span class="dl">"</span><span class="s2">calc(100vh - 150px)</span><span class="dl">"</span><span class="p">,</span>\n        <span class="p">}</span><span class="si">}</span>\n      <span class="p">&gt;</span>\n<span class="hil">+        <span class="si">{</span><span class="nx">todos</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">todo</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>\n</span><span class="hil"><span class="o">+ </span>         <span class="o">&lt;</span><span class="nx">div</span>\n</span><span class="hil"><span class="o">+ </span>           <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">p-3 bg-base-300 rounded-md w-2/3 flex items-center gap-3</span><span class="dl">"</span>\n</span><span class="hil"><span class="o">+ </span>           <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">todo</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span>\n</span><span class="hil"><span class="o">+ </span>         <span class="o">&gt;</span>\n</span><span class="hil"><span class="o">+ </span>           <span class="o">&lt;</span><span class="nx">button</span><span class="o">&gt;</span>\n</span><span class="hil"><span class="o">+ </span>             <span class="p">{</span><span class="nx">todo</span><span class="p">.</span><span class="nx">done</span> <span class="p">?</span> <span class="p">(</span>\n</span><span class="hil"><span class="o">+ </span>               <span class="o">&lt;</span><span class="nx">AiFillCheckCircle</span>\n</span><span class="hil"><span class="o">+ </span>                 <span class="nx">size</span><span class="o">=</span><span class="p">{</span><span class="mi">40</span><span class="p">}</span>\n</span><span class="hil"><span class="o">+ </span>                 <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">text-primary hover:text-primary-focus</span><span class="dl">"</span>\n</span><span class="hil"><span class="o">+ </span>               <span class="o">/&gt;</span>\n</span><span class="hil"><span class="o">+ </span>             <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>\n</span><span class="hil"><span class="o">+ </span>               <span class="o">&lt;</span><span class="nx">AiOutlineCheckCircle</span>\n</span><span class="hil"><span class="o">+ </span>                 <span class="nx">size</span><span class="o">=</span><span class="p">{</span><span class="mi">40</span><span class="p">}</span>\n</span><span class="hil"><span class="o">+ </span>                 <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">text-primary hover:text-primary-focus</span><span class="dl">"</span>\n</span><span class="hil"><span class="o">+ </span>               <span class="o">/&gt;</span>\n</span><span class="hil"><span class="o">+ </span>             <span class="p">)}</span>\n</span><span class="hil"><span class="o">+ </span>           <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;</span>\n</span><span class="hil"><span class="o">+ </span>           <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">text-lg font-bold flex-1</span><span class="dl">"</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">todo</span><span class="p">.</span><span class="nx">content</span><span class="p">}&lt;</span><span class="err">/</span><span class="na">div</span><span class="p">&gt;</span>\n</span><span class="hil">+            <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>\n</span><span class="hil">+              <span class="p">&lt;</span><span class="nc">BsFillTrash2Fill</span>\n</span><span class="hil"><span class="err">+</span>                <span class="na">size</span><span class="p">=</span><span class="si">{</span><span class="mi">40</span><span class="si">}</span>\n</span><span class="hil"><span class="err">+</span>                <span class="na">className</span><span class="p">=</span><span class="s">"text-error hover:text-error-content"</span>\n</span><span class="hil"><span class="err">+</span>              <span class="p">/&gt;</span>\n</span><span class="hil">+            <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>\n</span><span class="hil">+          <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n</span><span class="hil"><span class="o">+ </span>       <span class="p">))</span><span class="si">}</span>\n</span><span class="hdl">-        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"p-3 bg-base-300 rounded-md w-2/3 flex items-center gap-3"</span><span class="p">&gt;</span>\n</span><span class="hdl">-          <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>\n</span><span class="hdl">-            <span class="si">{</span><span class="kc">true</span> <span class="p">?</span> <span class="p">(</span>\n</span><span class="hdl"><span class="o">- </span>             <span class="o">&lt;</span><span class="nx">AiFillCheckCircle</span>\n</span><span class="hdl"><span class="o">- </span>               <span class="nx">size</span><span class="o">=</span><span class="p">{</span><span class="mi">40</span><span class="p">}</span>\n</span><span class="hdl"><span class="o">- </span>               <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">text-primary hover:text-primary-focus</span><span class="dl">"</span>\n</span><span class="hdl"><span class="o">- </span>             <span class="o">/&gt;</span>\n</span><span class="hdl"><span class="o">- </span>           <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>\n</span><span class="hdl"><span class="o">- </span>             <span class="o">&lt;</span><span class="nx">AiOutlineCheckCircle</span>\n</span><span class="hdl"><span class="o">- </span>               <span class="nx">size</span><span class="o">=</span><span class="p">{</span><span class="mi">40</span><span class="p">}</span>\n</span><span class="hdl"><span class="o">- </span>               <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">text-primary hover:text-primary-focus</span><span class="dl">"</span>\n</span><span class="hdl"><span class="o">- </span>             <span class="o">/&gt;</span>\n</span><span class="hdl"><span class="o">- </span>           <span class="p">)</span><span class="si">}</span>\n</span><span class="hdl">-          <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>\n</span><span class="hdl">-          <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"text-lg font-bold flex-1"</span><span class="p">&gt;</span>hogehoge<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n</span><span class="hdl">-          <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>\n</span><span class="hdl">-            <span class="p">&lt;</span><span class="nc">BsFillTrash2Fill</span>\n</span><span class="hdl"><span class="err">-</span>              <span class="na">size</span><span class="p">=</span><span class="si">{</span><span class="mi">40</span><span class="si">}</span>\n</span><span class="hdl"><span class="err">-</span>              <span class="na">className</span><span class="p">=</span><span class="s">"text-error hover:text-error-content"</span>\n</span><span class="hdl"><span class="err">-</span>            <span class="p">/&gt;</span>\n</span><span class="hdl">-          <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>\n</span><span class="hdl">-        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n</span>      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n  <span class="p">);</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n<div data-sourcepos="265:1-278:3" class="note info">\n<span class="fa fa-fw fa-check-circle"></span><div>\n<h4 data-sourcepos="266:1-266:16">\n<span id="query-hooks" class="fragment"></span><a href="#query-hooks"><i class="fa fa-link"></i></a>Query hooks</h4>\n<div class="code-frame" data-lang="typescript" data-sourcepos="268:1-270:3">\n<div class="code-lang"><span class="bold"> example</span></div>\n<div class="highlight"><pre><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">refetch</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">useListTodosQuery</span><span class="p">();</span>\n</code></pre></div>\n</div>\n<div class="code-frame" data-lang="typescript" data-sourcepos="272:1-277:3"><div class="highlight"><pre><code><span class="nx">loading</span><span class="p">:</span> <span class="nb">Boolean</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">データ取得中かどうか</span><span class="dl">"</span>\n<span class="nx">error</span><span class="p">:</span> <span class="nb">Object</span> <span class="o">=&gt;</span>  <span class="dl">"</span><span class="s2">エラーが発生した場合、オブジェクトが格納されます</span><span class="dl">"</span>\n<span class="nx">data</span><span class="p">:</span> <span class="nb">Object</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">取得したデータ</span><span class="dl">"</span>\n<span class="nx">refetch</span><span class="p">:</span> <span class="nb">Function</span> <span class="dl">"</span><span class="s2">再取得メソッド(後で登場します)</span><span class="dl">"</span>\n</code></pre></div></div>\n</div>\n</div>\n<h3 data-sourcepos="280:1-280:30">\n<span id="-addtodo-todoを追加" class="fragment"></span><a href="#-addtodo-todo%E3%82%92%E8%BF%BD%E5%8A%A0"><i class="fa fa-link"></i></a>◆ addTodo: Todoを追加</h3>\n<div class="code-frame" data-lang="diff_tsx" data-sourcepos="282:1-372:3">\n<div class="code-lang"><span class="bold"> index.tsx</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">ListTodosQuery</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/generated/request</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span>\n  <span class="nx">useListTodosQuery</span><span class="p">,</span>\n<span class="hil"><span class="o">+ </span> <span class="nx">useAddTodoMutation</span>\n</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/generated/request</span><span class="dl">"</span><span class="p">;</span>\n<span class="hil"><span class="o">+ </span><span class="k">import</span> <span class="p">{</span> <span class="nx">FormEvent</span><span class="p">,</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>\n</span><span class="k">import</span> <span class="p">{</span> <span class="nx">AiOutlineCheckCircle</span><span class="p">,</span> <span class="nx">AiFillCheckCircle</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-icons/ai</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">BsFillTrash2Fill</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-icons/bs</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Home</span><span class="p">()</span> <span class="p">{</span>\n<span class="hil"><span class="o">+ </span> <span class="kd">const</span> <span class="p">[</span><span class="nx">todoContent</span><span class="p">,</span> <span class="nx">setTodoContent</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>\n</span>  <span class="kd">const</span> <span class="p">[</span><span class="nx">todos</span><span class="p">,</span> <span class="nx">setTodos</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">ListTodosQuery</span><span class="p">[</span><span class="dl">"</span><span class="s2">listTodos</span><span class="dl">"</span><span class="p">]</span><span class="o">&gt;</span><span class="p">([]);</span>\n  <span class="kd">const</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">refetch</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">useListTodosQuery</span><span class="p">();</span>\n<span class="hil"><span class="o">+ </span> <span class="kd">const</span> <span class="p">[</span><span class="nx">addTodoMutation</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useAddTodoMutation</span><span class="p">();</span>\n</span>\n  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="nf">setTodos</span><span class="p">(</span><span class="nx">data</span><span class="p">?.</span><span class="nx">listTodos</span> <span class="o">??</span> <span class="p">[]);</span>\n  <span class="p">},</span> <span class="p">[</span><span class="nx">data</span><span class="p">?.</span><span class="nx">listTodos</span><span class="p">]);</span>\n\n  <span class="nf">if </span><span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>loading...<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>\n  <span class="nf">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>error...<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>\n  <span class="nf">if </span><span class="p">(</span><span class="o">!</span><span class="nx">data</span><span class="p">?.</span><span class="nx">listTodos</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>data error...<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>\n\n<span class="hil"><span class="o">+ </span> <span class="kd">const</span> <span class="nx">submitHandler</span> <span class="o">=</span> <span class="nf">async </span><span class="p">(</span><span class="nx">e</span><span class="p">:</span> <span class="nx">FormEvent</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n</span><span class="hil"><span class="o">+ </span>   <span class="nx">e</span><span class="p">.</span><span class="nf">preventDefault</span><span class="p">();</span>\n</span><span class="hil"><span class="o">+</span>\n</span><span class="hil"><span class="o">+ </span>   <span class="k">await</span> <span class="nf">addTodoMutation</span><span class="p">({</span>\n</span><span class="hil"><span class="o">+ </span>     <span class="na">variables</span><span class="p">:</span> <span class="p">{</span>\n</span><span class="hil"><span class="o">+ </span>       <span class="na">content</span><span class="p">:</span> <span class="nx">todoContent</span><span class="p">,</span>\n</span><span class="hil"><span class="o">+ </span>     <span class="p">},</span>\n</span><span class="hil"><span class="o">+ </span>   <span class="p">});</span>\n</span><span class="hil"><span class="o">+</span>\n</span><span class="hil"><span class="o">+ </span>   <span class="nf">setTodoContent</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>\n</span><span class="hil"><span class="o">+</span>\n</span><span class="hil"><span class="o">+ </span>   <span class="nf">refetch</span><span class="p">();</span>\n</span><span class="hil"><span class="o">+ </span> <span class="p">};</span>\n</span>\n  <span class="nf">return </span><span class="p">(</span>\n    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"min-w-screen min-h-screen"</span> <span class="na">data-theme</span><span class="p">=</span><span class="s">"winter"</span><span class="p">&gt;</span>\n<span class="hil">+      <span class="p">&lt;</span><span class="nt">form</span> <span class="na">className</span><span class="p">=</span><span class="s">"flex p-10"</span> <span class="na">onSubmit</span><span class="p">=</span><span class="si">{</span><span class="nx">submitHandler</span><span class="si">}</span><span class="p">&gt;</span>\n</span><span class="hdl">-      <span class="p">&lt;</span><span class="nt">form</span> <span class="na">className</span><span class="p">=</span><span class="s">"flex p-10"</span><span class="p">&gt;</span>\n</span>        <span class="p">&lt;</span><span class="nt">input</span>\n          <span class="na">type</span><span class="p">=</span><span class="s">"text"</span>\n          <span class="na">placeholder</span><span class="p">=</span><span class="s">"TODOを入力"</span>\n          <span class="na">className</span><span class="p">=</span><span class="s">"input input-bordered w-full"</span>\n<span class="hil"><span class="err">+</span>          <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">todoContent</span><span class="si">}</span>\n</span><span class="hil"><span class="err">+</span>          <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n</span><span class="hil"><span class="o">+ </span>           <span class="nf">setTodoContent</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>\n</span><span class="hil"><span class="o">+ </span>         <span class="p">}</span><span class="si">}</span>\n</span>        <span class="p">/&gt;</span>\n        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">className</span><span class="p">=</span><span class="s">"btn btn-primary"</span><span class="p">&gt;</span>送信<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>\n      <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>\n      <span class="p">&lt;</span><span class="nt">div</span>\n        <span class="na">className</span><span class="p">=</span><span class="s">"flex flex-col items-center gap-3 overflow-y-auto"</span>\n        <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="p">{</span>\n          <span class="na">maxHeight</span><span class="p">:</span> <span class="dl">"</span><span class="s2">calc(100vh - 150px)</span><span class="dl">"</span><span class="p">,</span>\n        <span class="p">}</span><span class="si">}</span>\n      <span class="p">&gt;</span>\n        <span class="si">{</span><span class="nx">todos</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">todo</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>\n          <span class="p">&lt;</span><span class="nt">div</span>\n            <span class="na">className</span><span class="p">=</span><span class="s">"p-3 bg-base-300 rounded-md w-2/3 flex items-center gap-3"</span>\n            <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">todo</span><span class="p">.</span><span class="nx">id</span><span class="si">}</span>\n          <span class="p">&gt;</span>\n            <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>\n              <span class="si">{</span><span class="nx">todo</span><span class="p">.</span><span class="nx">done</span> <span class="p">?</span> <span class="p">(</span>\n                <span class="p">&lt;</span><span class="nc">AiFillCheckCircle</span>\n                  <span class="na">size</span><span class="p">=</span><span class="si">{</span><span class="mi">40</span><span class="si">}</span>\n                  <span class="na">className</span><span class="p">=</span><span class="s">"text-primary hover:text-primary-focus"</span>\n                <span class="p">/&gt;</span>\n              <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>\n                <span class="p">&lt;</span><span class="nc">AiOutlineCheckCircle</span>\n                  <span class="na">size</span><span class="p">=</span><span class="si">{</span><span class="mi">40</span><span class="si">}</span>\n                  <span class="na">className</span><span class="p">=</span><span class="s">"text-primary hover:text-primary-focus"</span>\n                <span class="p">/&gt;</span>\n              <span class="p">)</span><span class="si">}</span>\n            <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>\n            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"text-lg font-bold flex-1"</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">todo</span><span class="p">.</span><span class="nx">content</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n            <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>\n              <span class="p">&lt;</span><span class="nc">BsFillTrash2Fill</span>\n                <span class="na">size</span><span class="p">=</span><span class="si">{</span><span class="mi">40</span><span class="si">}</span>\n                <span class="na">className</span><span class="p">=</span><span class="s">"text-error hover:text-error-content"</span>\n              <span class="p">/&gt;</span>\n            <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>\n          <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n        <span class="p">))</span><span class="si">}</span>\n      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n  );\n}\n</code></pre></div>\n</div>\n<ul data-sourcepos="374:1-380:0">\n<li data-sourcepos="374:1-380:0">\n<p data-sourcepos="374:3-374:17">処理の流れ</p>\n<div class="code-frame" data-lang="text" data-sourcepos="376:5-378:7"><div class="highlight"><pre><code>FormSubmit → AddTodo → refetch\n</code></pre></div></div>\n<p data-sourcepos="379:5-379:98">とすることで、Todoを追加後に最新状態を取得し、反映させています。</p>\n</li>\n</ul>\n<div data-sourcepos="381:1-401:3" class="note info">\n<span class="fa fa-fw fa-check-circle"></span><div>\n<h4 data-sourcepos="382:1-382:19">\n<span id="mutation-hooks" class="fragment"></span><a href="#mutation-hooks"><i class="fa fa-link"></i></a>Mutation hooks</h4>\n<div class="code-frame" data-lang="typescript" data-sourcepos="384:1-386:3">\n<div class="code-lang"><span class="bold"> example</span></div>\n<div class="highlight"><pre><code><span class="kd">const</span> <span class="p">[</span><span class="nx">addTodoMutation</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useAddTodoMutation</span><span class="p">();</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="388:1-388:133">今回は使いませんでしたが、Mutationのhooksの返り値は<code>[MutationFunction, MutationResult]</code>の配列となります。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="390:1-400:3"><div class="highlight"><pre><code><span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nx">MutationFunction</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">Mutationの実行関数</span><span class="dl">"</span>\n<span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nx">MutationResult</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="na">data</span><span class="p">:</span> <span class="nx">TData</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">Mutationから返されたデータ</span><span class="dl">"</span>\n  <span class="na">loading</span><span class="p">:</span> <span class="nb">Boolean</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">取得中かどうか</span><span class="dl">"</span>\n  <span class="na">error</span><span class="p">:</span> <span class="nb">Object</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">エラーが発生した場合、オブジェクトが格納されます</span><span class="dl">"</span>\n  <span class="na">called</span><span class="p">:</span> <span class="nb">Boolean</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">trueの場合、呼び出されています</span><span class="dl">"</span>\n  <span class="na">client</span><span class="p">:</span> <span class="nx">ApolloClient</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">Mutationを実行したApollo Client情報</span><span class="dl">"</span>\n  <span class="na">reset</span><span class="p">:</span> <span class="nb">Function</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">Mutationの状態を初期の呼び出される前に戻す処理</span><span class="dl">"</span>\n<span class="p">}]</span>\n</code></pre></div></div>\n</div>\n</div>\n<h3 data-sourcepos="403:1-403:33">\n<span id="-updatetodo-todoを更新" class="fragment"></span><a href="#-updatetodo-todo%E3%82%92%E6%9B%B4%E6%96%B0"><i class="fa fa-link"></i></a>◆ updateTodo: Todoを更新</h3>\n<p data-sourcepos="405:1-405:51">mutationの使い方はaddTodoと変わりません</p>\n<div class="code-frame" data-lang="diff_tsx" data-sourcepos="407:1-513:3">\n<div class="code-lang"><span class="bold"> index.tsx</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">ListTodosQuery</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/generated/request</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span>\n  <span class="nx">useListTodosQuery</span><span class="p">,</span>\n  <span class="nx">useAddTodoMutation</span><span class="p">,</span>\n<span class="hil"><span class="o">+ </span> <span class="nx">useUpdateTodoMutation</span><span class="p">,</span>\n</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/generated/request</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">FormEvent</span><span class="p">,</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">AiOutlineCheckCircle</span><span class="p">,</span> <span class="nx">AiFillCheckCircle</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-icons/ai</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">BsFillTrash2Fill</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-icons/bs</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Home</span><span class="p">()</span> <span class="p">{</span>\n  <span class="kd">const</span> <span class="p">[</span><span class="nx">todoContent</span><span class="p">,</span> <span class="nx">setTodoContent</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>\n  <span class="kd">const</span> <span class="p">[</span><span class="nx">todos</span><span class="p">,</span> <span class="nx">setTodos</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">ListTodosQuery</span><span class="p">[</span><span class="dl">"</span><span class="s2">listTodos</span><span class="dl">"</span><span class="p">]</span><span class="o">&gt;</span><span class="p">([]);</span>\n  <span class="kd">const</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">refetch</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">useListTodosQuery</span><span class="p">();</span>\n  <span class="kd">const</span> <span class="p">[</span><span class="nx">addTodoMutation</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useAddTodoMutation</span><span class="p">();</span>\n<span class="hil"><span class="o">+ </span> <span class="kd">const</span> <span class="p">[</span><span class="nx">updateTodoMutation</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useUpdateTodoMutation</span><span class="p">();</span>\n</span>\n  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="nf">setTodos</span><span class="p">(</span><span class="nx">data</span><span class="p">?.</span><span class="nx">listTodos</span> <span class="o">??</span> <span class="p">[]);</span>\n  <span class="p">},</span> <span class="p">[</span><span class="nx">data</span><span class="p">?.</span><span class="nx">listTodos</span><span class="p">]);</span>\n\n  <span class="nf">if </span><span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>loading...<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>\n  <span class="nf">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>error...<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>\n  <span class="nf">if </span><span class="p">(</span><span class="o">!</span><span class="nx">data</span><span class="p">?.</span><span class="nx">listTodos</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>data error...<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>\n\n  <span class="kd">const</span> <span class="nx">submitHandler</span> <span class="o">=</span> <span class="nf">async </span><span class="p">(</span><span class="nx">e</span><span class="p">:</span> <span class="nx">FormEvent</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="nx">e</span><span class="p">.</span><span class="nf">preventDefault</span><span class="p">();</span>\n\n    <span class="k">await</span> <span class="nf">addTodoMutation</span><span class="p">({</span>\n      <span class="na">variables</span><span class="p">:</span> <span class="p">{</span>\n        <span class="na">content</span><span class="p">:</span> <span class="nx">todoContent</span><span class="p">,</span>\n      <span class="p">},</span>\n    <span class="p">});</span>\n\n    <span class="nf">setTodoContent</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>\n\n    <span class="nf">refetch</span><span class="p">();</span>\n  <span class="p">};</span>\n\n<span class="hil"><span class="o">+ </span> <span class="kd">const</span> <span class="nx">updateHandler</span> <span class="o">=</span> <span class="nf">async </span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">current</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n</span><span class="hil"><span class="o">+ </span>   <span class="k">await</span> <span class="nf">updateTodoMutation</span><span class="p">({</span>\n</span><span class="hil"><span class="o">+ </span>     <span class="na">variables</span><span class="p">:</span> <span class="p">{</span>\n</span><span class="hil"><span class="o">+ </span>       <span class="nx">id</span><span class="p">,</span>\n</span><span class="hil"><span class="o">+ </span>       <span class="na">done</span><span class="p">:</span> <span class="o">!</span><span class="nx">current</span><span class="p">,</span>\n</span><span class="hil"><span class="o">+ </span>     <span class="p">},</span>\n</span><span class="hil"><span class="o">+ </span>   <span class="p">});</span>\n</span><span class="hil"><span class="o">+</span>\n</span><span class="hil"><span class="o">+ </span>   <span class="nf">refetch</span><span class="p">();</span>\n</span><span class="hil"><span class="o">+ </span> <span class="p">};</span>\n</span>\n  <span class="nf">return </span><span class="p">(</span>\n    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"min-w-screen min-h-screen"</span> <span class="na">data-theme</span><span class="p">=</span><span class="s">"winter"</span><span class="p">&gt;</span>\n      <span class="p">&lt;</span><span class="nt">form</span> <span class="na">className</span><span class="p">=</span><span class="s">"flex p-10"</span> <span class="na">onSubmit</span><span class="p">=</span><span class="si">{</span><span class="nx">submitHandler</span><span class="si">}</span><span class="p">&gt;</span>\n        <span class="p">&lt;</span><span class="nt">input</span>\n          <span class="na">type</span><span class="p">=</span><span class="s">"text"</span>\n          <span class="na">placeholder</span><span class="p">=</span><span class="s">"TODOを入力"</span>\n          <span class="na">className</span><span class="p">=</span><span class="s">"input input-bordered w-full"</span>\n          <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">todoContent</span><span class="si">}</span>\n          <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n            <span class="nf">setTodoContent</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>\n          <span class="p">}</span><span class="si">}</span>\n        <span class="p">/&gt;</span>\n        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">className</span><span class="p">=</span><span class="s">"btn btn-primary"</span><span class="p">&gt;</span>送信<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>\n      <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>\n      <span class="p">&lt;</span><span class="nt">div</span>\n        <span class="na">className</span><span class="p">=</span><span class="s">"flex flex-col items-center gap-3 overflow-y-auto"</span>\n        <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="p">{</span>\n          <span class="na">maxHeight</span><span class="p">:</span> <span class="dl">"</span><span class="s2">calc(100vh - 150px)</span><span class="dl">"</span><span class="p">,</span>\n        <span class="p">}</span><span class="si">}</span>\n      <span class="p">&gt;</span>\n        <span class="si">{</span><span class="nx">todos</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">todo</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>\n          <span class="p">&lt;</span><span class="nt">div</span>\n            <span class="na">className</span><span class="p">=</span><span class="s">"p-3 bg-base-300 rounded-md w-2/3 flex items-center gap-3"</span>\n            <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">todo</span><span class="p">.</span><span class="nx">id</span><span class="si">}</span>\n          <span class="p">&gt;</span>\n            <span class="p">&lt;</span><span class="nt">button</span>\n<span class="hil"><span class="err">+</span>              <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n</span><span class="hil"><span class="o">+ </span>               <span class="nf">updateHandler</span><span class="p">(</span><span class="nx">todo</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">done</span><span class="p">);</span>\n</span><span class="hil"><span class="o">+ </span>             <span class="p">}</span><span class="si">}</span>\n</span>            <span class="p">&gt;</span>\n              <span class="si">{</span><span class="nx">todo</span><span class="p">.</span><span class="nx">done</span> <span class="p">?</span> <span class="p">(</span>\n                <span class="p">&lt;</span><span class="nc">AiFillCheckCircle</span>\n                  <span class="na">size</span><span class="p">=</span><span class="si">{</span><span class="mi">40</span><span class="si">}</span>\n                  <span class="na">className</span><span class="p">=</span><span class="s">"text-primary hover:text-primary-focus"</span>\n                <span class="p">/&gt;</span>\n              <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>\n                <span class="p">&lt;</span><span class="nc">AiOutlineCheckCircle</span>\n                  <span class="na">size</span><span class="p">=</span><span class="si">{</span><span class="mi">40</span><span class="si">}</span>\n                  <span class="na">className</span><span class="p">=</span><span class="s">"text-primary hover:text-primary-focus"</span>\n                <span class="p">/&gt;</span>\n              <span class="p">)</span><span class="si">}</span>\n            <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>\n            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"text-lg font-bold flex-1"</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">todo</span><span class="p">.</span><span class="nx">content</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n            <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>\n              <span class="p">&lt;</span><span class="nc">BsFillTrash2Fill</span>\n                <span class="na">size</span><span class="p">=</span><span class="si">{</span><span class="mi">40</span><span class="si">}</span>\n                <span class="na">className</span><span class="p">=</span><span class="s">"text-error hover:text-error-content"</span>\n              <span class="p">/&gt;</span>\n            <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>\n          <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n        <span class="p">))</span><span class="si">}</span>\n      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n  <span class="p">);</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n<h3 data-sourcepos="515:1-515:33">\n<span id="-deletetodo-todoを削除" class="fragment"></span><a href="#-deletetodo-todo%E3%82%92%E5%89%8A%E9%99%A4"><i class="fa fa-link"></i></a>◆ deleteTodo: Todoを削除</h3>\n<p data-sourcepos="517:1-517:51">mutationの使い方はaddTodoと変わりません</p>\n<div class="code-frame" data-lang="diff_tsx" data-sourcepos="519:1-639:3">\n<div class="code-lang"><span class="bold"> index.tsx</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">ListTodosQuery</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/generated/request</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span>\n  <span class="nx">useListTodosQuery</span><span class="p">,</span>\n  <span class="nx">useAddTodoMutation</span><span class="p">,</span>\n  <span class="nx">useUpdateTodoMutation</span><span class="p">,</span>\n<span class="hil"><span class="o">+ </span> <span class="nx">useDeleteTodoMutation</span><span class="p">,</span>\n</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/generated/request</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">FormEvent</span><span class="p">,</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">AiOutlineCheckCircle</span><span class="p">,</span> <span class="nx">AiFillCheckCircle</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-icons/ai</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">BsFillTrash2Fill</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-icons/bs</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Home</span><span class="p">()</span> <span class="p">{</span>\n  <span class="kd">const</span> <span class="p">[</span><span class="nx">todoContent</span><span class="p">,</span> <span class="nx">setTodoContent</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>\n  <span class="kd">const</span> <span class="p">[</span><span class="nx">todos</span><span class="p">,</span> <span class="nx">setTodos</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">ListTodosQuery</span><span class="p">[</span><span class="dl">"</span><span class="s2">listTodos</span><span class="dl">"</span><span class="p">]</span><span class="o">&gt;</span><span class="p">([]);</span>\n  <span class="kd">const</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">refetch</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">useListTodosQuery</span><span class="p">();</span>\n  <span class="kd">const</span> <span class="p">[</span><span class="nx">addTodoMutation</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useAddTodoMutation</span><span class="p">();</span>\n  <span class="kd">const</span> <span class="p">[</span><span class="nx">updateTodoMutation</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useUpdateTodoMutation</span><span class="p">();</span>\n<span class="hil"><span class="o">+ </span> <span class="kd">const</span> <span class="p">[</span><span class="nx">deleteTodoMutation</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useDeleteTodoMutation</span><span class="p">();</span>\n</span>\n  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="nf">setTodos</span><span class="p">(</span><span class="nx">data</span><span class="p">?.</span><span class="nx">listTodos</span> <span class="o">??</span> <span class="p">[]);</span>\n  <span class="p">},</span> <span class="p">[</span><span class="nx">data</span><span class="p">?.</span><span class="nx">listTodos</span><span class="p">]);</span>\n\n  <span class="nf">if </span><span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>loading...<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>\n  <span class="nf">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>error...<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>\n  <span class="nf">if </span><span class="p">(</span><span class="o">!</span><span class="nx">data</span><span class="p">?.</span><span class="nx">listTodos</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>data error...<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>\n\n  <span class="kd">const</span> <span class="nx">submitHandler</span> <span class="o">=</span> <span class="nf">async </span><span class="p">(</span><span class="nx">e</span><span class="p">:</span> <span class="nx">FormEvent</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="nx">e</span><span class="p">.</span><span class="nf">preventDefault</span><span class="p">();</span>\n\n    <span class="k">await</span> <span class="nf">addTodoMutation</span><span class="p">({</span>\n      <span class="na">variables</span><span class="p">:</span> <span class="p">{</span>\n        <span class="na">content</span><span class="p">:</span> <span class="nx">todoContent</span><span class="p">,</span>\n      <span class="p">},</span>\n    <span class="p">});</span>\n\n    <span class="nf">setTodoContent</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>\n\n    <span class="nf">refetch</span><span class="p">();</span>\n  <span class="p">};</span>\n\n  <span class="kd">const</span> <span class="nx">updateHandler</span> <span class="o">=</span> <span class="nf">async </span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">current</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="k">await</span> <span class="nf">updateTodoMutation</span><span class="p">({</span>\n      <span class="na">variables</span><span class="p">:</span> <span class="p">{</span>\n        <span class="nx">id</span><span class="p">,</span>\n        <span class="na">done</span><span class="p">:</span> <span class="o">!</span><span class="nx">current</span><span class="p">,</span>\n      <span class="p">},</span>\n    <span class="p">});</span>\n\n    <span class="nf">refetch</span><span class="p">();</span>\n  <span class="p">};</span>\n\n<span class="hil"><span class="o">+ </span> <span class="kd">const</span> <span class="nx">deleteHandler</span> <span class="o">=</span> <span class="nf">async </span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n</span><span class="hil"><span class="o">+ </span>   <span class="k">await</span> <span class="nf">deleteTodoMutation</span><span class="p">({</span>\n</span><span class="hil"><span class="o">+ </span>     <span class="na">variables</span><span class="p">:</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">},</span>\n</span><span class="hil"><span class="o">+ </span>   <span class="p">});</span>\n</span><span class="hil"><span class="o">+</span>\n</span><span class="hil"><span class="o">+ </span>   <span class="nf">refetch</span><span class="p">();</span>\n</span><span class="hil"><span class="o">+ </span> <span class="p">};</span>\n</span>\n  <span class="nf">return </span><span class="p">(</span>\n    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"min-w-screen min-h-screen"</span> <span class="na">data-theme</span><span class="p">=</span><span class="s">"winter"</span><span class="p">&gt;</span>\n      <span class="p">&lt;</span><span class="nt">form</span> <span class="na">className</span><span class="p">=</span><span class="s">"flex p-10"</span> <span class="na">onSubmit</span><span class="p">=</span><span class="si">{</span><span class="nx">submitHandler</span><span class="si">}</span><span class="p">&gt;</span>\n        <span class="p">&lt;</span><span class="nt">input</span>\n          <span class="na">type</span><span class="p">=</span><span class="s">"text"</span>\n          <span class="na">placeholder</span><span class="p">=</span><span class="s">"TODOを入力"</span>\n          <span class="na">className</span><span class="p">=</span><span class="s">"input input-bordered w-full"</span>\n          <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">todoContent</span><span class="si">}</span>\n          <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n            <span class="nf">setTodoContent</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>\n          <span class="p">}</span><span class="si">}</span>\n        <span class="p">/&gt;</span>\n        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">className</span><span class="p">=</span><span class="s">"btn btn-primary"</span><span class="p">&gt;</span>送信<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>\n      <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>\n      <span class="p">&lt;</span><span class="nt">div</span>\n        <span class="na">className</span><span class="p">=</span><span class="s">"flex flex-col items-center gap-3 overflow-y-auto"</span>\n        <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="p">{</span>\n          <span class="na">maxHeight</span><span class="p">:</span> <span class="dl">"</span><span class="s2">calc(100vh - 150px)</span><span class="dl">"</span><span class="p">,</span>\n        <span class="p">}</span><span class="si">}</span>\n      <span class="p">&gt;</span>\n        <span class="si">{</span><span class="nx">todos</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">todo</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>\n          <span class="p">&lt;</span><span class="nt">div</span>\n            <span class="na">className</span><span class="p">=</span><span class="s">"p-3 bg-base-300 rounded-md w-2/3 flex items-center gap-3"</span>\n            <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">todo</span><span class="p">.</span><span class="nx">id</span><span class="si">}</span>\n          <span class="p">&gt;</span>\n            <span class="p">&lt;</span><span class="nt">button</span>\n              <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n                <span class="nf">updateHandler</span><span class="p">(</span><span class="nx">todo</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">done</span><span class="p">);</span>\n              <span class="p">}</span><span class="si">}</span>\n            <span class="p">&gt;</span>\n              <span class="si">{</span><span class="nx">todo</span><span class="p">.</span><span class="nx">done</span> <span class="p">?</span> <span class="p">(</span>\n                <span class="p">&lt;</span><span class="nc">AiFillCheckCircle</span>\n                  <span class="na">size</span><span class="p">=</span><span class="si">{</span><span class="mi">40</span><span class="si">}</span>\n                  <span class="na">className</span><span class="p">=</span><span class="s">"text-primary hover:text-primary-focus"</span>\n                <span class="p">/&gt;</span>\n              <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>\n                <span class="p">&lt;</span><span class="nc">AiOutlineCheckCircle</span>\n                  <span class="na">size</span><span class="p">=</span><span class="si">{</span><span class="mi">40</span><span class="si">}</span>\n                  <span class="na">className</span><span class="p">=</span><span class="s">"text-primary hover:text-primary-focus"</span>\n                <span class="p">/&gt;</span>\n              <span class="p">)</span><span class="si">}</span>\n            <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>\n            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"text-lg font-bold flex-1"</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">todo</span><span class="p">.</span><span class="nx">content</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n            <span class="p">&lt;</span><span class="nt">button</span>\n<span class="hil"><span class="err">+</span>              <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n</span><span class="hil"><span class="o">+ </span>               <span class="nf">deleteHandler</span><span class="p">(</span><span class="nx">todo</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>\n</span><span class="hil"><span class="o">+ </span>             <span class="p">}</span><span class="si">}</span>\n</span>            <span class="p">&gt;</span>\n              <span class="p">&lt;</span><span class="nc">BsFillTrash2Fill</span>\n                <span class="na">size</span><span class="p">=</span><span class="si">{</span><span class="mi">40</span><span class="si">}</span>\n                <span class="na">className</span><span class="p">=</span><span class="s">"text-error hover:text-error-content"</span>\n              <span class="p">/&gt;</span>\n            <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>\n          <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n        <span class="p">))</span><span class="si">}</span>\n      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n  <span class="p">);</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="641:1-641:18">完成です！！</p>\n<p data-sourcepos="643:1-643:117">前編・中編・後編と長い記事となりましたが、とてもワクワクするような構成でした。</p>\n',body:'# はじめに\n\n最近GraphQLについて学びまして、\nNext.js + GraphQL + GraphQL CodeGenerator + Prismaの構成でTodoアプリを構築したので\n軽〜く解説をしつつ、その記録をここに残します。\n\n![スクリーンショット 2023-04-15 20.58.42.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/d9c686d4-ca7f-fec9-a91c-1b050cfaafff.png)\n\n# 環境\n\n- Macbook Air\n- node\n    - v18.13.0\n- pnpm\n    - 7.27.0\n\n# 目次\n\n- [前編](https://qiita.com/maaaashi/items/fe52db19759ea8a0be31)\n    1. Next Create App\n    1. GraphQLサーバー構築\n    1. Subscription\n    1. DB・Prisma\n- [中編](https://qiita.com/maaaashi/items/722d75cf8bd25efded88)\n    1. GraphQL Schema\n    1. GraphQL Context\n    1. GraphQL Code Generator\n    1. GraphQL Resolver\n    1. GraphQLサーバー修正\n- [後編](https://qiita.com/maaaashi/items/5c63398a34ac3ea8ddad) 👈 今ここ\n    1. フロント側準備\n    1. フロント側実装\n\n# 後編\n\n後編はフロント側の実装です。\n\n## 1. フロント側準備\n\nTailwindCSSのフレームワークである`daisyUI`を使っていきます。\n\nhttps://daisyui.com/\n\nまた、アイコンには`react-icons`を使います。\n\nhttps://react-icons.github.io/react-icons\n\n### 1-1. daisyUI react-icons\n\n- install\n    \n    ```bash\n    $ pnpm add daisyui react-icons\n    ```\n\n- tailwind.config.js\n\n    ```js: tailwind.config.js\n    module.exports = {\n      //...\n      plugins: [require("daisyui")],\n    }\n    ```\n\n- デフォルトのCSS, HTMLの削除\n\n    ```css: global.css\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n    ```\n\n### 1-2. apollo-clientの設定\n\n- install\n\n    ```bash\n    pnpm add @apollo/client\n    ```\n\n- edit .env\n\n    ```.env\n    NEXT_PUBLIC_GRAPHQL_ENDPOINT="http://localhost:3000/api/graphql"\n    ```\n\n- edit _app.tsx\n\n    ```tsx: src/pages/_app.tsx\n    import "@/styles/globals.css";\n    \n    import { ApolloClient, ApolloProvider, InMemoryCache } from "@apollo/client";\n    import type { AppProps } from "next/app";\n    \n    export const client = new ApolloClient({\n      uri: process.env.NEXT_PUBLIC_GRAPHQL_ENDPOINT,\n      cache: new InMemoryCache(),\n    });\n    \n    export default function App({ Component, pageProps }: AppProps) {\n      return (\n        <ApolloProvider client={client}>\n          <Component {...pageProps} />\n        </ApolloProvider>\n      );\n    }\n    ```\n\n## 2. フロント側実装\n\n### 2-1. 見た目\n\nまずデータを入れずに見た目を調整します。\n\n![スクリーンショット 2023-04-15 11.01.49.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/db395e5a-df7e-a45f-15c9-ab269f1b5687.png)\n\n\n```tsx: src/pages/index.tsx\nimport { AiOutlineCheckCircle, AiFillCheckCircle } from "react-icons/ai";\nimport { BsFillTrash2Fill } from "react-icons/bs";\n\nexport default function Home() {\n  return (\n    <div className="min-w-screen min-h-screen" data-theme="winter">\n      <form className="flex p-10">\n        <input\n          type="text"\n          placeholder="TODOを入力"\n          className="input input-bordered w-full"\n        />\n        <button className="btn btn-primary">送信</button>\n      </form>\n      <div\n        className="flex flex-col items-center gap-3 overflow-y-auto"\n        style={{\n          maxHeight: "calc(100vh - 150px)",\n        }}\n      >\n        <div className="p-3 bg-base-300 rounded-md w-2/3 flex items-center gap-3">\n          <button>\n            {true ? (\n              <AiFillCheckCircle\n                size={40}\n                className="text-primary hover:text-primary-focus"\n              />\n            ) : (\n              <AiOutlineCheckCircle\n                size={40}\n                className="text-primary hover:text-primary-focus"\n              />\n            )}\n          </button>\n          <div className="text-lg font-bold flex-1">hogehoge</div>\n          <button>\n            <BsFillTrash2Fill\n              size={40}\n              className="text-error hover:text-error-content"\n            />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n### 2-2. データ利用\n\n次に[中編](https://qiita.com/maaaashi/items/722d75cf8bd25efded88)で作成した`src/generated/request.ts`を使って、データを入れていきます。\n\n### ◆ listTodo: Todo一覧取得\n\n```diff_tsx: index.tsx\n+ import type { ListTodosQuery } from "@/generated/request";\n+ import {\n+   useListTodosQuery,\n+ } from "@/generated/request";\n+ import { useEffect, useState } from "react";\nimport { AiOutlineCheckCircle, AiFillCheckCircle } from "react-icons/ai";\nimport { BsFillTrash2Fill } from "react-icons/bs";\n\nexport default function Home() {\n+ const [todos, setTodos] = useState<ListTodosQuery["listTodos"]>([]);\n+ const { loading, error, data, refetch } = useListTodosQuery();\n\n+ useEffect(() => {\n+   setTodos(data?.listTodos ?? []);\n+ }, [data?.listTodos]);\n\n+  if (loading) return <div>loading...</div>;\n+  if (error) return <div>error...</div>;\n+  if (!data?.listTodos) return <div>data error...</div>;\n\n  return (\n    <div className="min-w-screen min-h-screen" data-theme="winter">\n      <form className="flex p-10">\n        <input\n          type="text"\n          placeholder="TODOを入力"\n          className="input input-bordered w-full"\n        />\n        <button className="btn btn-primary">送信</button>\n      </form>\n      <div\n        className="flex flex-col items-center gap-3 overflow-y-auto"\n        style={{\n          maxHeight: "calc(100vh - 150px)",\n        }}\n      >\n+        {todos.map((todo) => (\n+          <div\n+            className="p-3 bg-base-300 rounded-md w-2/3 flex items-center gap-3"\n+            key={todo.id}\n+          >\n+            <button>\n+              {todo.done ? (\n+                <AiFillCheckCircle\n+                  size={40}\n+                  className="text-primary hover:text-primary-focus"\n+                />\n+              ) : (\n+                <AiOutlineCheckCircle\n+                  size={40}\n+                  className="text-primary hover:text-primary-focus"\n+                />\n+              )}\n+            </button>\n+            <div className="text-lg font-bold flex-1">{todo.content}</div>\n+            <button>\n+              <BsFillTrash2Fill\n+                size={40}\n+                className="text-error hover:text-error-content"\n+              />\n+            </button>\n+          </div>\n+        ))}\n-        <div className="p-3 bg-base-300 rounded-md w-2/3 flex items-center gap-3">\n-          <button>\n-            {true ? (\n-              <AiFillCheckCircle\n-                size={40}\n-                className="text-primary hover:text-primary-focus"\n-              />\n-            ) : (\n-              <AiOutlineCheckCircle\n-                size={40}\n-                className="text-primary hover:text-primary-focus"\n-              />\n-            )}\n-          </button>\n-          <div className="text-lg font-bold flex-1">hogehoge</div>\n-          <button>\n-            <BsFillTrash2Fill\n-              size={40}\n-              className="text-error hover:text-error-content"\n-            />\n-          </button>\n-        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n:::note info\n#### Query hooks\n\n```typescript: example\nconst { loading, error, data, refetch } = useListTodosQuery();\n```\n\n```typescript\nloading: Boolean => "データ取得中かどうか"\nerror: Object =>  "エラーが発生した場合、オブジェクトが格納されます"\ndata: Object => "取得したデータ"\nrefetch: Function "再取得メソッド(後で登場します)"\n```\n:::\n\n### ◆ addTodo: Todoを追加\n\n```diff_tsx: index.tsx\nimport type { ListTodosQuery } from "@/generated/request";\nimport {\n  useListTodosQuery,\n+  useAddTodoMutation\n} from "@/generated/request";\n+ import { FormEvent, useEffect, useState } from "react";\nimport { AiOutlineCheckCircle, AiFillCheckCircle } from "react-icons/ai";\nimport { BsFillTrash2Fill } from "react-icons/bs";\n\nexport default function Home() {\n+  const [todoContent, setTodoContent] = useState("");\n  const [todos, setTodos] = useState<ListTodosQuery["listTodos"]>([]);\n  const { loading, error, data, refetch } = useListTodosQuery();\n+  const [addTodoMutation] = useAddTodoMutation();\n\n  useEffect(() => {\n    setTodos(data?.listTodos ?? []);\n  }, [data?.listTodos]);\n\n  if (loading) return <div>loading...</div>;\n  if (error) return <div>error...</div>;\n  if (!data?.listTodos) return <div>data error...</div>;\n\n+  const submitHandler = async (e: FormEvent) => {\n+    e.preventDefault();\n+\n+    await addTodoMutation({\n+      variables: {\n+        content: todoContent,\n+      },\n+    });\n+\n+    setTodoContent("");\n+\n+    refetch();\n+  };\n\n  return (\n    <div className="min-w-screen min-h-screen" data-theme="winter">\n+      <form className="flex p-10" onSubmit={submitHandler}>\n-      <form className="flex p-10">\n        <input\n          type="text"\n          placeholder="TODOを入力"\n          className="input input-bordered w-full"\n+          value={todoContent}\n+          onChange={(e) => {\n+            setTodoContent(e.target.value);\n+          }}\n        />\n        <button className="btn btn-primary">送信</button>\n      </form>\n      <div\n        className="flex flex-col items-center gap-3 overflow-y-auto"\n        style={{\n          maxHeight: "calc(100vh - 150px)",\n        }}\n      >\n        {todos.map((todo) => (\n          <div\n            className="p-3 bg-base-300 rounded-md w-2/3 flex items-center gap-3"\n            key={todo.id}\n          >\n            <button>\n              {todo.done ? (\n                <AiFillCheckCircle\n                  size={40}\n                  className="text-primary hover:text-primary-focus"\n                />\n              ) : (\n                <AiOutlineCheckCircle\n                  size={40}\n                  className="text-primary hover:text-primary-focus"\n                />\n              )}\n            </button>\n            <div className="text-lg font-bold flex-1">{todo.content}</div>\n            <button>\n              <BsFillTrash2Fill\n                size={40}\n                className="text-error hover:text-error-content"\n              />\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n```\n\n- 処理の流れ\n\n    ```\n    FormSubmit → AddTodo → refetch\n    ```\n    とすることで、Todoを追加後に最新状態を取得し、反映させています。\n\n:::note info\n#### Mutation hooks\n\n```typescript: example\nconst [addTodoMutation] = useAddTodoMutation();\n```\n\n今回は使いませんでしたが、Mutationのhooksの返り値は`[MutationFunction, MutationResult]`の配列となります。\n\n```typescript\n[0]: MutationFunction => "Mutationの実行関数"\n[1]: MutationResult => {\n  data: TData => "Mutationから返されたデータ"\n  loading: Boolean => "取得中かどうか"\n  error: Object => "エラーが発生した場合、オブジェクトが格納されます"\n  called: Boolean => "trueの場合、呼び出されています"\n  client: ApolloClient => "Mutationを実行したApollo Client情報"\n  reset: Function => "Mutationの状態を初期の呼び出される前に戻す処理"\n}]\n```\n:::\n\n### ◆ updateTodo: Todoを更新\n\nmutationの使い方はaddTodoと変わりません\n\n```diff_tsx: index.tsx\nimport type { ListTodosQuery } from "@/generated/request";\nimport {\n  useListTodosQuery,\n  useAddTodoMutation,\n+  useUpdateTodoMutation,\n} from "@/generated/request";\nimport { FormEvent, useEffect, useState } from "react";\nimport { AiOutlineCheckCircle, AiFillCheckCircle } from "react-icons/ai";\nimport { BsFillTrash2Fill } from "react-icons/bs";\n\nexport default function Home() {\n  const [todoContent, setTodoContent] = useState("");\n  const [todos, setTodos] = useState<ListTodosQuery["listTodos"]>([]);\n  const { loading, error, data, refetch } = useListTodosQuery();\n  const [addTodoMutation] = useAddTodoMutation();\n+  const [updateTodoMutation] = useUpdateTodoMutation();\n\n  useEffect(() => {\n    setTodos(data?.listTodos ?? []);\n  }, [data?.listTodos]);\n\n  if (loading) return <div>loading...</div>;\n  if (error) return <div>error...</div>;\n  if (!data?.listTodos) return <div>data error...</div>;\n\n  const submitHandler = async (e: FormEvent) => {\n    e.preventDefault();\n\n    await addTodoMutation({\n      variables: {\n        content: todoContent,\n      },\n    });\n\n    setTodoContent("");\n\n    refetch();\n  };\n\n+  const updateHandler = async (id: string, current: boolean) => {\n+    await updateTodoMutation({\n+      variables: {\n+        id,\n+        done: !current,\n+      },\n+    });\n+\n+    refetch();\n+  };\n\n  return (\n    <div className="min-w-screen min-h-screen" data-theme="winter">\n      <form className="flex p-10" onSubmit={submitHandler}>\n        <input\n          type="text"\n          placeholder="TODOを入力"\n          className="input input-bordered w-full"\n          value={todoContent}\n          onChange={(e) => {\n            setTodoContent(e.target.value);\n          }}\n        />\n        <button className="btn btn-primary">送信</button>\n      </form>\n      <div\n        className="flex flex-col items-center gap-3 overflow-y-auto"\n        style={{\n          maxHeight: "calc(100vh - 150px)",\n        }}\n      >\n        {todos.map((todo) => (\n          <div\n            className="p-3 bg-base-300 rounded-md w-2/3 flex items-center gap-3"\n            key={todo.id}\n          >\n            <button\n+              onClick={() => {\n+                updateHandler(todo.id, todo.done);\n+              }}\n            >\n              {todo.done ? (\n                <AiFillCheckCircle\n                  size={40}\n                  className="text-primary hover:text-primary-focus"\n                />\n              ) : (\n                <AiOutlineCheckCircle\n                  size={40}\n                  className="text-primary hover:text-primary-focus"\n                />\n              )}\n            </button>\n            <div className="text-lg font-bold flex-1">{todo.content}</div>\n            <button>\n              <BsFillTrash2Fill\n                size={40}\n                className="text-error hover:text-error-content"\n              />\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n```\n\n### ◆ deleteTodo: Todoを削除\n\nmutationの使い方はaddTodoと変わりません\n\n```diff_tsx: index.tsx\nimport type { ListTodosQuery } from "@/generated/request";\nimport {\n  useListTodosQuery,\n  useAddTodoMutation,\n  useUpdateTodoMutation,\n+  useDeleteTodoMutation,\n} from "@/generated/request";\nimport { FormEvent, useEffect, useState } from "react";\nimport { AiOutlineCheckCircle, AiFillCheckCircle } from "react-icons/ai";\nimport { BsFillTrash2Fill } from "react-icons/bs";\n\nexport default function Home() {\n  const [todoContent, setTodoContent] = useState("");\n  const [todos, setTodos] = useState<ListTodosQuery["listTodos"]>([]);\n  const { loading, error, data, refetch } = useListTodosQuery();\n  const [addTodoMutation] = useAddTodoMutation();\n  const [updateTodoMutation] = useUpdateTodoMutation();\n+  const [deleteTodoMutation] = useDeleteTodoMutation();\n\n  useEffect(() => {\n    setTodos(data?.listTodos ?? []);\n  }, [data?.listTodos]);\n\n  if (loading) return <div>loading...</div>;\n  if (error) return <div>error...</div>;\n  if (!data?.listTodos) return <div>data error...</div>;\n\n  const submitHandler = async (e: FormEvent) => {\n    e.preventDefault();\n\n    await addTodoMutation({\n      variables: {\n        content: todoContent,\n      },\n    });\n\n    setTodoContent("");\n\n    refetch();\n  };\n\n  const updateHandler = async (id: string, current: boolean) => {\n    await updateTodoMutation({\n      variables: {\n        id,\n        done: !current,\n      },\n    });\n\n    refetch();\n  };\n\n+  const deleteHandler = async (id: string) => {\n+    await deleteTodoMutation({\n+      variables: { id },\n+    });\n+\n+    refetch();\n+  };\n\n  return (\n    <div className="min-w-screen min-h-screen" data-theme="winter">\n      <form className="flex p-10" onSubmit={submitHandler}>\n        <input\n          type="text"\n          placeholder="TODOを入力"\n          className="input input-bordered w-full"\n          value={todoContent}\n          onChange={(e) => {\n            setTodoContent(e.target.value);\n          }}\n        />\n        <button className="btn btn-primary">送信</button>\n      </form>\n      <div\n        className="flex flex-col items-center gap-3 overflow-y-auto"\n        style={{\n          maxHeight: "calc(100vh - 150px)",\n        }}\n      >\n        {todos.map((todo) => (\n          <div\n            className="p-3 bg-base-300 rounded-md w-2/3 flex items-center gap-3"\n            key={todo.id}\n          >\n            <button\n              onClick={() => {\n                updateHandler(todo.id, todo.done);\n              }}\n            >\n              {todo.done ? (\n                <AiFillCheckCircle\n                  size={40}\n                  className="text-primary hover:text-primary-focus"\n                />\n              ) : (\n                <AiOutlineCheckCircle\n                  size={40}\n                  className="text-primary hover:text-primary-focus"\n                />\n              )}\n            </button>\n            <div className="text-lg font-bold flex-1">{todo.content}</div>\n            <button\n+              onClick={() => {\n+                deleteHandler(todo.id);\n+              }}\n            >\n              <BsFillTrash2Fill\n                size={40}\n                className="text-error hover:text-error-content"\n              />\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n```\n\n完成です！！\n\n前編・中編・後編と長い記事となりましたが、とてもワクワクするような構成でした。\n',coediting:!1,comments_count:0,created_at:"2023-04-17T08:35:25+09:00",group:null,id:"5c63398a34ac3ea8ddad",likes_count:8,private:!1,reactions_count:0,stocks_count:2,tags:[{name:"TypeScript",versions:[]},{name:"GraphQL",versions:[]},{name:"apollo",versions:[]},{name:"Next.js",versions:[]},{name:"graphql-codegen",versions:[]}],title:"Next.js + GrapqhQLでTodoアプリを構築する(後編)",updated_at:"2023-04-17T08:57:49+09:00",url:"https://qiita.com/maaaashi/items/5c63398a34ac3ea8ddad",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:4047,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-5:69">最近GraphQLについて学びまして、<br>\nNext.js + GraphQL + GraphQL CodeGenerator + Prismaの構成でTodoアプリを構築したので<br>\n軽〜く解説をしつつ、その記録をここに残します。</p>\n<p data-sourcepos="7:1-7:164"><a href="https://camo.qiitausercontent.com/4fac6f85ac23ce1353083031a87a1f1578abed84/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f64396336383664342d636137662d666563392d613931632d3162303530636661616666662e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fd9c686d4-ca7f-fec9-a91c-1b050cfaafff.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=de64112d9d2965da95e3eab5b36deb8c" alt="スクリーンショット 2023-04-15 20.58.42.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/d9c686d4-ca7f-fec9-a91c-1b050cfaafff.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fd9c686d4-ca7f-fec9-a91c-1b050cfaafff.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3a0d18302a874025533f8659264934ff 1x" loading="lazy"></a></p>\n<h1 data-sourcepos="9:1-9:8">\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h1>\n<ul data-sourcepos="11:1-16:0">\n<li data-sourcepos="11:1-11:13">Macbook Air</li>\n<li data-sourcepos="12:1-13:14">node\n<ul data-sourcepos="13:5-13:14">\n<li data-sourcepos="13:5-13:14">v18.13.0</li>\n</ul>\n</li>\n<li data-sourcepos="14:1-16:0">pnpm\n<ul data-sourcepos="15:5-16:0">\n<li data-sourcepos="15:5-16:0">7.27.0</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos="17:1-17:8">\n<span id="目次" class="fragment"></span><a href="#%E7%9B%AE%E6%AC%A1"><i class="fa fa-link"></i></a>目次</h1>\n<ul data-sourcepos="19:1-33:0">\n<li data-sourcepos="19:1-23:18">\n<a href="https://qiita.com/maaaashi/items/fe52db19759ea8a0be31" id="reference-875fcb52237640e57cbf">前編</a>\n<ol data-sourcepos="20:5-23:18">\n<li data-sourcepos="20:5-20:22">Next Create App</li>\n<li data-sourcepos="21:5-21:32">GraphQLサーバー構築</li>\n<li data-sourcepos="22:5-22:19">Subscription</li>\n<li data-sourcepos="23:5-23:18">DB・Prisma</li>\n</ol>\n</li>\n<li data-sourcepos="24:1-29:32">\n<a href="https://qiita.com/maaaashi/items/722d75cf8bd25efded88">中編</a> 👈 今ここ\n<ol data-sourcepos="25:5-29:32">\n<li data-sourcepos="25:5-25:21">GraphQL Schema</li>\n<li data-sourcepos="26:5-26:22">GraphQL Context</li>\n<li data-sourcepos="27:5-27:29">GraphQL Code Generator</li>\n<li data-sourcepos="28:5-28:23">GraphQL Resolver</li>\n<li data-sourcepos="29:5-29:32">GraphQLサーバー修正</li>\n</ol>\n</li>\n<li data-sourcepos="30:1-33:0">\n<a href="https://qiita.com/maaaashi/items/5c63398a34ac3ea8ddad" id="reference-c55f18c26202e41884b3">後編</a>\n<ol data-sourcepos="31:5-33:0">\n<li data-sourcepos="31:5-31:28">フロント側準備</li>\n<li data-sourcepos="32:5-33:0">フロント側実装</li>\n</ol>\n</li>\n</ul>\n<h1 data-sourcepos="34:1-34:8">\n<span id="中編" class="fragment"></span><a href="#%E4%B8%AD%E7%B7%A8"><i class="fa fa-link"></i></a>中編</h1>\n<p data-sourcepos="36:1-36:34">中編はGraphQLフェーズです</p>\n<h2 data-sourcepos="38:1-38:20">\n<span id="1-graphql-schema" class="fragment"></span><a href="#1-graphql-schema"><i class="fa fa-link"></i></a>1. GraphQL Schema</h2>\n<div class="code-frame" data-lang="bash" data-sourcepos="40:1-48:3"><div class="highlight"><pre><code><span class="nb">.</span>\n├── src\n│   ├── graphql\n│   │   ├── typeDefs\n│   │   │   ├─ common.graphql\n│   │   │   └─ todo.graphql\n│   │   │\n</code></pre></div></div>\n<p data-sourcepos="50:1-51:121">このようなファイル構成で作成します。<br>\n<code>common.graphql</code>には今後schemaが増えてきた時のために、共通のschemaを定義しようと思います。</p>\n<ul data-sourcepos="53:1-122:0">\n<li data-sourcepos="53:1-60:0">\n<p data-sourcepos="53:3-53:8">schema</p>\n<ul data-sourcepos="54:5-60:0">\n<li data-sourcepos="54:5-55:46">Query\n<ul data-sourcepos="55:9-55:46">\n<li data-sourcepos="55:9-55:46">ListTodos: Todo一覧を取得する</li>\n</ul>\n</li>\n<li data-sourcepos="56:5-60:0">Mutation\n<ul data-sourcepos="57:9-60:0">\n<li data-sourcepos="57:9-57:54">addTodo: contentを元にTodoを作成する</li>\n<li data-sourcepos="58:9-58:68">updateTodo: idとdoneから、todoの状態を更新する</li>\n<li data-sourcepos="59:9-60:0">deleteTodo: idから、todoを削除する</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos="61:1-66:7">\n<p data-sourcepos="61:3-61:13">create file</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="63:5-66:7"><div class="highlight"><pre><code><span class="nv">$ </span><span class="nb">mkdir </span>src/graphql src/graphql/typeDefs\n<span class="nv">$ </span><span class="nb">touch </span>src/graphql/typeDefs/todo.graphql src/graphql/typeDefs/common.graphql\n</code></pre></div></div>\n</li>\n<li data-sourcepos="67:1-122:0">\n<p data-sourcepos="67:3-67:11">edit file</p>\n<div class="code-frame" data-lang="graphql" data-sourcepos="69:5-117:7">\n<div class="code-lang"><span class="bold"> todo.graphql</span></div>\n<div class="highlight"><pre><code><span class="k">type</span><span class="w"> </span><span class="n">Todo</span><span class="w"> </span><span class="p">{</span><span class="w">\n  </span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="nb">ID</span><span class="p">!</span><span class="w">\n  </span><span class="n">content</span><span class="p">:</span><span class="w"> </span><span class="nb">String</span><span class="p">!</span><span class="w">\n  </span><span class="n">done</span><span class="p">:</span><span class="w"> </span><span class="nb">Boolean</span><span class="p">!</span><span class="w">\n  </span><span class="n">createdAt</span><span class="p">:</span><span class="w"> </span><span class="n">DateTime</span><span class="w">\n</span><span class="p">}</span><span class="w">\n\n</span><span class="k">type</span><span class="w"> </span><span class="n">Query</span><span class="w"> </span><span class="p">{</span><span class="w">\n  </span><span class="n">listTodos</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="n">Todo</span><span class="p">!]!</span><span class="w">\n</span><span class="p">}</span><span class="w">\n\n</span><span class="k">type</span><span class="w"> </span><span class="n">Mutation</span><span class="w"> </span><span class="p">{</span><span class="w">\n  </span><span class="n">addTodo</span><span class="p">(</span><span class="n">content</span><span class="p">:</span><span class="w"> </span><span class="nb">String</span><span class="p">!):</span><span class="w"> </span><span class="n">Todo</span><span class="p">!</span><span class="w">\n  </span><span class="n">updateTodo</span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="nb">ID</span><span class="p">!,</span><span class="w"> </span><span class="n">done</span><span class="p">:</span><span class="w"> </span><span class="nb">Boolean</span><span class="p">!):</span><span class="w"> </span><span class="n">Todo</span><span class="p">!</span><span class="w">\n  </span><span class="n">deleteTodo</span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="nb">ID</span><span class="p">!):</span><span class="w"> </span><span class="n">Todo</span><span class="p">!</span><span class="w">\n</span><span class="p">}</span><span class="w">\n\n</span><span class="k">fragment</span><span class="w"> </span><span class="n">TodoFragment</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">Todo</span><span class="w"> </span><span class="p">{</span><span class="w">\n  </span><span class="n">id</span><span class="w">\n  </span><span class="n">content</span><span class="w">\n  </span><span class="n">done</span><span class="w">\n  </span><span class="n">createdAt</span><span class="w">\n</span><span class="p">}</span><span class="w">\n\n</span><span class="k">query</span><span class="w"> </span><span class="n">ListTodos</span><span class="w"> </span><span class="p">{</span><span class="w">\n  </span><span class="n">listTodos</span><span class="w"> </span><span class="p">{</span><span class="w">\n    </span><span class="p">...</span><span class="n">TodoFragment</span><span class="w">\n  </span><span class="p">}</span><span class="w">\n</span><span class="p">}</span><span class="w">\n\n</span><span class="k">mutation</span><span class="w"> </span><span class="n">AddTodo</span><span class="p">(</span><span class="nv">$content</span><span class="p">:</span><span class="w"> </span><span class="nb">String</span><span class="p">!)</span><span class="w"> </span><span class="p">{</span><span class="w">\n  </span><span class="n">addTodo</span><span class="p">(</span><span class="n">content</span><span class="p">:</span><span class="w"> </span><span class="nv">$content</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">\n    </span><span class="p">...</span><span class="n">TodoFragment</span><span class="w">\n  </span><span class="p">}</span><span class="w">\n</span><span class="p">}</span><span class="w">\n\n</span><span class="k">mutation</span><span class="w"> </span><span class="n">UpdateTodo</span><span class="p">(</span><span class="nv">$id</span><span class="p">:</span><span class="w"> </span><span class="nb">ID</span><span class="p">!,</span><span class="w"> </span><span class="nv">$done</span><span class="p">:</span><span class="w"> </span><span class="nb">Boolean</span><span class="p">!)</span><span class="w"> </span><span class="p">{</span><span class="w">\n  </span><span class="n">updateTodo</span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="nv">$id</span><span class="p">,</span><span class="w"> </span><span class="n">done</span><span class="p">:</span><span class="w"> </span><span class="nv">$done</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">\n    </span><span class="p">...</span><span class="n">TodoFragment</span><span class="w">\n  </span><span class="p">}</span><span class="w">\n</span><span class="p">}</span><span class="w">\n\n</span><span class="k">mutation</span><span class="w"> </span><span class="n">DeleteTodo</span><span class="p">(</span><span class="nv">$id</span><span class="p">:</span><span class="w"> </span><span class="nb">ID</span><span class="p">!)</span><span class="w"> </span><span class="p">{</span><span class="w">\n  </span><span class="n">deleteTodo</span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="nv">$id</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">\n    </span><span class="p">...</span><span class="n">TodoFragment</span><span class="w">\n  </span><span class="p">}</span><span class="w">\n</span><span class="p">}</span><span class="w">\n</span></code></pre></div>\n</div>\n<div class="code-frame" data-lang="graphql" data-sourcepos="119:5-121:7">\n<div class="code-lang"><span class="bold"> common.graphql</span></div>\n<div class="highlight"><pre><code><span class="k">scalar</span><span class="w"> </span><span class="n">DateTime</span><span class="w">\n</span></code></pre></div>\n</div>\n</li>\n</ul>\n<h2 data-sourcepos="123:1-123:30">\n<span id="2-graphql-contextの設定" class="fragment"></span><a href="#2-graphql-context%E3%81%AE%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>2. GraphQL Contextの設定</h2>\n<div class="code-frame" data-lang="bash" data-sourcepos="125:1-131:3"><div class="highlight"><pre><code><span class="nb">.</span>\n├── src\n│   ├── graphql\n│   │   ├── context\n│   │   │   ├── index.ts\n</code></pre></div></div>\n<ul data-sourcepos="133:1-157:0">\n<li data-sourcepos="133:1-139:0">\n<p data-sourcepos="133:3-133:13">create file</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="135:5-138:7"><div class="highlight"><pre><code><span class="nv">$ </span><span class="nb">mkdir </span>src/graphql/context\n<span class="nv">$ </span><span class="nb">touch </span>src/graphql/context/index.ts\n</code></pre></div></div>\n</li>\n<li data-sourcepos="140:1-157:0">\n<p data-sourcepos="140:3-140:11">edit file</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="142:5-156:7">\n<div class="code-lang"><span class="bold"> src/graphql/context/index.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">PrismaClient</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@prisma/client</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="kd">const</span> <span class="nx">prisma</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrismaClient</span><span class="p">();</span>\n\n<span class="k">export</span> <span class="kd">type</span> <span class="nx">Context</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">prisma</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">prisma</span><span class="p">;</span>\n<span class="p">};</span>\n\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">createContext</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="k">return</span> <span class="p">{</span>\n    <span class="na">prisma</span><span class="p">:</span> <span class="nx">prisma</span><span class="p">,</span>\n  <span class="p">};</span>\n<span class="p">};</span>\n</code></pre></div>\n</div>\n</li>\n</ul>\n<h2 data-sourcepos="158:1-158:28">\n<span id="3-graphql-code-generator" class="fragment"></span><a href="#3-graphql-code-generator"><i class="fa fa-link"></i></a>3. GraphQL Code Generator</h2>\n<p data-sourcepos="160:1-160:37"><iframe id="qiita-embed-content__42669d620efea2a8daf1a6fda8f2a6e6" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__42669d620efea2a8daf1a6fda8f2a6e6" data-content="https%3A%2F%2Fthe-guild.dev%2Fgraphql%2Fcodegen" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="162:1-171:3"><div class="highlight"><pre><code><span class="nb">.</span>\n├── src\n│   ├── graphql\n|   |   ├── typeDefs\n|   |   |   ├── common.graphql\n|   |   |   └── todo.graphql\n│   │   ├── context\n│   │   │   ├── index.ts\n</code></pre></div></div>\n<div data-sourcepos="173:1-175:3" class="note info">\n<span class="fa fa-fw fa-check-circle"></span><div>\n<p data-sourcepos="174:1-174:143">initのコマンドも用意されていますが、pluginsを入れたりしたいので、マニュアルセットアップしていきます</p>\n</div>\n</div>\n<p data-sourcepos="177:1-177:45"><iframe id="qiita-embed-content__0d01ec33d72fad38d35964dce96687a3" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__0d01ec33d72fad38d35964dce96687a3" data-content="https%3A%2F%2Fthe-guild.dev%2Fgraphql%2Fcodegen%2Fplugins" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<ul data-sourcepos="180:1-249:0">\n<li data-sourcepos="180:1-189:0">\n<p data-sourcepos="180:3-180:9">install</p>\n<div class="code-frame" data-lang="text" data-sourcepos="182:5-188:7"><div class="highlight"><pre><code># dependencies\n$ pnpm add graphql @graphql-tools/graphql-file-loader @graphql-tools/load @graphql-tools/schema\n\n# devDependencies\npnpm add -D @graphql-codegen/cli @graphql-codegen/schema-ast @graphql-codegen/typescript @graphql-codegen/typescript-resolvers @graphql-codegen/typescript-operations @graphql-codegen/typescript-react-apollo ts-node\n</code></pre></div></div>\n</li>\n<li data-sourcepos="190:1-230:0">\n<p data-sourcepos="190:3-190:24">create codegen.yml</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="192:5-194:7"><div class="highlight"><pre><code><span class="nv">$ </span><span class="nb">touch </span>codegen.yml\n</code></pre></div></div>\n<div class="code-frame" data-lang="yaml" data-sourcepos="196:5-229:7">\n<div class="code-lang"><span class="bold"> codegen.yml</span></div>\n<div class="highlight"><pre><code><span class="na">generates</span><span class="pi">:</span>\n  <span class="na">src/generated/schema.graphql</span><span class="pi">:</span>\n    <span class="na">schema</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s2">"</span><span class="s">src/graphql/typeDefs/**/*.graphql"</span>\n    <span class="na">plugins</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">schema-ast</span>\n  <span class="na">src/generated/resolvers-types.ts</span><span class="pi">:</span>\n    <span class="na">schema</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s2">"</span><span class="s">src/graphql/typeDefs/**/*.graphql"</span>\n    <span class="na">plugins</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">typescript</span>\n      <span class="pi">-</span> <span class="s">typescript-resolvers</span>\n    <span class="na">config</span><span class="pi">:</span>\n      <span class="na">contextType</span><span class="pi">:</span> <span class="s2">"</span><span class="s">@/graphql/context/#Context"</span>\n      <span class="na">mapperTypeSuffix</span><span class="pi">:</span> <span class="s">Model</span>\n      <span class="na">mappers</span><span class="pi">:</span>\n        <span class="na">Todo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">@prisma/client#Todo"</span>\n      <span class="na">scalars</span><span class="pi">:</span>\n        <span class="na">DateTime</span><span class="pi">:</span> <span class="s">string</span>\n  <span class="na">src/generated/request.ts</span><span class="pi">:</span>\n    <span class="na">schema</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s2">"</span><span class="s">src/graphql/typeDefs/**/*.graphql"</span>\n    <span class="na">documents</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s2">"</span><span class="s">src/graphql/typeDefs/**/*.graphql"</span>\n    <span class="na">plugins</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">typescript</span>\n      <span class="pi">-</span> <span class="s">typescript-operations</span>\n      <span class="pi">-</span> <span class="s">typescript-react-apollo</span>\n    <span class="na">config</span><span class="pi">:</span>\n      <span class="na">scalars</span><span class="pi">:</span>\n        <span class="na">DateTime</span><span class="pi">:</span> <span class="s">string</span>\n\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos="231:1-249:0">\n<p data-sourcepos="231:3-231:21">run graphql-codegen</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="233:5-237:7"><div class="highlight"><pre><code><span class="nv">$ </span>pnpm graphql-codegen\n✔ Parse Configuration\n✔ Generate outputs\n</code></pre></div></div>\n<p data-sourcepos="239:5-239:108">実行すると以下のような構成でresolver用の型定義ファイルなどが生成されます</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="241:5-248:7"><div class="highlight"><pre><code><span class="nb">.</span>\n├── src\n│   ├── generated\n│   │   ├── request.ts\n│   │   ├── resolvers-type.ts\n│   │   └── schema.graphql\n</code></pre></div></div>\n</li>\n</ul>\n<h1 data-sourcepos="250:1-250:21">\n<span id="4-graphql-resolver" class="fragment"></span><a href="#4-graphql-resolver"><i class="fa fa-link"></i></a>4. GraphQL Resolver</h1>\n<div class="code-frame" data-lang="bash" data-sourcepos="252:1-259:3"><div class="highlight"><pre><code><span class="nb">.</span>\n├── src\n│   ├── graphql\n│   │   ├── resolvers\n│   │   │   └─ index.ts\n│   │   │\n</code></pre></div></div>\n<ul data-sourcepos="261:1-301:0">\n<li data-sourcepos="261:1-267:0">\n<p data-sourcepos="261:3-261:13">create file</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="263:5-266:7"><div class="highlight"><pre><code><span class="nv">$ </span><span class="nb">mkdir </span>src/graphql/resolvers\n<span class="nv">$ </span><span class="nb">touch </span>src/graphql/resolvers/index.ts\n</code></pre></div></div>\n</li>\n<li data-sourcepos="268:1-301:0">\n<p data-sourcepos="268:3-268:11">edit file</p>\n<p data-sourcepos="270:5-270:118"><strong>3. GraphQL Code Generator</strong>で作成した<code>resolvers-types</code>を利用してresolverを設定していきます。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="272:5-300:7">\n<div class="code-lang"><span class="bold">  src/graphql/resolvers/index.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Resolvers</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/generated/resolvers-types</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">resolvers</span><span class="p">:</span> <span class="nx">Resolvers</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">Query</span><span class="p">:</span> <span class="p">{</span>\n    <span class="na">listTodos</span><span class="p">:</span> <span class="nf">async </span><span class="p">(</span><span class="nx">_parent</span><span class="p">,</span> <span class="nx">_args</span><span class="p">,</span> <span class="p">{</span> <span class="nx">prisma</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>\n      <span class="k">return</span> <span class="k">await</span> <span class="nx">prisma</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nf">findMany</span><span class="p">();</span>\n    <span class="p">},</span>\n  <span class="p">},</span>\n  <span class="na">Mutation</span><span class="p">:</span> <span class="p">{</span>\n    <span class="na">addTodo</span><span class="p">:</span> <span class="nf">async </span><span class="p">(</span><span class="nx">_parent</span><span class="p">,</span> <span class="p">{</span> <span class="nx">content</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">prisma</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>\n      <span class="k">return</span> <span class="k">await</span> <span class="nx">prisma</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nf">create</span><span class="p">({</span>\n        <span class="na">data</span><span class="p">:</span> <span class="p">{</span> <span class="nx">content</span><span class="p">,</span> <span class="na">createdAt</span><span class="p">:</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">().</span><span class="nf">toISOString</span><span class="p">()</span> <span class="p">},</span>\n      <span class="p">});</span>\n    <span class="p">},</span>\n    <span class="na">updateTodo</span><span class="p">:</span> <span class="nf">async </span><span class="p">(</span><span class="nx">_parent</span><span class="p">,</span> <span class="p">{</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">done</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">prisma</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>\n      <span class="k">return</span> <span class="k">await</span> <span class="nx">prisma</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nf">update</span><span class="p">({</span>\n        <span class="na">where</span><span class="p">:</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">},</span>\n        <span class="na">data</span><span class="p">:</span> <span class="p">{</span> <span class="nx">done</span> <span class="p">},</span>\n      <span class="p">});</span>\n    <span class="p">},</span>\n    <span class="na">deleteTodo</span><span class="p">:</span> <span class="nf">async </span><span class="p">(</span><span class="nx">_parent</span><span class="p">,</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">prisma</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>\n      <span class="k">return</span> <span class="k">await</span> <span class="nx">prisma</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nf">delete</span><span class="p">({</span>\n        <span class="na">where</span><span class="p">:</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">},</span>\n      <span class="p">});</span>\n    <span class="p">},</span>\n  <span class="p">},</span>\n<span class="p">};</span>\n</code></pre></div>\n</div>\n</li>\n</ul>\n<div data-sourcepos="302:1-320:3" class="note info">\n<span class="fa fa-fw fa-check-circle"></span><div>\n<h3 data-sourcepos="303:1-303:47">\n<span id="graphql-code-generatorを使うメリット" class="fragment"></span><a href="#graphql-code-generator%E3%82%92%E4%BD%BF%E3%81%86%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88"><i class="fa fa-link"></i></a>GraphQL Code Generatorを使うメリット</h3>\n<ol data-sourcepos="305:1-318:0">\n<li data-sourcepos="305:1-308:0">\n<p data-sourcepos="305:4-305:99">型定義がされているので、このように補完を利用することができます。</p>\n<p data-sourcepos="307:5-307:168"><a href="https://camo.qiitausercontent.com/b0794d6ef8b16192845e6da1afbc19bd147192d6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f65646431623164632d363633622d383637632d343138342d3763353237313965313734372e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fedd1b1dc-663b-867c-4184-7c52719e1747.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e5377afd647f6dfda5c744280fc54069" alt="スクリーンショット 2023-04-16 10.29.17.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/edd1b1dc-663b-867c-4184-7c52719e1747.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fedd1b1dc-663b-867c-4184-7c52719e1747.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=bef4e290ce8eaf975f9415a42c608a76 1x" loading="lazy"></a></p>\n</li>\n<li data-sourcepos="309:1-318:0">\n<p data-sourcepos="309:4-309:15">型安全性</p>\n<p data-sourcepos="311:5-311:58">試しにエラーを発生させてみましょう。</p>\n<p data-sourcepos="313:5-314:168">Todoを返すはずの<code>addTodo</code>で、文字列を返すとこのようにエラーが表示されます。<br>\n<a href="https://camo.qiitausercontent.com/7fc94e5390a453093ad9517d223a876fb1c4f5e9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f33323466373362662d373261642d346437662d623033642d3861613332373635336138372e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F324f73bf-72ad-4d7f-b03d-8aa327653a87.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7477b7e4d8823b7ef49ca4229102b610" alt="スクリーンショット 2023-04-16 10.31.30.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/324f73bf-72ad-4d7f-b03d-8aa327653a87.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F324f73bf-72ad-4d7f-b03d-8aa327653a87.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=202af651be2c6814570be5a272e1e7ca 1x" loading="lazy"></a></p>\n<p data-sourcepos="316:5-317:168">予定されていない引数を利用しようとすると、このようにエラーが表示されます。<br>\n<a href="https://camo.qiitausercontent.com/0652ba118f06a8c381ae3fcf3b85b8ca55332c96/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f33376331623962382d616563622d363832342d653066392d6564366131653366386161392e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F37c1b9b8-aecb-6824-e0f9-ed6a1e3f8aa9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=702252579da0fb10703eb2cfe532858e" alt="スクリーンショット 2023-04-16 10.32.37.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/37c1b9b8-aecb-6824-e0f9-ed6a1e3f8aa9.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F37c1b9b8-aecb-6824-e0f9-ed6a1e3f8aa9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d3920dda9b2370980ca33e509f0ab337 1x" loading="lazy"></a></p>\n</li>\n</ol>\n<p data-sourcepos="319:1-319:249"><code>GraphQL Code Generator</code>を使わなくても実装はできますが、使う事でより安全にコーディングが進められますし、何か元schemaファイルを修正した際に、影響範囲を型で考えることができます。</p>\n</div>\n</div>\n<h2 data-sourcepos="322:1-322:31">\n<span id="5-graphqlサーバー修正" class="fragment"></span><a href="#5-graphql%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E4%BF%AE%E6%AD%A3"><i class="fa fa-link"></i></a>5. GraphQLサーバー修正</h2>\n<p data-sourcepos="324:1-324:127"><strong>3. GraphQL Code Generator</strong>及び、<strong>4. GraphQL Resolver</strong>で作成したファイルをインポートしていきます。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="326:1-348:3">\n<div class="code-lang"><span class="bold"> api/graphql.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createYoga</span><span class="p">,</span> <span class="nx">createSchema</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">graphql-yoga</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">readFileSync</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">join</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">path</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">resolvers</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/graphql/resolvers</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">createContext</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/graphql/context</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nf">join</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nf">cwd</span><span class="p">(),</span> <span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">generated</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">schema.graphql</span><span class="dl">"</span><span class="p">);</span>\n<span class="kd">const</span> <span class="nx">typeDefs</span> <span class="o">=</span> <span class="nf">readFileSync</span><span class="p">(</span><span class="nx">path</span><span class="p">).</span><span class="nf">toString</span><span class="p">(</span><span class="dl">"</span><span class="s2">utf-8</span><span class="dl">"</span><span class="p">);</span>\n\n<span class="kd">const</span> <span class="nx">schema</span> <span class="o">=</span> <span class="nf">createSchema</span><span class="p">({</span>\n  <span class="nx">typeDefs</span><span class="p">,</span>\n  <span class="nx">resolvers</span><span class="p">,</span>\n<span class="p">})</span>\n\n<span class="kd">const</span> <span class="nx">graphqlEndpoint</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/api/graphql</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="nf">createYoga</span><span class="p">({</span>\n  <span class="nx">graphqlEndpoint</span><span class="p">,</span>\n  <span class="nx">schema</span><span class="p">,</span>\n  <span class="na">context</span><span class="p">:</span> <span class="nx">createContext</span><span class="p">,</span>\n<span class="p">});</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="350:1-350:119"><a href="http://localhost:3000/api/graphql" rel="nofollow noopener" target="_blank">localhost:3000/api/graphql</a>にアクセスし、Queryを叩いてみましょう。</p>\n<ol data-sourcepos="352:1-367:0">\n<li data-sourcepos="352:1-355:0">\n<p data-sourcepos="352:4-352:10">addTodo</p>\n<p data-sourcepos="354:5-354:167"><a href="https://camo.qiitausercontent.com/3868728d49d8eb553dcb4cf17a9f2bca66f46c04/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f35333330386338352d356538392d613238332d346537382d3036626630653565396236612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F53308c85-5e89-a283-4e78-06bf0e5e9b6a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=28228f3e8ffe95fb13bdf49ebe1b4df1" alt="スクリーンショット 2023-04-15 0.51.43.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/53308c85-5e89-a283-4e78-06bf0e5e9b6a.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F53308c85-5e89-a283-4e78-06bf0e5e9b6a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c5380d1b7f190632a7ee26cc32002b46 1x" loading="lazy"></a></p>\n</li>\n<li data-sourcepos="356:1-359:0">\n<p data-sourcepos="356:4-356:11">listTodo</p>\n<p data-sourcepos="358:5-358:167"><a href="https://camo.qiitausercontent.com/bf3fef2154041dbe79431a589f65b9895eaaa2ee/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f38643264303464362d613464612d373233362d366464382d3230376636666566313437612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F8d2d04d6-a4da-7236-6dd8-207f6fef147a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=05f6b990162d15d10a3d68787f6b8b93" alt="スクリーンショット 2023-04-15 0.52.17.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/8d2d04d6-a4da-7236-6dd8-207f6fef147a.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F8d2d04d6-a4da-7236-6dd8-207f6fef147a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=62b7cd1bb94e1cd918bb773cd57c2acf 1x" loading="lazy"></a></p>\n</li>\n<li data-sourcepos="360:1-363:0">\n<p data-sourcepos="360:4-360:13">deleteTodo</p>\n<p data-sourcepos="362:5-362:167"><a href="https://camo.qiitausercontent.com/3436f772b8639281a836254bb3a98de4f804094a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f66353130643434302d353230312d356565362d313962332d3938616631343032373333652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Ff510d440-5201-5ee6-19b3-98af1402733e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=99b13b9241d2f5d8200c7ad49e6cd9ce" alt="スクリーンショット 2023-04-15 0.52.53.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/f510d440-5201-5ee6-19b3-98af1402733e.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Ff510d440-5201-5ee6-19b3-98af1402733e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3c8fc88114e2c69af67247163ece8427 1x" loading="lazy"></a></p>\n</li>\n<li data-sourcepos="364:1-367:0">\n<p data-sourcepos="364:4-364:11">listTodo</p>\n<p data-sourcepos="366:5-366:167"><a href="https://camo.qiitausercontent.com/dc774620180924b524ab4514890890cc08687a63/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f34616666376332332d633935382d356561392d653437612d3939666361303534616664302e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4aff7c23-c958-5ea9-e47a-99fca054afd0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c5e5059230a14ae2480574b85d2e611c" alt="スクリーンショット 2023-04-15 0.53.15.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4aff7c23-c958-5ea9-e47a-99fca054afd0.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4aff7c23-c958-5ea9-e47a-99fca054afd0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9556c706d4dd3c76cf4e7af68b1fb480 1x" loading="lazy"></a></p>\n</li>\n</ol>\n<p data-sourcepos="368:1-369:54">動いてそうですね👌<br>\nこれでGrapQLサーバーの設定が完了です。</p>\n<h1 data-sourcepos="371:1-371:8">\n<span id="次回" class="fragment"></span><a href="#%E6%AC%A1%E5%9B%9E"><i class="fa fa-link"></i></a>次回</h1>\n<p data-sourcepos="373:1-373:54">次はフロント側の設定をしていきます。</p>\n<p data-sourcepos="375:1-375:53"><iframe id="qiita-embed-content__fd8a2cc7a846d0cb8541419ad8c31d5a" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__fd8a2cc7a846d0cb8541419ad8c31d5a" data-content="https%3A%2F%2Fqiita.com%2Fmaaaashi%2Fitems%2F5c63398a34ac3ea8ddad" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<ul data-sourcepos="377:1-379:28">\n<li data-sourcepos="377:1-379:28">後編\n<ol data-sourcepos="378:5-379:28">\n<li data-sourcepos="378:5-378:28">フロント側準備</li>\n<li data-sourcepos="379:5-379:28">フロント側実装</li>\n</ol>\n</li>\n</ul>\n',body:'# はじめに\n\n最近GraphQLについて学びまして、\nNext.js + GraphQL + GraphQL CodeGenerator + Prismaの構成でTodoアプリを構築したので\n軽〜く解説をしつつ、その記録をここに残します。\n\n![スクリーンショット 2023-04-15 20.58.42.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/d9c686d4-ca7f-fec9-a91c-1b050cfaafff.png)\n\n# 環境\n\n- Macbook Air\n- node\n    - v18.13.0\n- pnpm\n    - 7.27.0\n\n# 目次\n\n- [前編](https://qiita.com/maaaashi/items/fe52db19759ea8a0be31)\n    1. Next Create App\n    1. GraphQLサーバー構築\n    1. Subscription\n    1. DB・Prisma\n- [中編](https://qiita.com/maaaashi/items/722d75cf8bd25efded88) 👈 今ここ\n    1. GraphQL Schema\n    1. GraphQL Context\n    1. GraphQL Code Generator\n    1. GraphQL Resolver\n    1. GraphQLサーバー修正\n- [後編](https://qiita.com/maaaashi/items/5c63398a34ac3ea8ddad)\n    1. フロント側準備\n    1. フロント側実装\n\n# 中編\n\n中編はGraphQLフェーズです\n\n## 1. GraphQL Schema\n\n```bash\n.\n├── src\n│   ├── graphql\n│   │   ├── typeDefs\n│   │   │   ├─ common.graphql\n│   │   │   └─ todo.graphql\n│   │   │\n```\n\nこのようなファイル構成で作成します。\n`common.graphql`には今後schemaが増えてきた時のために、共通のschemaを定義しようと思います。\n\n- schema\n    - Query\n        - ListTodos: Todo一覧を取得する\n    - Mutation\n        - addTodo: contentを元にTodoを作成する\n        - updateTodo: idとdoneから、todoの状態を更新する\n        - deleteTodo: idから、todoを削除する\n\n- create file\n    \n    ```bash\n    $ mkdir src/graphql src/graphql/typeDefs\n    $ touch src/graphql/typeDefs/todo.graphql src/graphql/typeDefs/common.graphql\n    ```\n- edit file\n\n    ```graphql: todo.graphql\n    type Todo {\n      id: ID!\n      content: String!\n      done: Boolean!\n      createdAt: DateTime\n    }\n    \n    type Query {\n      listTodos: [Todo!]!\n    }\n    \n    type Mutation {\n      addTodo(content: String!): Todo!\n      updateTodo(id: ID!, done: Boolean!): Todo!\n      deleteTodo(id: ID!): Todo!\n    }\n    \n    fragment TodoFragment on Todo {\n      id\n      content\n      done\n      createdAt\n    }\n    \n    query ListTodos {\n      listTodos {\n        ...TodoFragment\n      }\n    }\n    \n    mutation AddTodo($content: String!) {\n      addTodo(content: $content) {\n        ...TodoFragment\n      }\n    }\n    \n    mutation UpdateTodo($id: ID!, $done: Boolean!) {\n      updateTodo(id: $id, done: $done) {\n        ...TodoFragment\n      }\n    }\n    \n    mutation DeleteTodo($id: ID!) {\n      deleteTodo(id: $id) {\n        ...TodoFragment\n      }\n    }\n    ```\n    \n    ```graphql: common.graphql\n    scalar DateTime\n    ```\n\n## 2. GraphQL Contextの設定\n\n```bash\n.\n├── src\n│   ├── graphql\n│   │   ├── context\n│   │   │   ├── index.ts\n```\n\n- create file\n    \n    ```bash\n    $ mkdir src/graphql/context\n    $ touch src/graphql/context/index.ts\n    ```\n\n- edit file\n    \n    ```typescript: src/graphql/context/index.ts\n    import { PrismaClient } from "@prisma/client";\n    \n    const prisma = new PrismaClient();\n    \n    export type Context = {\n      prisma: typeof prisma;\n    };\n    \n    export const createContext = () => {\n      return {\n        prisma: prisma,\n      };\n    };\n    ```\n\n## 3. GraphQL Code Generator\n\nhttps://the-guild.dev/graphql/codegen\n\n```bash\n.\n├── src\n│   ├── graphql\n|   |   ├── typeDefs\n|   |   |   ├── common.graphql\n|   |   |   └── todo.graphql\n│   │   ├── context\n│   │   │   ├── index.ts\n```\n\n:::note info\ninitのコマンドも用意されていますが、pluginsを入れたりしたいので、マニュアルセットアップしていきます\n:::\n\nhttps://the-guild.dev/graphql/codegen/plugins\n\n\n- install\n    \n    ```\n    # dependencies\n    $ pnpm add graphql @graphql-tools/graphql-file-loader @graphql-tools/load @graphql-tools/schema\n    \n    # devDependencies\n    pnpm add -D @graphql-codegen/cli @graphql-codegen/schema-ast @graphql-codegen/typescript @graphql-codegen/typescript-resolvers @graphql-codegen/typescript-operations @graphql-codegen/typescript-react-apollo ts-node\n    ```\n\n- create codegen.yml    \n    \n    ```bash\n    $ touch codegen.yml\n    ```\n    \n    ```yaml: codegen.yml\n    generates:\n      src/generated/schema.graphql:\n        schema:\n          - "src/graphql/typeDefs/**/*.graphql"\n        plugins:\n          - schema-ast\n      src/generated/resolvers-types.ts:\n        schema:\n          - "src/graphql/typeDefs/**/*.graphql"\n        plugins:\n          - typescript\n          - typescript-resolvers\n        config:\n          contextType: "@/graphql/context/#Context"\n          mapperTypeSuffix: Model\n          mappers:\n            Todo: "@prisma/client#Todo"\n          scalars:\n            DateTime: string\n      src/generated/request.ts:\n        schema:\n          - "src/graphql/typeDefs/**/*.graphql"\n        documents:\n          - "src/graphql/typeDefs/**/*.graphql"\n        plugins:\n          - typescript\n          - typescript-operations\n          - typescript-react-apollo\n        config:\n          scalars:\n            DateTime: string\n    \n    ```\n\n- run graphql-codegen\n    \n    ```bash\n    $ pnpm graphql-codegen\n    ✔ Parse Configuration\n    ✔ Generate outputs\n    ```\n\n    実行すると以下のような構成でresolver用の型定義ファイルなどが生成されます\n    \n    ```bash\n    .\n    ├── src\n    │   ├── generated\n    │   │   ├── request.ts\n    │   │   ├── resolvers-type.ts\n    │   │   └── schema.graphql\n    ```\n\n# 4. GraphQL Resolver\n\n```bash\n.\n├── src\n│   ├── graphql\n│   │   ├── resolvers\n│   │   │   └─ index.ts\n│   │   │\n```\n\n- create file\n\n    ```bash\n    $ mkdir src/graphql/resolvers\n    $ touch src/graphql/resolvers/index.ts\n    ```\n\n- edit file\n    \n    **3. GraphQL Code Generator**で作成した`resolvers-types`を利用してresolverを設定していきます。\n    \n    ```typescript:  src/graphql/resolvers/index.ts\n    import { Resolvers } from "@/generated/resolvers-types";\n    \n    export const resolvers: Resolvers = {\n      Query: {\n        listTodos: async (_parent, _args, { prisma }) => {\n          return await prisma.todo.findMany();\n        },\n      },\n      Mutation: {\n        addTodo: async (_parent, { content }, { prisma }) => {\n          return await prisma.todo.create({\n            data: { content, createdAt: new Date().toISOString() },\n          });\n        },\n        updateTodo: async (_parent, { id, done }, { prisma }) => {\n          return await prisma.todo.update({\n            where: { id },\n            data: { done },\n          });\n        },\n        deleteTodo: async (_parent, { id }, { prisma }) => {\n          return await prisma.todo.delete({\n            where: { id },\n          });\n        },\n      },\n    };\n    ```\n\n::: note info\n### GraphQL Code Generatorを使うメリット\n\n1. 型定義がされているので、このように補完を利用することができます。\n    \n    ![スクリーンショット 2023-04-16 10.29.17.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/edd1b1dc-663b-867c-4184-7c52719e1747.png)\n\n2. 型安全性\n\n    試しにエラーを発生させてみましょう。\n    \n    Todoを返すはずの`addTodo`で、文字列を返すとこのようにエラーが表示されます。\n    ![スクリーンショット 2023-04-16 10.31.30.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/324f73bf-72ad-4d7f-b03d-8aa327653a87.png)\n    \n    予定されていない引数を利用しようとすると、このようにエラーが表示されます。\n    ![スクリーンショット 2023-04-16 10.32.37.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/37c1b9b8-aecb-6824-e0f9-ed6a1e3f8aa9.png)\n\n`GraphQL Code Generator`を使わなくても実装はできますが、使う事でより安全にコーディングが進められますし、何か元schemaファイルを修正した際に、影響範囲を型で考えることができます。\n:::\n\n## 5. GraphQLサーバー修正\n\n**3. GraphQL Code Generator**及び、**4. GraphQL Resolver**で作成したファイルをインポートしていきます。\n\n```typescript: api/graphql.ts\nimport { createYoga, createSchema } from "graphql-yoga";\nimport { readFileSync } from "fs";\nimport { join } from "path";\nimport { resolvers } from "@/graphql/resolvers";\nimport { createContext } from "@/graphql/context";\n\nconst path = join(process.cwd(), "src", "generated", "schema.graphql");\nconst typeDefs = readFileSync(path).toString("utf-8");\n\nconst schema = createSchema({\n  typeDefs,\n  resolvers,\n})\n\nconst graphqlEndpoint = "/api/graphql";\n\nexport default createYoga({\n  graphqlEndpoint,\n  schema,\n  context: createContext,\n});\n```\n\n[localhost:3000/api/graphql](http://localhost:3000/api/graphql)にアクセスし、Queryを叩いてみましょう。\n\n1. addTodo\n    \n    ![スクリーンショット 2023-04-15 0.51.43.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/53308c85-5e89-a283-4e78-06bf0e5e9b6a.png)\n\n2. listTodo\n    \n    ![スクリーンショット 2023-04-15 0.52.17.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/8d2d04d6-a4da-7236-6dd8-207f6fef147a.png)\n\n3. deleteTodo\n    \n    ![スクリーンショット 2023-04-15 0.52.53.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/f510d440-5201-5ee6-19b3-98af1402733e.png)\n\n4. listTodo\n    \n    ![スクリーンショット 2023-04-15 0.53.15.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4aff7c23-c958-5ea9-e47a-99fca054afd0.png)\n\n動いてそうですね👌\nこれでGrapQLサーバーの設定が完了です。\n\n# 次回\n\n次はフロント側の設定をしていきます。\n\nhttps://qiita.com/maaaashi/items/5c63398a34ac3ea8ddad\n\n- 後編\n    1. フロント側準備\n    1. フロント側実装\n',coediting:!1,comments_count:0,created_at:"2023-04-16T10:43:16+09:00",group:null,id:"722d75cf8bd25efded88",likes_count:3,private:!1,reactions_count:0,stocks_count:1,tags:[{name:"TypeScript",versions:[]},{name:"GraphQL",versions:[]},{name:"apollo",versions:[]},{name:"Next.js",versions:[]},{name:"graphql-codegen",versions:[]}],title:"Next.js + GrapqhQLでTodoアプリを構築する(中編)",updated_at:"2023-04-17T08:56:58+09:00",url:"https://qiita.com/maaaashi/items/722d75cf8bd25efded88",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:663,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-5:60">最近GraphQLについて学びまして、<br>\nNext.js + GraphQL + GraphQL CodeGenerator + Prismaの構成でTodoアプリを構築したので<br>\n解説をしつつ、その記録をここに残します。</p>\n<p data-sourcepos="7:1-7:164"><a href="https://camo.qiitausercontent.com/2b9e224aafce9c1301fe53a06739c41f13887cb4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f62613361616435612d373433642d316464362d323435662d3836393836653630316333662e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fba3aad5a-743d-1dd6-245f-86986e601c3f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c2388783f56111d80731d8e388f554fb" alt="スクリーンショット 2023-04-15 20.58.42.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/ba3aad5a-743d-1dd6-245f-86986e601c3f.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fba3aad5a-743d-1dd6-245f-86986e601c3f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1aadff051c98d88c6e93b59c7f8ebb02 1x" loading="lazy"></a></p>\n<h1 data-sourcepos="9:1-9:8">\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h1>\n<ul data-sourcepos="11:1-16:0">\n<li data-sourcepos="11:1-11:13">Macbook Air</li>\n<li data-sourcepos="12:1-13:14">node\n<ul data-sourcepos="13:5-13:14">\n<li data-sourcepos="13:5-13:14">v18.13.0</li>\n</ul>\n</li>\n<li data-sourcepos="14:1-16:0">pnpm\n<ul data-sourcepos="15:5-16:0">\n<li data-sourcepos="15:5-16:0">7.27.0</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos="17:1-17:8">\n<span id="目次" class="fragment"></span><a href="#%E7%9B%AE%E6%AC%A1"><i class="fa fa-link"></i></a>目次</h1>\n<ul data-sourcepos="19:1-33:0">\n<li data-sourcepos="19:1-23:18">\n<a href="https://qiita.com/maaaashi/items/fe52db19759ea8a0be31">前編</a> 👈 今ここ\n<ol data-sourcepos="20:5-23:18">\n<li data-sourcepos="20:5-20:22">Next Create App</li>\n<li data-sourcepos="21:5-21:32">GraphQLサーバー構築</li>\n<li data-sourcepos="22:5-22:19">Subscription</li>\n<li data-sourcepos="23:5-23:18">DB・Prisma</li>\n</ol>\n</li>\n<li data-sourcepos="24:1-29:32">\n<a href="https://qiita.com/maaaashi/items/722d75cf8bd25efded88" id="reference-53ae5090168eb3dd06e6">中編</a>\n<ol data-sourcepos="25:5-29:32">\n<li data-sourcepos="25:5-25:21">GraphQL Schema</li>\n<li data-sourcepos="26:5-26:22">GraphQL Context</li>\n<li data-sourcepos="27:5-27:29">GraphQL Code Generator</li>\n<li data-sourcepos="28:5-28:23">GraphQL Resolver</li>\n<li data-sourcepos="29:5-29:32">GraphQLサーバー修正</li>\n</ol>\n</li>\n<li data-sourcepos="30:1-33:0">\n<a href="https://qiita.com/maaaashi/items/5c63398a34ac3ea8ddad" id="reference-7746fa5cd0cd4d72f123">後編</a>\n<ol data-sourcepos="31:5-33:0">\n<li data-sourcepos="31:5-31:28">フロント側準備</li>\n<li data-sourcepos="32:5-33:0">フロント側実装</li>\n</ol>\n</li>\n</ul>\n<h1 data-sourcepos="34:1-34:8">\n<span id="前編" class="fragment"></span><a href="#%E5%89%8D%E7%B7%A8"><i class="fa fa-link"></i></a>前編</h1>\n<p data-sourcepos="36:1-36:36">前編は準備フェーズです。</p>\n<h2 data-sourcepos="38:1-38:21">\n<span id="1-next-create-app" class="fragment"></span><a href="#1-next-create-app"><i class="fa fa-link"></i></a>1. Next Create App</h2>\n<ul data-sourcepos="40:1-63:0">\n<li data-sourcepos="40:1-63:0">\n<p data-sourcepos="40:3-40:12">create app</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="42:5-58:7"><div class="highlight"><pre><code><span class="nv">$ </span>pnpm create next-app nextjs-sample-graphql <span class="nt">--typescript</span>\n\n<span class="c"># ESLintを使うかどうか・・・Yes</span>\n✔ Would you like to use ESLint with this project? … Yes\n<span class="c"># TailwindCSSを使うかどうか・・・Yes</span>\n✔ Would you like to use Tailwind CSS with this project? … Yes\n<span class="c"># srcディレクトリを使うかどうか・・・Yes</span>\n✔ Would you like to use <span class="sb">`</span>src/<span class="sb">`</span> directory with this project? … Yes\n<span class="c"># appディレクトリを使うかどうか・・・No</span>\n✔ Would you like to use experimental <span class="sb">`</span>app/<span class="sb">`</span> directory with this project? … No\n<span class="c"># エイリアス設定・・・@/*</span>\n✔ What import <span class="nb">alias </span>would you like configured? … @/<span class="k">*</span>\n\n<span class="nv">$ </span><span class="nb">cd </span>nextjs-sample-graphql\n<span class="nv">$ </span>pnpm run dev\n</code></pre></div></div>\n<p data-sourcepos="60:5-60:79"><a href="http://localhost:3000" rel="nofollow noopener" target="_blank">localhost:3000</a>でサーバーが起動します。</p>\n<p data-sourcepos="62:5-62:168"><a href="https://camo.qiitausercontent.com/635bbf3863b6fe2a842fe526a26998fb5d79cf05/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f61333066316364652d333163312d363332302d666530642d3165353531326537333330632e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa30f1cde-31c1-6320-fe0d-1e5512e7330c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cd3bcbe74f0dbb730ee2a462c2b0fa2c" alt="スクリーンショット 2023-04-15 12.43.47.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a30f1cde-31c1-6320-fe0d-1e5512e7330c.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa30f1cde-31c1-6320-fe0d-1e5512e7330c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=57fdef49b2084202555255e3f9b136bd 1x" loading="lazy"></a></p>\n</li>\n</ul>\n<h2 data-sourcepos="64:1-64:31">\n<span id="2-graphqlサーバー構築" class="fragment"></span><a href="#2-graphql%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E6%A7%8B%E7%AF%89"><i class="fa fa-link"></i></a>2. GraphQLサーバー構築</h2>\n<ul data-sourcepos="66:1-120:0">\n<li data-sourcepos="66:1-71:0">\n<p data-sourcepos="66:3-66:9">install</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="68:5-70:7"><div class="highlight"><pre><code><span class="nv">$ </span>pnpm add graphql graphql-yoga\n</code></pre></div></div>\n</li>\n<li data-sourcepos="72:1-120:0">\n<p data-sourcepos="72:3-72:36">GraphQL Server on <code>api/graphql.ts</code></p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="74:5-108:7">\n<div class="code-lang"><span class="bold"> src/pages/api/graphql.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createYoga</span><span class="p">,</span> <span class="nx">createSchema</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">graphql-yoga</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">NextApiRequest</span><span class="p">,</span> <span class="nx">NextApiResponse</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">next</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">YogaSchemaDefinition</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">graphql-yoga/typings/plugins/useSchema</span><span class="dl">\'</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">api</span><span class="p">:</span> <span class="p">{</span>\n    <span class="na">bodyParser</span><span class="p">:</span> <span class="kc">false</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="kd">const</span> <span class="nx">schema</span> <span class="o">=</span> <span class="nf">createSchema</span><span class="p">({</span>\n  <span class="na">typeDefs</span><span class="p">:</span> <span class="cm">/* GraphQL */</span> <span class="s2">`\n    type Query {\n      greetings: String\n    }\n  `</span><span class="p">,</span>\n  <span class="na">resolvers</span><span class="p">:</span> <span class="p">{</span>\n    <span class="na">Query</span><span class="p">:</span> <span class="p">{</span>\n      <span class="na">greetings</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="dl">\'</span><span class="s1">This is the `greetings` field of the root `Query` type</span><span class="dl">\'</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n<span class="p">})</span> <span class="k">as</span> <span class="nx">YogaSchemaDefinition</span><span class="o">&lt;</span><span class="p">{</span>\n  <span class="na">req</span><span class="p">:</span> <span class="nx">NextApiRequest</span><span class="p">;</span>\n  <span class="nl">res</span><span class="p">:</span> <span class="nx">NextApiResponse</span><span class="p">;</span>\n<span class="p">}</span><span class="o">&gt;</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="nx">createYoga</span><span class="o">&lt;</span><span class="p">{</span>\n  <span class="na">req</span><span class="p">:</span> <span class="nx">NextApiRequest</span>\n  <span class="na">res</span><span class="p">:</span> <span class="nx">NextApiResponse</span>\n<span class="p">}</span><span class="o">&gt;</span><span class="p">({</span>\n  <span class="nx">schema</span><span class="p">,</span>\n  <span class="na">graphqlEndpoint</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">/api/graphql</span><span class="dl">\'</span>\n<span class="p">})</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="110:5-110:67"><a href="http://localhost:3000/api/graphql" rel="nofollow noopener" target="_blank">localhost:3000/api/graphql</a></p>\n<p data-sourcepos="112:5-112:126"><a href="https://camo.qiitausercontent.com/448827327d27309270fe1e4f5f24a658cdc025ea/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f61373934313766322d626362302d666430382d316133352d6432613162613963396635632e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa79417f2-bcb0-fd08-1a35-d2a1ba9c9f5c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7089633ffa045b9f27e1f2b505d49777" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a79417f2-bcb0-fd08-1a35-d2a1ba9c9f5c.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa79417f2-bcb0-fd08-1a35-d2a1ba9c9f5c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=751f49cdf54e837fdb804bcd83e95dd9 1x" loading="lazy"></a></p>\n<p data-sourcepos="114:5-115:42">YogaGraphQLサーバーが立ち上がっています。<br>\n試しにQueryを叩いてみます。</p>\n<p data-sourcepos="117:5-117:126"><a href="https://camo.qiitausercontent.com/4b73b7a0917c669d5058d73f762e7aaca207dc1e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f62663730326130652d643837352d316531662d383631352d3062353538346237326430612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fbf702a0e-d875-1e1f-8615-0b5584b72d0a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ce70b9e8455502a696995ee983ad1df1" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/bf702a0e-d875-1e1f-8615-0b5584b72d0a.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fbf702a0e-d875-1e1f-8615-0b5584b72d0a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=253c92f073f8e6c9b27f2dfcb35bb36c 1x" loading="lazy"></a></p>\n<p data-sourcepos="119:5-119:35">ちゃんと叩けました👍</p>\n</li>\n</ul>\n<h2 data-sourcepos="121:1-121:18">\n<span id="3-subscription" class="fragment"></span><a href="#3-subscription"><i class="fa fa-link"></i></a>3. Subscription</h2>\n<div data-sourcepos="123:1-125:3" class="note warn">\n<span class="fa fa-fw fa-exclamation-circle"></span><div>\n<p data-sourcepos="124:1-124:236">Next.jsのAPIルートではWebSocketsを使うことができません。GraphQL API、WebSocket、および残りの Next.js コンテンツを使うためには、Next.jsカスタムサーバーを作成する必要があります。</p>\n</div>\n</div>\n<blockquote data-sourcepos="127:1-127:229">\n<p data-sourcepos="127:3-127:229">引用: WebSockets cannot be used with Next.js API Routes(opens in a new tab), we therefore have to create a custom Next.js server(opens in a new tab) that will serve the GraphQL API, WebSockets and the rest of Next.js content.</p>\n</blockquote>\n<p data-sourcepos="129:1-129:185">今回はAPIルートにGraphQLサーバーを構築し、Todoアプリを作っていきたいので、<code>Subscription</code>の機能は使わない事にし、この設定はSKIPします。</p>\n<h2 data-sourcepos="131:1-131:17">\n<span id="4-dbprisma" class="fragment"></span><a href="#4-dbprisma"><i class="fa fa-link"></i></a>4. DB・Prisma</h2>\n<ul data-sourcepos="133:1-134:0">\n<li data-sourcepos="133:1-134:0">DBには<code>PostgreSQL</code>を採用しました</li>\n</ul>\n<h3 data-sourcepos="135:1-135:19">\n<span id="4-1-postgresql" class="fragment"></span><a href="#4-1-postgresql"><i class="fa fa-link"></i></a>4-1. PostgreSQL</h3>\n<ul data-sourcepos="137:1-164:0">\n<li data-sourcepos="137:1-164:0">\n<p data-sourcepos="137:3-137:34">compose.ymlファイルの作成</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="139:5-141:7"><div class="highlight"><pre><code><span class="nv">$ </span><span class="nb">touch </span>compose.yml\n</code></pre></div></div>\n<div class="code-frame" data-lang="yml" data-sourcepos="143:5-159:7">\n<div class="code-lang"><span class="bold"> compose.yml</span></div>\n<div class="highlight"><pre><code><span class="na">version</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">3.9\'</span>\n\n<span class="na">services</span><span class="pi">:</span>\n  <span class="na">db</span><span class="pi">:</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">postgres:15.1</span>\n    <span class="na">ports</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">5432:5432</span>\n    <span class="na">volumes</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">postgres:/var/lib/postgresql/data</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">POSTGRES_USER=user</span>           <span class="c1"># 自分で変更してください</span>\n      <span class="pi">-</span> <span class="s">POSTGRES_PASSWORD=password</span>   <span class="c1"># 自分で変更してください</span>\n      <span class="pi">-</span> <span class="s">POSTGRES_DB=graphql-todo</span>     <span class="c1"># 自分で変更してください</span>\n<span class="na">volumes</span><span class="pi">:</span>\n  <span class="na">postgres</span><span class="pi">:</span>\n</code></pre></div>\n</div>\n<div class="code-frame" data-lang="bash" data-sourcepos="161:5-163:7"><div class="highlight"><pre><code>docker compose up <span class="nt">-d</span>\n</code></pre></div></div>\n</li>\n</ul>\n<h3 data-sourcepos="165:1-165:21">\n<span id="4-2-prisma設定" class="fragment"></span><a href="#4-2-prisma%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>4-2. Prisma設定</h3>\n<div data-sourcepos="167:1-169:3" class="note info">\n<span class="fa fa-fw fa-check-circle"></span><div>\n<p data-sourcepos="168:1-168:76">prismaとはNodejs, TypeScriptで使えるORM(ObjectRelationalMapping)です</p>\n</div>\n</div>\n<p data-sourcepos="171:1-171:22"><iframe id="qiita-embed-content__97c69562f5d21fe4fb18220790812a07" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__97c69562f5d21fe4fb18220790812a07" data-content="https%3A%2F%2Fwww.prisma.io%2F" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<ul data-sourcepos="173:1-192:0">\n<li data-sourcepos="173:1-178:0">\n<p data-sourcepos="173:3-173:9">install</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="175:5-177:7"><div class="highlight"><pre><code>pnpm add prisma @prisma/client\n</code></pre></div></div>\n</li>\n<li data-sourcepos="179:1-192:0">\n<p data-sourcepos="179:3-179:6">init</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="181:5-183:7"><div class="highlight"><pre><code>pnpm prisma init\n</code></pre></div></div>\n<p data-sourcepos="185:5-185:46">.envに<code>DATABASE_URL</code>を記述します。</p>\n<div class="code-frame" data-lang=".env" data-sourcepos="188:5-190:7">\n<div class="code-lang"><span class="bold">.env</span></div>\n<div class="highlight"><pre><code>DATABASE_URL="postgresql://user:password@localhost:5432/graphql-todo?schema=public"\n</code></pre></div>\n</div>\n</li>\n</ul>\n<div data-sourcepos="193:1-199:3" class="note info">\n<span class="fa fa-fw fa-check-circle"></span><div>\n<p data-sourcepos="194:1-194:58">urlは、<code>compose.yml</code>で設定した変数を用いて、</p>\n<p data-sourcepos="196:1-196:99">postgresql://<code>${POSTGRES_USER}</code>:<code>${POSTGRES_PASSWORD}</code><a href="/localhost" class="user-mention js-hovercard" title="localhost" data-hovercard-target-type="user" data-hovercard-target-name="localhost">@localhost</a>:5432/<code>${POSTGRES_DB}</code>schema=public</p>\n<p data-sourcepos="198:1-198:18">になります。</p>\n</div>\n</div>\n<ul data-sourcepos="201:1-257:0">\n<li data-sourcepos="201:1-223:0">\n<p data-sourcepos="201:3-201:27">Todoテーブルの作成</p>\n<div class="code-frame" data-lang="diff" data-sourcepos="203:5-222:7">\n<div class="code-lang"><span class="bold"> prisma/schema.prisma</span></div>\n<div class="highlight"><pre><code>// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n<span class="err">\n</span><span class="p">generator client {\n</span>  provider = "prisma-client-js"\n}\n<span class="err">\n</span><span class="p">datasource db {\n</span>  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n<span class="err">\n</span><span class="gi">+ model Todo {\n+   id        String  @id @default(cuid())\n+   content   String\n+   done      Boolean @default(false)\n+   createdAt String\n+ }\n</span></code></pre></div>\n</div>\n</li>\n<li data-sourcepos="224:1-257:0">\n<p data-sourcepos="224:3-224:9">migrate</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="226:5-242:7"><div class="highlight"><pre><code><span class="nv">$ </span>pnpm prisma migrate dev\nEnvironment variables loaded from .env\nPrisma schema loaded from prisma/schema.prisma\nDatasource <span class="s2">"db"</span>: PostgreSQL database <span class="s2">"graphql-todo"</span>, schema <span class="s2">"public"</span> at <span class="s2">"localhost:5432"</span>\n\n? Enter a name <span class="k">for </span>the new migration: › addTodoTable \nApplying migration <span class="sb">`</span>20230413102125_add_todo_table<span class="sb">`</span>\n\nThe following migration<span class="o">(</span>s<span class="o">)</span> have been created and applied from new schema changes:\n\nmigrations/\n  └─ 20230413102125_add_todo_table/\n    └─ migration.sql\n\nYour database is now <span class="k">in </span><span class="nb">sync </span>with your schema.\n</code></pre></div></div>\n<div data-sourcepos="244:5-258:24" class="note info">\n<span class="fa fa-fw fa-check-circle"></span><div>\n<p data-sourcepos="245:5-246:147">migrateが成功すると、<code>prisma/</code>に<code>migrations</code>ディレクトリが作成され、中に実行されたSQLが入ったmigrationファイルが作成されます。<br>\nRubyOnRailsのORMである、<code>Active Record</code>に慣れている人には割とイメージしやすいファイル構成かもしれません。</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="248:5-256:7"><div class="highlight"><pre><code><span class="nb">.</span>\n├── prisma\n│   ├── migrations\n│   │   ├── yyyyMMddhhmmss\n│   │   │   └─ migration.sql\n│   │   └─ migration_lock.toml\n|   └─ prisma.schema\n</code></pre></div></div>\n</div>\n</div>\n</li>\n</ul>\n<ul data-sourcepos="258:1-268:0">\n<li data-sourcepos="258:1-268:0">\n<p data-sourcepos="258:3-258:24">prisma studioの起動</p>\n<p data-sourcepos="260:5-260:148">prismaには入っているデータの検索、操作を簡単に行える<code>prisma studio</code>というものが標準で用意されています。</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="262:5-264:7"><div class="highlight"><pre><code>pnpm prisma studio\n</code></pre></div></div>\n<p data-sourcepos="266:5-266:168"><a href="https://camo.qiitausercontent.com/e090ce0cc5e2e5b248cf451fe1c4910f49cc106d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f32383465316464632d386636652d636363352d323432372d6238616631363938643561392e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F284e1ddc-8f6e-ccc5-2427-b8af1698d5a9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=29797c0ebd76c364ef11f3261d76a58f" alt="スクリーンショット 2023-04-15 20.28.22.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/284e1ddc-8f6e-ccc5-2427-b8af1698d5a9.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F284e1ddc-8f6e-ccc5-2427-b8af1698d5a9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3e0f5a79c6f1c3663b041ff9168b35f3 1x" loading="lazy"></a></p>\n</li>\n</ul>\n<h1 data-sourcepos="269:1-269:17">\n<span id="次回-graphql" class="fragment"></span><a href="#%E6%AC%A1%E5%9B%9E-graphql"><i class="fa fa-link"></i></a>次回: GraphQL</h1>\n<p data-sourcepos="271:1-271:53"><iframe id="qiita-embed-content__af2723a4327f95bd2f2733f65a512c81" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__af2723a4327f95bd2f2733f65a512c81" data-content="https%3A%2F%2Fqiita.com%2Fmaaaashi%2Fitems%2F722d75cf8bd25efded88" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<ul data-sourcepos="273:1-279:0">\n<li data-sourcepos="273:1-279:0">中編\n<ol data-sourcepos="274:5-279:0">\n<li data-sourcepos="274:5-274:21">GraphQL Schema</li>\n<li data-sourcepos="275:5-275:22">GraphQL Context</li>\n<li data-sourcepos="276:5-276:29">GraphQL Code Generator</li>\n<li data-sourcepos="277:5-277:23">GraphQL Resolver</li>\n<li data-sourcepos="278:5-279:0">GraphQLサーバー修正</li>\n</ol>\n</li>\n</ul>\n',body:'# はじめに\n\n最近GraphQLについて学びまして、\nNext.js + GraphQL + GraphQL CodeGenerator + Prismaの構成でTodoアプリを構築したので\n解説をしつつ、その記録をここに残します。\n\n![スクリーンショット 2023-04-15 20.58.42.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/ba3aad5a-743d-1dd6-245f-86986e601c3f.png)\n\n# 環境\n\n- Macbook Air\n- node\n    - v18.13.0\n- pnpm\n    - 7.27.0\n\n# 目次\n\n- [前編](https://qiita.com/maaaashi/items/fe52db19759ea8a0be31) 👈 今ここ\n    1. Next Create App\n    1. GraphQLサーバー構築\n    1. Subscription\n    1. DB・Prisma\n- [中編](https://qiita.com/maaaashi/items/722d75cf8bd25efded88)\n    1. GraphQL Schema\n    1. GraphQL Context\n    1. GraphQL Code Generator\n    1. GraphQL Resolver\n    1. GraphQLサーバー修正\n- [後編](https://qiita.com/maaaashi/items/5c63398a34ac3ea8ddad)\n    1. フロント側準備\n    1. フロント側実装\n\n# 前編\n\n前編は準備フェーズです。\n\n## 1. Next Create App\n\n- create app\n    \n    ```bash\n    $ pnpm create next-app nextjs-sample-graphql --typescript\n    \n    # ESLintを使うかどうか・・・Yes\n    ✔ Would you like to use ESLint with this project? … Yes\n    # TailwindCSSを使うかどうか・・・Yes\n    ✔ Would you like to use Tailwind CSS with this project? … Yes\n    # srcディレクトリを使うかどうか・・・Yes\n    ✔ Would you like to use `src/` directory with this project? … Yes\n    # appディレクトリを使うかどうか・・・No\n    ✔ Would you like to use experimental `app/` directory with this project? … No\n    # エイリアス設定・・・@/*\n    ✔ What import alias would you like configured? … @/*\n    \n    $ cd nextjs-sample-graphql\n    $ pnpm run dev\n    ```\n\n    [localhost:3000](http://localhost:3000)でサーバーが起動します。\n\n    ![スクリーンショット 2023-04-15 12.43.47.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a30f1cde-31c1-6320-fe0d-1e5512e7330c.png)\n\n## 2. GraphQLサーバー構築\n\n* install\n    \n    ```bash\n    $ pnpm add graphql graphql-yoga\n    ```\n\n* GraphQL Server on `api/graphql.ts`\n\n    ```typescript: src/pages/api/graphql.ts\n    import { createYoga, createSchema } from \'graphql-yoga\'\n    import type { NextApiRequest, NextApiResponse } from \'next\'\n    import { YogaSchemaDefinition } from \'graphql-yoga/typings/plugins/useSchema\';\n    \n    export const config = {\n      api: {\n        bodyParser: false\n      }\n    }\n    \n    const schema = createSchema({\n      typeDefs: /* GraphQL */ `\n        type Query {\n          greetings: String\n        }\n      `,\n      resolvers: {\n        Query: {\n          greetings: () => \'This is the `greetings` field of the root `Query` type\'\n        }\n      }\n    }) as YogaSchemaDefinition<{\n      req: NextApiRequest;\n      res: NextApiResponse;\n    }>\n    \n    export default createYoga<{\n      req: NextApiRequest\n      res: NextApiResponse\n    }>({\n      schema,\n      graphqlEndpoint: \'/api/graphql\'\n    })\n    ```\n\n    [localhost:3000/api/graphql](http://localhost:3000/api/graphql)\n    \n    ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a79417f2-bcb0-fd08-1a35-d2a1ba9c9f5c.png)\n\n    YogaGraphQLサーバーが立ち上がっています。\n    試しにQueryを叩いてみます。\n    \n    ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/bf702a0e-d875-1e1f-8615-0b5584b72d0a.png)\n    \n    ちゃんと叩けました👍\n\n## 3. Subscription\n\n::: note warn\nNext.jsのAPIルートではWebSocketsを使うことができません。GraphQL API、WebSocket、および残りの Next.js コンテンツを使うためには、Next.jsカスタムサーバーを作成する必要があります。\n:::\n\n> 引用: WebSockets cannot be used with Next.js API Routes(opens in a new tab), we therefore have to create a custom Next.js server(opens in a new tab) that will serve the GraphQL API, WebSockets and the rest of Next.js content.\n\n今回はAPIルートにGraphQLサーバーを構築し、Todoアプリを作っていきたいので、`Subscription`の機能は使わない事にし、この設定はSKIPします。\n\n## 4. DB・Prisma\n\n- DBには`PostgreSQL`を採用しました\n\n### 4-1. PostgreSQL\n\n* compose.ymlファイルの作成\n    \n    ```bash\n    $ touch compose.yml\n    ```\n    \n    ```yml: compose.yml\n    version: \'3.9\'\n    \n    services:\n      db:\n        image: postgres:15.1\n        ports:\n          - 5432:5432\n        volumes:\n          - postgres:/var/lib/postgresql/data\n        environment:\n          - POSTGRES_USER=user           # 自分で変更してください\n          - POSTGRES_PASSWORD=password   # 自分で変更してください\n          - POSTGRES_DB=graphql-todo     # 自分で変更してください\n    volumes:\n      postgres:\n    ```\n    \n    ```bash\n    docker compose up -d\n    ```\n\n### 4-2. Prisma設定\n\n::: note info\nprismaとはNodejs, TypeScriptで使えるORM(ObjectRelationalMapping)です\n:::\n\nhttps://www.prisma.io/\n\n* install\n    \n    ```bash\n    pnpm add prisma @prisma/client\n    ```\n\n* init\n    \n    ```bash\n    pnpm prisma init\n    ```\n\n    .envに`DATABASE_URL`を記述します。\n\n\n    ```.env:.env\n    DATABASE_URL="postgresql://user:password@localhost:5432/graphql-todo?schema=public"\n    ```\n\n\n:::note info\nurlは、`compose.yml`で設定した変数を用いて、\n\npostgresql://`${POSTGRES_USER}`:`${POSTGRES_PASSWORD}`@localhost:5432/`${POSTGRES_DB}`schema=public\n\nになります。\n:::\n\n* Todoテーブルの作成\n\n    ```diff: prisma/schema.prisma\n    // This is your Prisma schema file,\n    // learn more about it in the docs: https://pris.ly/d/prisma-schema\n    \n    generator client {\n      provider = "prisma-client-js"\n    }\n    \n    datasource db {\n      provider = "postgresql"\n      url      = env("DATABASE_URL")\n    }\n    \n    + model Todo {\n    +   id        String  @id @default(cuid())\n    +   content   String\n    +   done      Boolean @default(false)\n    +   createdAt String\n    + }\n    ```\n\n* migrate\n    \n    ```bash\n    $ pnpm prisma migrate dev\n    Environment variables loaded from .env\n    Prisma schema loaded from prisma/schema.prisma\n    Datasource "db": PostgreSQL database "graphql-todo", schema "public" at "localhost:5432"\n    \n    ? Enter a name for the new migration: › addTodoTable \n    Applying migration `20230413102125_add_todo_table`\n    \n    The following migration(s) have been created and applied from new schema changes:\n    \n    migrations/\n      └─ 20230413102125_add_todo_table/\n        └─ migration.sql\n    \n    Your database is now in sync with your schema.\n    ```\n\n    ::: note info\n    migrateが成功すると、`prisma/`に`migrations`ディレクトリが作成され、中に実行されたSQLが入ったmigrationファイルが作成されます。\n    RubyOnRailsのORMである、`Active Record`に慣れている人には割とイメージしやすいファイル構成かもしれません。\n    \n    ```bash\n    .\n    ├── prisma\n    │   ├── migrations\n    │   │   ├── yyyyMMddhhmmss\n    │   │   │   └─ migration.sql\n    │   │   └─ migration_lock.toml\n    |   └─ prisma.schema\n    ```\n\n- prisma studioの起動\n\n    prismaには入っているデータの検索、操作を簡単に行える`prisma studio`というものが標準で用意されています。\n\n    ```bash\n    pnpm prisma studio\n    ```\n    \n    ![スクリーンショット 2023-04-15 20.28.22.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/284e1ddc-8f6e-ccc5-2427-b8af1698d5a9.png)\n\n\n# 次回: GraphQL\n\nhttps://qiita.com/maaaashi/items/722d75cf8bd25efded88\n\n* 中編\n    1. GraphQL Schema\n    1. GraphQL Context\n    1. GraphQL Code Generator\n    1. GraphQL Resolver\n    1. GraphQLサーバー修正\n\n',coediting:!1,comments_count:0,created_at:"2023-04-15T19:23:33+09:00",group:null,id:"fe52db19759ea8a0be31",likes_count:11,private:!1,reactions_count:0,stocks_count:16,tags:[{name:"TypeScript",versions:[]},{name:"GraphQL",versions:[]},{name:"apollo",versions:[]},{name:"Next.js",versions:[]},{name:"graphql-codegen",versions:[]}],title:"Next.js + GrapqhQLでTodoアプリを構築する(前編)",updated_at:"2023-04-17T08:57:12+09:00",url:"https://qiita.com/maaaashi/items/fe52db19759ea8a0be31",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:2731,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-3:113">GitLabのCIを使ってVitestのテストを回してみたいなぁと思い、回したときのメモです。</p>\n<h1 data-sourcepos="5:1-5:23">\n<span id="説明しないこと" class="fragment"></span><a href="#%E8%AA%AC%E6%98%8E%E3%81%97%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8"><i class="fa fa-link"></i></a>説明しないこと</h1>\n<ul data-sourcepos="7:1-10:0">\n<li data-sourcepos="7:1-7:17">GitLabとは？</li>\n<li data-sourcepos="8:1-8:13">CIとは？</li>\n<li data-sourcepos="9:1-10:0">Vitestの詳しい使い方(各種メソッド等)</li>\n</ul>\n<h1 data-sourcepos="11:1-11:14">\n<span id="vitestとは" class="fragment"></span><a href="#vitest%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>Vitestとは</h1>\n<ul data-sourcepos="13:1-14:0">\n<li data-sourcepos="13:1-14:0">私が説明するよりも良い記事があったのでこちらから抜粋させていただきます。</li>\n</ul>\n<p data-sourcepos="15:1-15:206"><iframe id="qiita-embed-content__da83727fe4173a2c3f7e00bf31e7c7e2" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__da83727fe4173a2c3f7e00bf31e7c7e2" data-content="https%3A%2F%2Freffect.co.jp%2Fhtml%2Fvitest%23%3A%7E%3Atext%3DVitest%25E3%2581%25AFVite%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25A7%2C%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%25E3%2581%258C%25E7%2589%25B9%25E5%25BE%25B4%25E3%2581%25A7%25E3%2581%2599%25E3%2580%2582" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<div data-sourcepos="18:1-20:3" class="note info">\n<span class="fa fa-fw fa-check-circle"></span><div>\n<p data-sourcepos="19:1-19:238">VitestはVite環境で利用することができるUnit Testingのフレームワークです。Viteを利用していためViteと同様に高速で動き、TypeScriptなども追加設定なしで利用できることが特徴です。</p>\n</div>\n</div>\n<h1 data-sourcepos="22:1-22:41">\n<span id="sveltekitアプリケーション構築" class="fragment"></span><a href="#sveltekit%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E6%A7%8B%E7%AF%89"><i class="fa fa-link"></i></a>SvelteKitアプリケーション構築</h1>\n<div class="code-frame" data-lang="bash" data-sourcepos="24:1-29:3"><div class="highlight"><pre><code><span class="nv">$ </span>npm create svelte@latest my-app\n<span class="nv">$ </span><span class="nb">cd </span>my-app\n<span class="nv">$ </span>npm <span class="nb">install</span>\n<span class="nv">$ </span>npm run dev <span class="nt">--</span> <span class="nt">--open</span>\n</code></pre></div></div>\n<p data-sourcepos="30:1-30:32"><a href="https://kit.svelte.jp/" rel="nofollow noopener" target="_blank">公式</a></p>\n<h1 data-sourcepos="32:1-32:14">\n<span id="vitest実装" class="fragment"></span><a href="#vitest%E5%AE%9F%E8%A3%85"><i class="fa fa-link"></i></a>Vitest実装</h1>\n<h2 data-sourcepos="34:1-34:24">\n<span id="1-インストール" class="fragment"></span><a href="#1-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>1. インストール</h2>\n<div class="code-frame" data-lang="bash" data-sourcepos="36:1-38:3"><div class="highlight"><pre><code>npm <span class="nb">install</span> <span class="nt">--save-dev</span> vitest jsdom @testing-library/svelte\n</code></pre></div></div>\n<h2 data-sourcepos="40:1-40:26">\n<span id="2-viteconfigts修正" class="fragment"></span><a href="#2-viteconfigts%E4%BF%AE%E6%AD%A3"><i class="fa fa-link"></i></a>2. vite.config.ts修正</h2>\n<div class="code-frame" data-lang="typescript" data-sourcepos="42:1-49:3">\n<div class="code-lang"><span class="bold">vite.config.ts</span></div>\n<div class="highlight"><pre><code><span class="k">export</span> <span class="k">default</span> <span class="nf">defineConfig</span><span class="p">({</span>\n  <span class="p">...</span>\n  <span class="na">test</span><span class="p">:</span> <span class="p">{</span>                  <span class="c1">// 追加</span>\n    <span class="na">environment</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">jsdom</span><span class="dl">\'</span>   <span class="c1">// 追加</span>\n  <span class="p">}</span>                        <span class="c1">// 追加</span>\n<span class="p">})</span>\n</code></pre></div>\n</div>\n<h2 data-sourcepos="51:1-51:30">\n<span id="3-実行コマンド追加" class="fragment"></span><a href="#3-%E5%AE%9F%E8%A1%8C%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E8%BF%BD%E5%8A%A0"><i class="fa fa-link"></i></a>3. 実行コマンド追加</h2>\n<div class="code-frame" data-lang="json" data-sourcepos="53:1-59:3">\n<div class="code-lang"><span class="bold">package.json(抜粋)</span></div>\n<div class="highlight"><pre><code><span class="p">{</span><span class="w">\n  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">\n    </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vitest"</span><span class="p">,</span><span class="w">   </span><span class="err">//</span><span class="w"> </span><span class="err">追加</span><span class="w">\n  </span><span class="p">},</span><span class="w">\n</span><span class="p">}</span><span class="w">\n</span></code></pre></div>\n</div>\n<h2 data-sourcepos="61:1-61:30">\n<span id="4-テストコード追加" class="fragment"></span><a href="#4-%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89%E8%BF%BD%E5%8A%A0"><i class="fa fa-link"></i></a>4. テストコード追加</h2>\n<p data-sourcepos="63:1-63:120">テストコードを置くディレクトリには好みがあると思いますのでご自由に設定ください。</p>\n<p data-sourcepos="65:1-65:81">私は↓のようにsrc以下に<code>__test__/index.test.ts</code>を作成しました。</p>\n<div class="code-frame" data-lang="text" data-sourcepos="67:1-72:3"><div class="highlight"><pre><code>.\n├── src\n│   ├── __tests__\n│   │   ├── index.test.ts\n</code></pre></div></div>\n<p data-sourcepos="74:1-74:53">動作確認のため<code>1 + 1 = 2</code>を試してみます</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="76:1-82:3">\n<div class="code-lang"><span class="bold">index.test.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">expect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">vitest</span><span class="dl">\'</span>\n\n<span class="nf">test</span><span class="p">(</span><span class="dl">\'</span><span class="s1">1 + 1 は 2 であること</span><span class="dl">\'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="nf">expect</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nf">toBe</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>\n<span class="p">});</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="84:1-84:83">詳しくは<a href="https://vitest.dev/" rel="nofollow noopener" target="_blank">公式ドキュメント</a>を見てください。</p>\n<h2 data-sourcepos="86:1-86:12">\n<span id="5-実行" class="fragment"></span><a href="#5-%E5%AE%9F%E8%A1%8C"><i class="fa fa-link"></i></a>5. 実行</h2>\n<div class="code-frame" data-lang="bash" data-sourcepos="88:1-90:3"><div class="highlight"><pre><code><span class="nv">$ </span>npm run <span class="nb">test</span>\n</code></pre></div></div>\n<p data-sourcepos="92:1-93:45"><a href="https://camo.qiitausercontent.com/a19ddf372d2bccde2f1463f2763f946cd62d92d8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f35303232396366342d396334372d376161382d633134362d6330386233373462666562372e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F50229cf4-9c47-7aa8-c146-c08b374bfeb7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0d6141dd485bf671569298123c4102f7" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/50229cf4-9c47-7aa8-c146-c08b374bfeb7.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F50229cf4-9c47-7aa8-c146-c08b374bfeb7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e45672ef3d3a37b4d0efbca89190312c 1x" loading="lazy"></a><br>\n<strong>watchモードでテストが動きます</strong></p>\n<h1 data-sourcepos="95:1-95:32">\n<span id="vitest-coverageモード起動" class="fragment"></span><a href="#vitest-coverage%E3%83%A2%E3%83%BC%E3%83%89%E8%B5%B7%E5%8B%95"><i class="fa fa-link"></i></a>Vitest Coverageモード起動</h1>\n<h2 data-sourcepos="97:1-97:24">\n<span id="1-インストール-1" class="fragment"></span><a href="#1-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB-1"><i class="fa fa-link"></i></a>1. インストール</h2>\n<div class="code-frame" data-lang="bash" data-sourcepos="99:1-101:3"><div class="highlight"><pre><code>npm i <span class="nt">-D</span> @vitest/coverage-c8\n</code></pre></div></div>\n<h2 data-sourcepos="103:1-103:30">\n<span id="2-実行コマンド追加" class="fragment"></span><a href="#2-%E5%AE%9F%E8%A1%8C%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E8%BF%BD%E5%8A%A0"><i class="fa fa-link"></i></a>2. 実行コマンド追加</h2>\n<div class="code-frame" data-lang="json" data-sourcepos="105:1-111:3">\n<div class="code-lang"><span class="bold">package.json(抜粋)</span></div>\n<div class="highlight"><pre><code><span class="p">{</span><span class="w">\n  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">\n    </span><span class="nl">"coverage"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vitest run --coverage"</span><span class="p">,</span><span class="w">   </span><span class="err">//</span><span class="w"> </span><span class="err">追加</span><span class="w">\n  </span><span class="p">},</span><span class="w">\n</span><span class="p">}</span><span class="w">\n</span></code></pre></div>\n</div>\n<h2 data-sourcepos="113:1-113:12">\n<span id="3-実行" class="fragment"></span><a href="#3-%E5%AE%9F%E8%A1%8C"><i class="fa fa-link"></i></a>3. 実行</h2>\n<div class="code-frame" data-lang="bash" data-sourcepos="115:1-117:3"><div class="highlight"><pre><code><span class="nv">$ </span>npm run coverage\n</code></pre></div></div>\n<p data-sourcepos="119:1-119:122"><a href="https://camo.qiitausercontent.com/cdfe40f1c61fcf019c70ed2c4a2d7dfd2dcedceb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f34386233663338642d383065312d376439652d313661382d6337316336336438663732632e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F48b3f38d-80e1-7d9e-16a8-c71c63d8f72c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=be52ed060dfaae59ae22403df4fb0067" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/48b3f38d-80e1-7d9e-16a8-c71c63d8f72c.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F48b3f38d-80e1-7d9e-16a8-c71c63d8f72c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=08c62d41f371d5eab292025bf9eacff2 1x" loading="lazy"></a></p>\n<p data-sourcepos="121:1-122:100"><strong>coverageの計測ができました。</strong><br>\nどのコンポーネント、ファイルも参照していないので当然coverageは0%ですね</p>\n<h1 data-sourcepos="124:1-124:38">\n<span id="gitlab-ciでテストを実行する" class="fragment"></span><a href="#gitlab-ci%E3%81%A7%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>GitLab CIでテストを実行する</h1>\n<h2 data-sourcepos="126:1-126:26">\n<span id="1-gitlab-ciyml記入" class="fragment"></span><a href="#1-gitlab-ciyml%E8%A8%98%E5%85%A5"><i class="fa fa-link"></i></a>1. .gitlab-ci.yml記入</h2>\n<div class="code-frame" data-lang="yaml" data-sourcepos="128:1-142:3">\n<div class="code-lang"><span class="bold">gitlab-ci.yml</span></div>\n<div class="highlight"><pre><code><span class="na">default</span><span class="pi">:</span>\n  <span class="na">image</span><span class="pi">:</span> <span class="s">node:18.14-alpine3.16</span>\n\n<span class="na">before_script</span><span class="pi">:</span>\n  <span class="pi">-</span> <span class="s">npm install</span>\n\n<span class="na">stages</span><span class="pi">:</span>\n  <span class="pi">-</span> <span class="s">test</span>\n\n<span class="na">test</span><span class="pi">:</span>\n  <span class="na">stage</span><span class="pi">:</span> <span class="s">test</span>\n  <span class="na">script</span><span class="pi">:</span>\n    <span class="pi">-</span> <span class="s">npm run coverage</span>\n</code></pre></div>\n</div>\n<h2 data-sourcepos="144:1-144:22">\n<span id="2-pushしてみる" class="fragment"></span><a href="#2-push%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>2. pushしてみる</h2>\n<p data-sourcepos="146:1-146:72">pushすることでpipelineが動き出し、ちゃんと動きました</p>\n<p data-sourcepos="148:1-148:122"><a href="https://camo.qiitausercontent.com/6e713b616820563fe16c5c3d17bd6e42b87f912f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f33653430356332302d626335312d333063652d313032372d6363393762336539613662362e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F3e405c20-bc51-30ce-1027-cc97b3e9a6b6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a4cfd1a8bdc47306b72bac8e678a2909" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/3e405c20-bc51-30ce-1027-cc97b3e9a6b6.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F3e405c20-bc51-30ce-1027-cc97b3e9a6b6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=86eb7178161fad243f171670cc46eb14 1x" loading="lazy"></a></p>\n<h1 data-sourcepos="151:1-151:14">\n<span id="さいごに" class="fragment"></span><a href="#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB"><i class="fa fa-link"></i></a>さいごに</h1>\n<div data-sourcepos="153:1-155:3" class="note warn">\n<span class="fa fa-fw fa-exclamation-circle"></span><div>\n<p data-sourcepos="154:1-154:220">coverageはあくまでテストが通った率であり、これを100%にすればよいというわけではありませんが、1つの指標にはなると思います。良いテスト駆動開発ライフを～！</p>\n</div>\n</div>\n<h2 data-sourcepos="158:1-158:9">\n<span id="余談" class="fragment"></span><a href="#%E4%BD%99%E8%AB%87"><i class="fa fa-link"></i></a>余談</h2>\n<ul data-sourcepos="160:1-162:0">\n<li data-sourcepos="160:1-162:0">\n<code>src/coverage</code>に結果が出力されるので、それを<code>GitLab Pages</code>を使ってホスティングすることで、結果をWeb上から確認することができました。</li>\n</ul>\n<p data-sourcepos="163:1-163:122"><a href="https://camo.qiitausercontent.com/f915dbfbb62679304d60e7d315957f8c6582484c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f36396364353763662d373938342d626265312d643936342d3030663134363435613233612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F69cd57cf-7984-bbe1-d964-00f14645a23a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5468fc2de1b319f577005b34af61944f" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/69cd57cf-7984-bbe1-d964-00f14645a23a.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F69cd57cf-7984-bbe1-d964-00f14645a23a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b2582c015e586f96549d0e006b0e32b9 1x" loading="lazy"></a></p>\n',body:'# はじめに\n\nGitLabのCIを使ってVitestのテストを回してみたいなぁと思い、回したときのメモです。\n\n# 説明しないこと\n\n* GitLabとは？\n* CIとは？\n* Vitestの詳しい使い方(各種メソッド等)\n\n# Vitestとは\n\n- 私が説明するよりも良い記事があったのでこちらから抜粋させていただきます。\n\nhttps://reffect.co.jp/html/vitest#:~:text=Vitest%E3%81%AFVite%E7%92%B0%E5%A2%83%E3%81%A7,%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E7%89%B9%E5%BE%B4%E3%81%A7%E3%81%99%E3%80%82\n\n\n:::note info \nVitestはVite環境で利用することができるUnit Testingのフレームワークです。Viteを利用していためViteと同様に高速で動き、TypeScriptなども追加設定なしで利用できることが特徴です。\n:::\n\n# SvelteKitアプリケーション構築\n\n```bash\n$ npm create svelte@latest my-app\n$ cd my-app\n$ npm install\n$ npm run dev -- --open\n```\n[公式](https://kit.svelte.jp/)\n\n# Vitest実装\n\n## 1. インストール\n\n```bash\nnpm install --save-dev vitest jsdom @testing-library/svelte\n```\n\n## 2. vite.config.ts修正\n\n```typescript:vite.config.ts\nexport default defineConfig({\n  ...\n  test: {                  // 追加\n    environment: \'jsdom\'   // 追加\n  }                        // 追加\n})\n```\n\n## 3. 実行コマンド追加\n\n```json:package.json(抜粋)\n{\n  "scripts": {\n    "test": "vitest",   // 追加\n  },\n}\n```\n\n## 4. テストコード追加\n\nテストコードを置くディレクトリには好みがあると思いますのでご自由に設定ください。\n\n私は↓のようにsrc以下に`__test__/index.test.ts`を作成しました。\n\n```\n.\n├── src\n│   ├── __tests__\n│   │   ├── index.test.ts\n```\n\n動作確認のため`1 + 1 = 2`を試してみます\n\n```typescript:index.test.ts\nimport { test, expect } from \'vitest\'\n\ntest(\'1 + 1 は 2 であること\', () => {\n  expect(1 + 1).toBe(2);\n});\n```\n\n詳しくは[公式ドキュメント](https://vitest.dev/)を見てください。\n\n## 5. 実行\n\n```bash\n$ npm run test\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/50229cf4-9c47-7aa8-c146-c08b374bfeb7.png)\n**watchモードでテストが動きます**\n\n# Vitest Coverageモード起動\n\n## 1. インストール\n\n```bash\nnpm i -D @vitest/coverage-c8\n```\n\n## 2. 実行コマンド追加\n\n```json:package.json(抜粋)\n{\n  "scripts": {\n    "coverage": "vitest run --coverage",   // 追加\n  },\n}\n```\n\n## 3. 実行\n\n```bash\n$ npm run coverage\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/48b3f38d-80e1-7d9e-16a8-c71c63d8f72c.png)\n\n**coverageの計測ができました。**\nどのコンポーネント、ファイルも参照していないので当然coverageは0%ですね\n\n# GitLab CIでテストを実行する\n\n## 1. .gitlab-ci.yml記入\n\n```yaml:gitlab-ci.yml\ndefault:\n  image: node:18.14-alpine3.16\n\nbefore_script:\n  - npm install\n\nstages:\n  - test\n\ntest:\n  stage: test\n  script:\n    - npm run coverage\n```\n\n## 2. pushしてみる\n\npushすることでpipelineが動き出し、ちゃんと動きました\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/3e405c20-bc51-30ce-1027-cc97b3e9a6b6.png)\n\n\n# さいごに\n\n:::note warn\ncoverageはあくまでテストが通った率であり、これを100%にすればよいというわけではありませんが、1つの指標にはなると思います。良いテスト駆動開発ライフを～！\n:::\n\n\n## 余談\n\n- `src/coverage`に結果が出力されるので、それを`GitLab Pages`を使ってホスティングすることで、結果をWeb上から確認することができました。\n\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/69cd57cf-7984-bbe1-d964-00f14645a23a.png)\n',coediting:!1,comments_count:0,created_at:"2023-03-29T19:01:46+09:00",group:null,id:"d38ae555319495ea41d9",likes_count:2,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"CI",versions:[]},{name:"GitLab",versions:[]},{name:"SvelteKit",versions:[]},{name:"Vitest",versions:[]}],title:"GitLab CIでVitestを実行し、coverageを計測する",updated_at:"2023-04-03T16:36:53+09:00",url:"https://qiita.com/maaaashi/items/d38ae555319495ea41d9",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:456,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:97">最近ちゃんと<code>TypeScript</code>について勉強し直しまして、<br>\n<code>Class</code>を今までちゃんと使ってこなかったなあと思い、記事にしました。</p>\n<p data-sourcepos="6:1-7:140">同じような方の参考になれば幸いです。<br>\n<code>Class</code>の説明をする前に<strong>オブジェクト指向</strong>について理解しておく必要があるので、簡単に説明します。</p>\n<h2 data-sourcepos="9:1-9:33">\n<span id="オブジェクト指向とは" class="fragment"></span><a href="#%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>オブジェクト指向とは</h2>\n<p data-sourcepos="11:1-11:41">話題の<code>BingAI</code>にお願いしました</p>\n<div data-sourcepos="13:1-19:3" class="note info">\n<span class="fa fa-fw fa-check-circle"></span><div>\n<p data-sourcepos="14:1-14:291">オブジェクト指向とは、プログラミングの考え方の一つで、現実世界に存在するものを「オブジェクト」として扱い、その特徴や機能を定義することです。オブジェクト指向には、以下のようなメリットがあります。</p>\n<ul data-sourcepos="16:1-18:134">\n<li data-sourcepos="16:1-16:122">オブジェクトを再利用しやすくすることで、開発効率や保守性を高めることができます。</li>\n<li data-sourcepos="17:1-17:110">オブジェクト同士の関係を明確にすることで、設計や理解がしやすくなります。</li>\n<li data-sourcepos="18:1-18:134">オブジェクトの内部構造や動作を隠蔽することで、安全性や信頼性を向上させることができます。</li>\n</ul>\n</div>\n</div>\n<p data-sourcepos="21:1-21:78">わかりやすいですね。ここで具体例も紹介しておきます。</p>\n<h3 data-sourcepos="23:1-23:13">\n<span id="具体例" class="fragment"></span><a href="#%E5%85%B7%E4%BD%93%E4%BE%8B"><i class="fa fa-link"></i></a>具体例</h3>\n<p data-sourcepos="25:1-25:48">とある商品を題材に考えてみます。</p>\n<p data-sourcepos="27:1-27:83">その商品には以下のプロパティ(特徴・性質)があるとします。</p>\n<ol data-sourcepos="28:1-32:0">\n<li data-sourcepos="28:1-28:21">String型の名前</li>\n<li data-sourcepos="29:1-29:21">number型の価格</li>\n<li data-sourcepos="30:1-30:45">名前を変更することができる。</li>\n<li data-sourcepos="31:1-32:0">商品をカートに入れることができる。</li>\n</ol>\n<p data-sourcepos="33:1-33:106">この場合、TypeScriptでは以下のようにオブジェクトを定義することができます。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="35:1-53:3"><div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">goods_A</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">A商品</span><span class="dl">\'</span><span class="p">,</span>          <span class="c1">// 名前</span>\n  <span class="na">price</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>            <span class="c1">// 価格</span>\n  <span class="nf">rename</span><span class="p">(</span><span class="na">n</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>    <span class="c1">// 名前変更</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">n</span><span class="p">;</span>\n  <span class="p">},</span>\n  <span class="nf">addToCart</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>          <span class="c1">// カートに入れる</span>\n    <span class="nx">cart</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="nx">goods_A</span><span class="p">.</span><span class="nx">name</span>\n<span class="c1">// \'A商品\'</span>\n\n<span class="nx">goods_A</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="dl">\'</span><span class="s1">a商品</span><span class="dl">\'</span><span class="p">)</span>\n<span class="nx">goods_A</span><span class="p">.</span><span class="nx">name</span>\n<span class="c1">// \'a商品\'</span>\n</code></pre></div></div>\n<p data-sourcepos="55:1-56:160">このようにオブジェクトとして定義し、そのプロパティに「名前」や「価格」や、<br>\n「名前変更」や「カートに入れる」といった機能を定義していくプログラミング手法を<strong>オブジェクト指向</strong>と言います</p>\n<h1 data-sourcepos="58:1-58:22">\n<span id="1-classについて" class="fragment"></span><a href="#1-class%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><i class="fa fa-link"></i></a>1. classについて</h1>\n<p data-sourcepos="60:1-60:42">先ほどの例から考えてみます。</p>\n<p data-sourcepos="62:1-62:43">以下のように商品Aがあります。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="64:1-75:3">\n<div class="code-lang"><span class="bold">typescript</span></div>\n<div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">goods_A</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">A商品</span><span class="dl">\'</span><span class="p">,</span>\n  <span class="na">price</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>\n  <span class="nf">rename</span><span class="p">(</span><span class="na">n</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">n</span><span class="p">;</span>\n  <span class="p">},</span>\n  <span class="nf">addToCart</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>\n    <span class="nx">cart</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="77:1-77:33">商品が複数件ある場合、</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="79:1-95:3">\n<div class="code-lang"><span class="bold">typescript</span></div>\n<div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">goods_B</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">B商品</span><span class="dl">\'</span><span class="p">,</span>\n  <span class="na">price</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>\n  <span class="nf">rename</span><span class="p">(</span><span class="na">n</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">n</span><span class="p">;</span>\n  <span class="p">},</span>\n  <span class="nf">addToCart</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>\n    <span class="nx">cart</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="kd">const</span> <span class="nx">goods_C</span> <span class="o">=</span> <span class="p">{</span>\n<span class="err">・</span>\n<span class="err">。</span>\n<span class="err">・</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="97:1-98:42">全ての商品で同じ動きをさせるためには作成分のオブジェクトを定義する必要が出てきますが、<br>\nこんなことはしてられません。</p>\n<p data-sourcepos="100:1-101:54">オブジェクトの設計書みたいなものがあれば、それを元に増やすことができそうです。<br>\nそのオブジェクトの設計書が<strong>Class</strong>です</p>\n<p data-sourcepos="103:1-103:109">先ほどの商品の設計書を<code>Class</code>を使い定義し、商品のオブジェクトを生成します。</p>\n<div data-sourcepos="105:1-107:3" class="note info">\n<span class="fa fa-fw fa-check-circle"></span><div>\n<p data-sourcepos="106:1-106:99">ちなみに、クラスから作成したオブジェクトをインスタンスと言います。</p>\n</div>\n</div>\n<p data-sourcepos="109:1-109:76"><strong>クラスからオブジェクト生成し、解読していきます。</strong></p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="111:1-135:3">\n<div class="code-lang"><span class="bold">typescript</span></div>\n<div class="highlight"><pre><code><span class="c1">// クラス定義</span>\n<span class="kd">class</span> <span class="nc">Goods</span> <span class="p">{</span>\n  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>\n  <span class="nl">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>\n\n  <span class="nf">constructor</span><span class="p">(</span><span class="nx">n</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">p</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">n</span><span class="p">;</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">=</span> <span class="nx">p</span><span class="p">;</span>\n  <span class="p">};</span>\n\n  <span class="nf">rename</span><span class="p">(</span><span class="nx">n</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">n</span>\n  <span class="p">};</span>\n\n  <span class="nf">addToCart</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>\n    <span class="nx">cart</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>\n  <span class="p">};</span>\n<span class="p">}</span>\n\n<span class="c1">// インスタンス生成</span>\n<span class="kd">const</span> <span class="nx">goods_A</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Goods</span><span class="p">(</span><span class="dl">\'</span><span class="s1">商品A</span><span class="dl">\'</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>\n<span class="nx">goods_A</span><span class="p">.</span><span class="nx">name</span>\n<span class="c1">// \'A商品\'</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos="137:1-137:28">\n<span id="2-constructor関数とは" class="fragment"></span><a href="#2-constructor%E9%96%A2%E6%95%B0%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>2. constructor関数とは</h1>\n<p data-sourcepos="139:1-140:93"><strong>constructor関数</strong>とは、クラスで作成されたオブジェクトの初期化のためのメソッドです。<br>\n<strong>constructor関数</strong>は、クラスが呼び出された際に最初に実行されます。</p>\n<p data-sourcepos="142:1-142:69">つまり、<code>new Hoge()</code>の際に実行されるメソッドです。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="144:1-152:3">\n<div class="code-lang"><span class="bold">class</span></div>\n<div class="highlight"><pre><code>  <span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>\n  <span class="nl">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>\n\n  <span class="nf">constructor</span><span class="p">(</span><span class="nx">n</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">p</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">n</span><span class="p">;</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">=</span> <span class="nx">p</span><span class="p">;</span>\n  <span class="p">};</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="154:1-157:96">先ほど作成したクラスを見ると、<br>\n<code>name</code>を<code>string</code>型で定義、<br>\n<code>price</code>を<code>number</code>で定義し、<br>\n<strong>constructor関数</strong>で引数で受け取った値を初期値として格納しています。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="159:1-161:3"><div class="highlight"><pre><code><span class="k">new</span> <span class="nc">Goods</span><span class="p">(</span><span class="dl">\'</span><span class="s1">商品A</span><span class="dl">\'</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>\n</code></pre></div></div>\n<p data-sourcepos="163:1-164:98">このようにオブジェクトを生成します。<br>\n試しに引数に渡している値を変更し、<code>name</code>に<code>number</code>型をを入れてみます。</p>\n<p data-sourcepos="166:1-166:164"><a href="https://camo.qiitausercontent.com/77801481412646e2fafeed0d5a8b3d773d8eac1b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f62343463666336662d313737372d653865332d616236622d6361303462663239623566612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fb44cfc6f-1777-e8e3-ab6b-ca04bf29b5fa.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=15928611bbc168fdad1cf5d60ad1ee9d" alt="スクリーンショット 2023-03-10 21.17.03.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/b44cfc6f-1777-e8e3-ab6b-ca04bf29b5fa.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fb44cfc6f-1777-e8e3-ab6b-ca04bf29b5fa.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=10b801662bc2d64eea5fb33f4d63bb9a 1x" loading="lazy"></a></p>\n<p data-sourcepos="168:1-170:84">このようにエラーになります。<br>\n<strong>constructor</strong>関数の引数の型定義<code>(n: string, p: number)</code>が、<br>\nインスタンス化する時に作用していることが確認できますね。</p>\n<h1 data-sourcepos="172:1-172:49">\n<span id="3-typescriptのみ-アクセス修飾子" class="fragment"></span><a href="#3-typescript%E3%81%AE%E3%81%BF-%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E4%BF%AE%E9%A3%BE%E5%AD%90"><i class="fa fa-link"></i></a>3. 【TypeScriptのみ】 アクセス修飾子</h1>\n<p data-sourcepos="174:1-174:208">TypeScriptでは、プロパティのアクセシビリティを制御するため、クラスのプロパティに対してアクセス修飾子<code>public</code> <code>private</code> <code>protected</code>を使うことができます。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="176:1-183:3">\n<div class="code-lang"><span class="bold">typescript</span></div>\n<div class="highlight"><pre><code><span class="kd">class</span> <span class="nc">Goods</span> <span class="p">{</span>\n  <span class="nl">owner</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span> <span class="c1">// 自動的にpublicになります。</span>\n  <span class="k">private</span> <span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>\n  <span class="k">public</span> <span class="nx">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>\n  <span class="k">protected</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n<ul data-sourcepos="185:1-192:0">\n<li data-sourcepos="185:1-187:45">public\n<ul data-sourcepos="186:5-187:45">\n<li data-sourcepos="186:5-186:81">デフォルトはこれ。何も記載がないとpublicになります。</li>\n<li data-sourcepos="187:5-187:45">どこからでもアクセスできる</li>\n</ul>\n</li>\n<li data-sourcepos="188:1-189:57">private\n<ul data-sourcepos="189:5-189:57">\n<li data-sourcepos="189:5-189:57">同じクラス内からのみアクセスできる</li>\n</ul>\n</li>\n<li data-sourcepos="190:1-192:0">protected\n<ul data-sourcepos="191:5-192:0">\n<li data-sourcepos="191:5-192:0">同じクラスとサブクラス内からのみアクセスできる</li>\n</ul>\n</li>\n</ul>\n<h2 data-sourcepos="193:1-193:24">\n<span id="なぜ必要なのか" class="fragment"></span><a href="#%E3%81%AA%E3%81%9C%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%AE%E3%81%8B"><i class="fa fa-link"></i></a>なぜ必要なのか</h2>\n<p data-sourcepos="195:1-195:70"><strong>不用意に値を変更できないようにするため</strong>です。</p>\n<p data-sourcepos="197:1-197:30">次の例で説明します。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="199:1-217:3">\n<div class="code-lang"><span class="bold">typescript</span></div>\n<div class="highlight"><pre><code><span class="kd">class</span> <span class="nc">Goods</span> <span class="p">{</span>\n  <span class="k">public</span> <span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>\n\n  <span class="nf">constructor</span><span class="p">(</span><span class="nx">n</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nf">if </span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">n</span><span class="p">;</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">100文字以上</span><span class="dl">\'</span>\n    <span class="p">}</span>\n  <span class="p">};</span>\n\n  <span class="nf">rename</span><span class="p">(</span><span class="nx">n</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>\n    <span class="nf">if </span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">n</span>\n    <span class="p">}</span>\n  <span class="p">};</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="219:1-219:114">このように100文字以下のバリデーションがついた<code>name</code>プロパティがあったとします。</p>\n<h3 data-sourcepos="221:1-221:45">\n<span id="アクセス修飾子がpublicの場合" class="fragment"></span><a href="#%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E4%BF%AE%E9%A3%BE%E5%AD%90%E3%81%8Cpublic%E3%81%AE%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a>アクセス修飾子が<code>public</code>の場合</h3>\n<p data-sourcepos="223:1-224:113"><code>public</code>のプロパティはどこからでもアクセスできるため、<br>\n以下のように、<code>rename</code>メソッドを通しても通さなくても値を変更できてしまいます。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="226:1-234:3">\n<div class="code-lang"><span class="bold">typescript</span></div>\n<div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">goods_A</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Goods</span><span class="p">(</span><span class="dl">\'</span><span class="s1">商品A</span><span class="dl">\'</span><span class="p">)</span>\n\n<span class="c1">// 1. renameメソッドを通す</span>\n<span class="nx">goods_A</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="dl">\'</span><span class="s1">hoge</span><span class="dl">\'</span><span class="p">)</span>\n\n<span class="c1">// 2. 直接値を変更</span>\n<span class="nx">goods_A</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">fuga</span><span class="dl">\'</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="236:1-237:87"><code>rename</code>メソッド内では100文字のバリデーションがかかるのに対し、<br>\n直接変更する場合はバリデーションをかけることができません。</p>\n<h3 data-sourcepos="239:1-239:46">\n<span id="アクセス修飾子がprivateの場合" class="fragment"></span><a href="#%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E4%BF%AE%E9%A3%BE%E5%AD%90%E3%81%8Cprivate%E3%81%AE%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a>アクセス修飾子が<code>private</code>の場合</h3>\n<p data-sourcepos="241:1-242:48"><code>private</code>のプロパティは同じクラス内からのみアクセスできるため<br>\n以下のように直接指定はできません</p>\n<p data-sourcepos="244:1-244:164"><a href="https://camo.qiitausercontent.com/10d19d8bb5a22a93cc997e24354a00ec9ab22fe7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f30356232613164352d316336642d323038332d373737312d3035383561643765663530312e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F05b2a1d5-1c6d-2083-7771-0585ad7ef501.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=38f98bc89a58b17a8faec36818096760" alt="スクリーンショット 2023-03-11 23.50.22.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/05b2a1d5-1c6d-2083-7771-0585ad7ef501.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F05b2a1d5-1c6d-2083-7771-0585ad7ef501.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9bce43f89dd82af379883a7be0854191 1x" loading="lazy"></a></p>\n<p data-sourcepos="246:1-246:148">この例で<strong>不用意に値を変更しないように</strong>アクセスプロパティを適切につける意味が理解できたと思います。</p>\n<h1 data-sourcepos="249:1-249:60">\n<span id="4-typescriptのみ-constructor関数の省略記法" class="fragment"></span><a href="#4-typescript%E3%81%AE%E3%81%BF-constructor%E9%96%A2%E6%95%B0%E3%81%AE%E7%9C%81%E7%95%A5%E8%A8%98%E6%B3%95"><i class="fa fa-link"></i></a>4. 【TypeScriptのみ】 constructor関数の省略記法</h1>\n<p data-sourcepos="251:1-251:57">さて、次のコードを見て何を思いますか？</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="253:1-267:3">\n<div class="code-lang"><span class="bold">typescript</span></div>\n<div class="highlight"><pre><code><span class="kd">class</span> <span class="nc">Goods</span> <span class="p">{</span>\n  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>\n  <span class="k">private</span> <span class="nx">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>\n  <span class="k">private</span> <span class="nx">store</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>\n  <span class="nl">type</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>\n\n  <span class="nf">constructor</span><span class="p">(</span><span class="nx">n</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">p</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">s</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">t</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">n</span><span class="p">;</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">=</span> <span class="nx">p</span><span class="p">;</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">store</span> <span class="o">=</span> <span class="nx">s</span><span class="p">;</span>\n    <span class="k">this</span><span class="p">.</span><span class="kd">type</span> <span class="o">=</span> <span class="nx">t</span><span class="p">;</span>\n  <span class="p">};</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="269:1-271:24">私であれば<strong>冗長</strong>だなぁ...と思います。<br>\nTypeScriptであればこの冗長を解決できます。<br>\nそれがこちらです</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="273:1-282:3">\n<div class="code-lang"><span class="bold">typescript</span></div>\n<div class="highlight"><pre><code><span class="kd">class</span> <span class="nc">Goods</span> <span class="p">{</span>\n  <span class="nf">constructor</span><span class="p">(</span>\n    <span class="k">public</span> <span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>\n    <span class="k">private</span> <span class="nx">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>\n    <span class="k">private</span> <span class="nx">store</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>\n    <span class="k">public</span> <span class="kd">type</span><span class="p">:</span> <span class="kr">string</span>\n  <span class="p">){};</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="284:1-284:78">このように初期化処理をかなりシンプルに記述できます。</p>\n<p data-sourcepos="286:1-286:145"><code>constructor</code>関数の引数にアクセス修飾子とプロパティ名を書くだけで自動で初期化処理まで行ってくれます。</p>\n<div data-sourcepos="288:1-291:3" class="note warn">\n<span class="fa fa-fw fa-exclamation-circle"></span><div>\n<p data-sourcepos="289:1-290:60">アクセス修飾子は必ずつける必要があります。<br>\npublicであっても省略することはできません。</p>\n</div>\n</div>\n<p data-sourcepos="293:1-293:90">ちなみにこのコードを<code>JavaScript</code>にコンパイルするとこうなります。</p>\n<div class="code-frame" data-lang="javascript" data-sourcepos="295:1-304:3">\n<div class="code-lang"><span class="bold">javascript</span></div>\n<div class="highlight"><pre><code><span class="kd">class</span> <span class="nc">Goods</span> <span class="p">{</span>\n  <span class="nf">constructor</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">p</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">n</span><span class="p">;</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">=</span> <span class="nx">p</span><span class="p">;</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">store</span> <span class="o">=</span> <span class="nx">s</span><span class="p">;</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">t</span><span class="p">;</span>\n  <span class="p">};</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="306:1-306:122">アクセス修飾子がなくなり、全て<code>constructor</code>関数でthisの中に格納する形になっていますね。</p>\n<h1 data-sourcepos="308:1-308:14">\n<span id="5-まとめ" class="fragment"></span><a href="#5-%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>5. まとめ</h1>\n<div data-sourcepos="310:1-316:3" class="note info">\n<span class="fa fa-fw fa-check-circle"></span><div>\n<ol data-sourcepos="311:1-315:85">\n<li data-sourcepos="311:1-311:159">オブジェクト指向とは、現実世界に存在するものを「オブジェクト」として扱い、その特徴や機能を定義すること。</li>\n<li data-sourcepos="312:1-312:68">classとは、オブジェクトの設計図のようなもの。</li>\n<li data-sourcepos="313:1-313:113">constructor関数とは、クラスで作成されたオブジェクトの初期化のためのメソッド。</li>\n<li data-sourcepos="314:1-314:238">TypeScriptでは、不用意に値を変更できないようにするため、クラスのプロパティに対してアクセス修飾子<code>public</code> <code>private</code> <code>protected</code>を使い、アクセスの制限をかけることができる。</li>\n<li data-sourcepos="315:1-315:85">TypeScriptでは、初期化処理を簡潔にかける省略記法が存在する</li>\n</ol>\n</div>\n</div>\n<p data-sourcepos="318:1-318:232">他にも<code>interface</code>を使ってclassを実装する方法だったり、継承だったり、説明できることはたくさんありますが、今回はここまでの基本的な使い方までとさせていただきます。</p>\n<p data-sourcepos="320:1-320:63">続きについてはまた今度書きたいと思います。</p>\n',body:"# はじめに\n\n最近ちゃんと`TypeScript`について勉強し直しまして、\n`Class`を今までちゃんと使ってこなかったなあと思い、記事にしました。\n\n同じような方の参考になれば幸いです。\n`Class`の説明をする前に**オブジェクト指向**について理解しておく必要があるので、簡単に説明します。\n\n## オブジェクト指向とは\n\n話題の`BingAI`にお願いしました\n\n:::note info\nオブジェクト指向とは、プログラミングの考え方の一つで、現実世界に存在するものを「オブジェクト」として扱い、その特徴や機能を定義することです。オブジェクト指向には、以下のようなメリットがあります。\n\n* オブジェクトを再利用しやすくすることで、開発効率や保守性を高めることができます。\n* オブジェクト同士の関係を明確にすることで、設計や理解がしやすくなります。\n* オブジェクトの内部構造や動作を隠蔽することで、安全性や信頼性を向上させることができます。\n:::\n\nわかりやすいですね。ここで具体例も紹介しておきます。\n\n### 具体例\n\nとある商品を題材に考えてみます。\n\nその商品には以下のプロパティ(特徴・性質)があるとします。\n1. String型の名前\n1. number型の価格\n1. 名前を変更することができる。\n1. 商品をカートに入れることができる。\n\nこの場合、TypeScriptでは以下のようにオブジェクトを定義することができます。\n\n```typescript\nconst goods_A = {\n  name: 'A商品',          // 名前\n  price: 100,            // 価格\n  rename(n: string): void {    // 名前変更\n    this.name = n;\n  },\n  addToCart(): void {          // カートに入れる\n    cart.push(this.name)\n  }\n}\n\ngoods_A.name\n// 'A商品'\n\ngoods_A.rename('a商品')\ngoods_A.name\n// 'a商品'\n```\n\nこのようにオブジェクトとして定義し、そのプロパティに「名前」や「価格」や、\n「名前変更」や「カートに入れる」といった機能を定義していくプログラミング手法を**オブジェクト指向**と言います\n\n# 1. classについて\n\n先ほどの例から考えてみます。\n\n以下のように商品Aがあります。\n\n```typescript:typescript\nconst goods_A = {\n  name: 'A商品',\n  price: 100,\n  rename(n: string): void {\n    this.name = n;\n  },\n  addToCart(): void {\n    cart.push(this.name)\n  }\n}\n```\n\n商品が複数件ある場合、\n\n```typescript:typescript\nconst goods_B = {\n  name: 'B商品',\n  price: 100,\n  rename(n: string): void {\n    this.name = n;\n  },\n  addToCart(): void {\n    cart.push(this.name)\n  }\n}\n\nconst goods_C = {\n・\n。\n・\n```\n\n全ての商品で同じ動きをさせるためには作成分のオブジェクトを定義する必要が出てきますが、\nこんなことはしてられません。\n\nオブジェクトの設計書みたいなものがあれば、それを元に増やすことができそうです。\nそのオブジェクトの設計書が**Class**です\n\n先ほどの商品の設計書を`Class`を使い定義し、商品のオブジェクトを生成します。\n\n:::note info\nちなみに、クラスから作成したオブジェクトをインスタンスと言います。\n:::\n\n**クラスからオブジェクト生成し、解読していきます。**\n\n```typescript:typescript\n// クラス定義\nclass Goods {\n  name: string;\n  price: number;\n\n  constructor(n: string, p: number) {\n    this.name = n;\n    this.price = p;\n  };\n\n  rename(n: string): void {\n    this.name = n\n  };\n\n  addToCart(): void {\n    cart.push(this.name)\n  };\n}\n\n// インスタンス生成\nconst goods_A = new Goods('商品A', 100)\ngoods_A.name\n// 'A商品'\n```\n\n# 2. constructor関数とは\n\n**constructor関数**とは、クラスで作成されたオブジェクトの初期化のためのメソッドです。\n**constructor関数**は、クラスが呼び出された際に最初に実行されます。\n\nつまり、`new Hoge()`の際に実行されるメソッドです。\n\n```typescript:class\n  name: string;\n  price: number;\n\n  constructor(n: string, p: number) {\n    this.name = n;\n    this.price = p;\n  };\n```\n\n先ほど作成したクラスを見ると、\n`name`を`string`型で定義、\n`price`を`number`で定義し、\n**constructor関数**で引数で受け取った値を初期値として格納しています。\n\n```typescript\nnew Goods('商品A', 100)\n```\n\nこのようにオブジェクトを生成します。\n試しに引数に渡している値を変更し、`name`に`number`型をを入れてみます。\n\n![スクリーンショット 2023-03-10 21.17.03.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/b44cfc6f-1777-e8e3-ab6b-ca04bf29b5fa.png)\n\nこのようにエラーになります。\n**constructor**関数の引数の型定義`(n: string, p: number)`が、\nインスタンス化する時に作用していることが確認できますね。\n\n# 3. 【TypeScriptのみ】 アクセス修飾子\n\nTypeScriptでは、プロパティのアクセシビリティを制御するため、クラスのプロパティに対してアクセス修飾子`public` `private` `protected`を使うことができます。\n\n```typescript:typescript\nclass Goods {\n  owner: string; // 自動的にpublicになります。\n  private name: string;\n  public price: number;\n  protected id: number;\n}\n```\n\n* public\n    * デフォルトはこれ。何も記載がないとpublicになります。\n    * どこからでもアクセスできる\n* private\n    * 同じクラス内からのみアクセスできる\n* protected\n    * 同じクラスとサブクラス内からのみアクセスできる\n\n## なぜ必要なのか\n\n**不用意に値を変更できないようにするため**です。\n\n次の例で説明します。\n\n```typescript:typescript\nclass Goods {\n  public name: string;\n\n  constructor(n: string) {\n    if (n.length < 100) {\n      this.name = n;\n    } else {\n      this.name = '100文字以上'\n    }\n  };\n\n  rename(n: string): void {\n    if (n.length < 100) {\n      this.name = n\n    }\n  };\n}\n```\n\nこのように100文字以下のバリデーションがついた`name`プロパティがあったとします。\n\n### アクセス修飾子が`public`の場合\n\n`public`のプロパティはどこからでもアクセスできるため、\n以下のように、`rename`メソッドを通しても通さなくても値を変更できてしまいます。\n\n```typescript:typescript\nconst goods_A = new Goods('商品A')\n\n// 1. renameメソッドを通す\ngoods_A.rename('hoge')\n\n// 2. 直接値を変更\ngoods_A.name = 'fuga'\n```\n\n`rename`メソッド内では100文字のバリデーションがかかるのに対し、\n直接変更する場合はバリデーションをかけることができません。\n\n### アクセス修飾子が`private`の場合\n\n`private`のプロパティは同じクラス内からのみアクセスできるため\n以下のように直接指定はできません\n\n![スクリーンショット 2023-03-11 23.50.22.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/05b2a1d5-1c6d-2083-7771-0585ad7ef501.png)\n\nこの例で**不用意に値を変更しないように**アクセスプロパティを適切につける意味が理解できたと思います。\n\n\n# 4. 【TypeScriptのみ】 constructor関数の省略記法\n\nさて、次のコードを見て何を思いますか？\n\n```typescript:typescript\nclass Goods {\n  name: string;\n  private price: number;\n  private store: string;\n  type: string;\n\n  constructor(n: string, p: number, s: string, t: string) {\n    this.name = n;\n    this.price = p;\n    this.store = s;\n    this.type = t;\n  };\n}\n```\n\n私であれば**冗長**だなぁ...と思います。\nTypeScriptであればこの冗長を解決できます。\nそれがこちらです\n\n```typescript:typescript\nclass Goods {\n  constructor(\n    public name: string,\n    private price: number,\n    private store: string,\n    public type: string\n  ){};\n}\n```\n\nこのように初期化処理をかなりシンプルに記述できます。\n\n`constructor`関数の引数にアクセス修飾子とプロパティ名を書くだけで自動で初期化処理まで行ってくれます。\n\n:::note warn\nアクセス修飾子は必ずつける必要があります。\npublicであっても省略することはできません。\n:::\n\nちなみにこのコードを`JavaScript`にコンパイルするとこうなります。\n\n```javascript:javascript\nclass Goods {\n  constructor(n, p, s, t) {\n    this.name = n;\n    this.price = p;\n    this.store = s;\n    this.type = t;\n  };\n}\n```\n\nアクセス修飾子がなくなり、全て`constructor`関数でthisの中に格納する形になっていますね。\n\n# 5. まとめ\n\n:::note info\n1. オブジェクト指向とは、現実世界に存在するものを「オブジェクト」として扱い、その特徴や機能を定義すること。\n1. classとは、オブジェクトの設計図のようなもの。\n1. constructor関数とは、クラスで作成されたオブジェクトの初期化のためのメソッド。\n1. TypeScriptでは、不用意に値を変更できないようにするため、クラスのプロパティに対してアクセス修飾子`public` `private` `protected`を使い、アクセスの制限をかけることができる。\n1. TypeScriptでは、初期化処理を簡潔にかける省略記法が存在する\n:::\n\n他にも`interface`を使ってclassを実装する方法だったり、継承だったり、説明できることはたくさんありますが、今回はここまでの基本的な使い方までとさせていただきます。\n\n続きについてはまた今度書きたいと思います。\n",coediting:!1,comments_count:2,created_at:"2023-03-12T00:13:42+09:00",group:null,id:"d668d3b82e7f65863005",likes_count:2,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"TypeScript",versions:[]}],title:"【TypeScript | JavaScript】Classまとめ",updated_at:"2023-03-12T09:55:41+09:00",url:"https://qiita.com/maaaashi/items/d668d3b82e7f65863005",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:801,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-5:132">小学生の頃から嫌いなことがあります。<br>\nそれは、プリントの「感想」の欄です.<br>\n自分の思いを文章にするのが苦手で、「箇条書きでよくないか、、、？」と常々思ってきました。</p>\n<p data-sourcepos="7:1-7:48">読書感想文なんて一番苦手でした。</p>\n<a href="https://camo.qiitausercontent.com/69988ece921f189fb53e0edda4db8d60aee4c7d6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f63663737633163362d316137352d393536382d633865372d3761323633376336613938632e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fcf77c1c6-1a75-9568-c8e7-7a2637c6a98c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f9ac1bcf52ac2d41a9612816ee2ceb0e" width="200px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/cf77c1c6-1a75-9568-c8e7-7a2637c6a98c.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fcf77c1c6-1a75-9568-c8e7-7a2637c6a98c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=dbdc4c96facc519ce6c9e09d4fb5548b 1x" loading="lazy"></a>\n<p data-sourcepos="11:1-13:24">そんな私がOpenAI社のGPT-3を利用して<br>\n【感想文ジェネレーター】<br>\nを作成しました。</p>\n<p data-sourcepos="15:1-15:30"><iframe id="qiita-embed-content__a8ed37c38bf2664caf692bff4a293336" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__a8ed37c38bf2664caf692bff4a293336" data-content="https%3A%2F%2Fopinion-ai.vercel.app%2F" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<p data-sourcepos="17:1-18:81">無料枠で作成したため、無料枠が尽きると動かなくなりますので、<br>\n突然サービス終了する可能性があります。ご容赦ください。</p>\n<p data-sourcepos="20:1-20:105"><font color="red">(特にCSSには)改善の余地があります。ちょっとずつ直します</font></p>\n<h1 data-sourcepos="22:1-22:8">\n<span id="概要" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>概要</h1>\n<p data-sourcepos="24:1-24:53">(現在の画面と異なる可能性があります)</p>\n<ol data-sourcepos="26:1-48:0">\n<li data-sourcepos="26:1-29:0">\n<p data-sourcepos="26:4-26:76"><a href="https://opinion-ai.vercel.app/" rel="nofollow noopener" target="_blank">感想文ジェネレーター</a>を開く</p>\n <a href="https://camo.qiitausercontent.com/9f3edd525f3ced285b62b2959dcc05aca59ab31c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f32313039383731312d666362312d393161352d383364632d3834363533333065363961302e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F21098711-fcb1-91a5-83dc-8465330e69a0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=368d5cf146fb0cbf6576a9f3f3e2135c" width="400px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/21098711-fcb1-91a5-83dc-8465330e69a0.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F21098711-fcb1-91a5-83dc-8465330e69a0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=904496cb8ce72756584d1c41b3073a98 1x" loading="lazy"></a>\n</li>\n<li data-sourcepos="30:1-41:0">\n<p data-sourcepos="30:4-30:27">必要な項目を入力</p>\n <a href="https://camo.qiitausercontent.com/7f6e49183bc763e4ed11339b3d08c687f903dec4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f30313230643266322d663939652d666333342d623135392d3432653235396661633232662e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0120d2f2-f99e-fc34-b159-42e259fac22f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=76e00767467da66b986206e4134a06ff" width="400px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0120d2f2-f99e-fc34-b159-42e259fac22f.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0120d2f2-f99e-fc34-b159-42e259fac22f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9feb0542b501c4e4d3db15b427a1edde 1x" loading="lazy"></a>\n<ul data-sourcepos="34:5-41:0">\n<li data-sourcepos="34:5-34:11">例)</li>\n<li data-sourcepos="35:5-36:35">何について\n<ul data-sourcepos="36:9-36:35">\n<li data-sourcepos="36:9-36:35">TypeScript初学者研修</li>\n</ul>\n</li>\n<li data-sourcepos="37:5-38:26">職業\n<ul data-sourcepos="38:9-38:26">\n<li data-sourcepos="38:9-38:26">会社員3年目</li>\n</ul>\n</li>\n<li data-sourcepos="39:5-41:0">何文字程度で作成するか\n<ul data-sourcepos="40:9-41:0">\n<li data-sourcepos="40:9-41:0">300</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos="42:1-48:0">\n<p data-sourcepos="42:4-42:9">生成</p>\n <a href="https://camo.qiitausercontent.com/8e4a86461cb816e3a4e7edf4c0d5108cf6bdef83/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f36613131326333632d363032322d333530632d303431642d6464663161636235336462352e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F6a112c3c-6022-350c-041d-ddf1acb53db5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f1ede38ac9f557002deb87cc1d01100d" width="400px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/6a112c3c-6022-350c-041d-ddf1acb53db5.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F6a112c3c-6022-350c-041d-ddf1acb53db5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a65dc02d14babc056e3bc46503f068d0 1x" loading="lazy"></a>\n<p data-sourcepos="46:5-47:58">そこそこいい感じですね👍<br>\n私が作る文章よりもしっかりしています</p>\n</li>\n</ol>\n<h1 data-sourcepos="49:1-49:32">\n<span id="ざっくり技術スタック" class="fragment"></span><a href="#%E3%81%96%E3%81%A3%E3%81%8F%E3%82%8A%E6%8A%80%E8%A1%93%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF"><i class="fa fa-link"></i></a>ざっくり技術スタック</h1>\n<p data-sourcepos="51:1-51:134"><a href="https://camo.qiitausercontent.com/2ad6b5dbd62c67b2436f76f71baf4c457933ced6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f35356335613332322d373133652d366566352d653433632d3731666165626434333362612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F55c5a322-713e-6ef5-e43c-71faebd433ba.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8244cfd17d5893dc4958fc4a119528b7" alt="opinion-ai.drawio.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/55c5a322-713e-6ef5-e43c-71faebd433ba.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F55c5a322-713e-6ef5-e43c-71faebd433ba.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7fcf7e380db43335d328f5896ce77460 1x" loading="lazy"></a></p>\n<h1 data-sourcepos="53:1-53:20">\n<span id="ざっくり構成" class="fragment"></span><a href="#%E3%81%96%E3%81%A3%E3%81%8F%E3%82%8A%E6%A7%8B%E6%88%90"><i class="fa fa-link"></i></a>ざっくり構成</h1>\n<p data-sourcepos="55:1-55:130"><a href="https://camo.qiitausercontent.com/450885bda02781405f2b0fb033a6108d525bcb7c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f34663033353961652d353330652d356531622d653038322d6565356263316632636563382e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4f0359ae-530e-5e1b-e082-ee5bc1f2cec8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7b57e8ebee64b6b0fd05dbb5cf9c6188" alt="構成.drawio.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4f0359ae-530e-5e1b-e082-ee5bc1f2cec8.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4f0359ae-530e-5e1b-e082-ee5bc1f2cec8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=33fc7c728b0b567032116cbea35e74e1 1x" loading="lazy"></a></p>\n<p data-sourcepos="57:1-57:36">ざっくり解説してみると、</p>\n<h2 data-sourcepos="59:1-59:12">\n<span id="利用者" class="fragment"></span><a href="#%E5%88%A9%E7%94%A8%E8%80%85"><i class="fa fa-link"></i></a>利用者</h2>\n<ol data-sourcepos="61:1-66:0">\n<li data-sourcepos="61:1-61:90">ブラウザで必要な情報を入力し、回答生成のリクエストを送る。</li>\n<li data-sourcepos="62:1-62:74">\n<code>API Gateway</code>を通して<code>step functions</code>へ通じ処理が始まる。</li>\n<li data-sourcepos="63:1-63:123">\n<code>API Gateway</code>のtimeoutは29sのため、<code>step functions</code>を使い、タイムアウトの問題を解決している。</li>\n<li data-sourcepos="64:1-64:105">非同期処理で、<code>OpenAI</code>からの回答が返ってきたら<code>Supabase</code>に回答を格納する。</li>\n<li data-sourcepos="65:1-66:0">ブラウザでは<code>Supabase</code>のリアルタイム機能を使い、特定のテーブルの<code>INSERT</code>イベントを検知し、回答を表示する。</li>\n</ol>\n<h2 data-sourcepos="67:1-67:9">\n<span id="開発" class="fragment"></span><a href="#%E9%96%8B%E7%99%BA"><i class="fa fa-link"></i></a>開発</h2>\n<ul data-sourcepos="69:1-71:0">\n<li data-sourcepos="69:1-69:171">フロントエンド側は<code>Vercel</code>でビルド・デプロイしているので、<code>github</code>の<code>main</code>ブランチの変更を検知してビルド・デプロイが走る</li>\n<li data-sourcepos="70:1-71:0">バックエンド側のは<code>ServerlessFramework</code>でデプロイしている。</li>\n</ul>\n<h1 data-sourcepos="72:1-72:22">\n<span id="openai回答生成" class="fragment"></span><a href="#openai%E5%9B%9E%E7%AD%94%E7%94%9F%E6%88%90"><i class="fa fa-link"></i></a><code>OpenAI</code>回答生成</h1>\n<h2 data-sourcepos="74:1-74:21">\n<span id="ソースコード" class="fragment"></span><a href="#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89"><i class="fa fa-link"></i></a>ソースコード</h2>\n<div class="code-frame" data-lang="typescript" data-sourcepos="76:1-96:3">\n<div class="code-lang"><span class="bold">handler.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Configuration</span><span class="p">,</span> <span class="nx">OpenAIApi</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">openai</span><span class="dl">\'</span>\n\n<span class="kd">const</span> <span class="nx">getAnswer</span> <span class="o">=</span> <span class="nf">async </span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Configuration</span><span class="p">({</span> <span class="na">apiKey</span><span class="p">:</span> <span class="o">**************</span> <span class="p">});</span>\n  <span class="kd">const</span> <span class="nx">openai</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OpenAIApi</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>\n  <span class="kd">const</span> <span class="nx">prompt</span> <span class="o">=</span> <span class="s2">`\n  質問: あなたの職業は</span><span class="p">${</span><span class="nx">event</span><span class="p">.</span><span class="nx">occupation</span><span class="p">}</span><span class="s2">です。</span><span class="p">${</span><span class="nx">event</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="s2">についての感想を以下を参考に</span><span class="p">${</span><span class="nx">event</span><span class="p">.</span><span class="nx">answer_length</span><span class="p">}</span><span class="s2">文字程度で作成してください。\n  </span><span class="p">${</span><span class="nx">event</span><span class="p">.</span><span class="nx">feature</span><span class="p">}</span><span class="s2">\n  回答: \n  `</span>\n  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">openai</span><span class="p">.</span><span class="nf">createCompletion</span><span class="p">(</span>\n    <span class="p">{</span>\n      <span class="na">model</span><span class="p">:</span> <span class="dl">"</span><span class="s2">text-davinci-003</span><span class="dl">"</span><span class="p">,</span>\n      <span class="na">prompt</span><span class="p">:</span> <span class="nx">prompt</span><span class="p">,</span>\n      <span class="na">temperature</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>\n      <span class="na">max_tokens</span><span class="p">:</span> <span class="mi">1000</span><span class="p">,</span>\n    <span class="p">}</span>\n  <span class="p">);</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n<h2 data-sourcepos="98:1-98:9">\n<span id="解説" class="fragment"></span><a href="#%E8%A7%A3%E8%AA%AC"><i class="fa fa-link"></i></a>解説</h2>\n<p data-sourcepos="100:1-100:77">nodejsでは、<code>openai</code>ライブラリをインストールして使います</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="102:1-109:3"><div class="highlight"><pre><code><span class="c"># npm</span>\nnpm i openai\n<span class="c"># yarn</span>\nyarn add openai\n<span class="c"># pnpm</span>\npnpm i openai\n</code></pre></div></div>\n<ol data-sourcepos="111:1-174:0">\n<li data-sourcepos="111:1-119:0">\n<p data-sourcepos="111:4-111:15">config設定</p>\n<p data-sourcepos="113:5-114:62">この時にapiKeyを使うのですが、この値は<code>GitHub</code>に上げたり、フロント側のソースコードに載せたりしないようにしましょう<br>\n私は<code>process.env.*****</code>で環境変数にしました。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="116:5-118:7"><div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Configuration</span><span class="p">({</span> <span class="na">apiKey</span><span class="p">:</span> <span class="o">**************</span> <span class="p">});</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="120:1-125:0">\n<p data-sourcepos="120:4-120:45">configを使って初期化をします。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="122:5-124:7"><div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">openai</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OpenAIApi</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="126:1-150:0">\n<p data-sourcepos="126:4-126:19">createCompletion</p>\n<p data-sourcepos="128:5-129:103">初期化をしたら<code>createCompletion</code>メソッドを使います。<br>\nこのメソッドはプロンプトに基づいてテキストを生成するメソッドです。</p>\n<p data-sourcepos="131:5-131:52">主なプロパティは以下の通りです。</p>\n<ul data-sourcepos="133:5-137:4">\n<li data-sourcepos="133:5-133:43">model: 使用するモデルの名前</li>\n<li data-sourcepos="134:5-134:68">prompt: テキスト生成のための入力となる文字列</li>\n<li data-sourcepos="135:5-135:51">max_tokens: 生成する最大トークン数</li>\n<li data-sourcepos="136:5-137:4">temperature: 生成されるテキストの多様性を制御するパラメータ。0から1までの値を設定し、1に近づくほど多様性が上がる。</li>\n</ul>\n<p data-sourcepos="138:5-138:206">他にも色々なプロパティがあるので、もっとカスタマイズしたい場合は<a href="https://platform.openai.com/docs/introduction/overview" rel="nofollow noopener" target="_blank">公式ドキュメント</a>をご参照ください</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="140:5-149:7"><div class="highlight"><pre><code>  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">openai</span><span class="p">.</span><span class="nf">createCompletion</span><span class="p">(</span>\n    <span class="p">{</span>\n      <span class="na">model</span><span class="p">:</span> <span class="dl">"</span><span class="s2">text-davinci-003</span><span class="dl">"</span><span class="p">,</span>\n      <span class="na">prompt</span><span class="p">:</span> <span class="nx">prompt</span><span class="p">,</span>\n      <span class="na">temperature</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>\n      <span class="na">max_tokens</span><span class="p">:</span> <span class="mi">1000</span><span class="p">,</span>\n    <span class="p">}</span>\n  <span class="p">);</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="151:1-174:0">\n<p data-sourcepos="151:4-151:21">promptについて</p>\n<p data-sourcepos="154:5-154:157"><code>createCompletion</code>メソッドは前の文から予測して次の文を考えるメソッドなので、例としては以下のように使います。</p>\n<div class="code-frame" data-lang="text" data-sourcepos="156:5-159:7"><div class="highlight"><pre><code>Aさん: 昨日の星空は綺麗だったね。Bさんはどうだった？\nBさん: \n</code></pre></div></div>\n<p data-sourcepos="161:5-161:134">ここまでを<code>propmt</code>に入れることでBさんのセリフをBさんの立場で考えてくれるという仕組みです。</p>\n<p data-sourcepos="163:5-163:19">私の場合は</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="165:5-171:7"><div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">prompt</span> <span class="o">=</span> <span class="s2">`\n  質問: あなたの職業は</span><span class="p">${</span><span class="nx">event</span><span class="p">.</span><span class="nx">occupation</span><span class="p">}</span><span class="s2">です。</span><span class="p">${</span><span class="nx">event</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="s2">についての感想を以下を参考に</span><span class="p">${</span><span class="nx">event</span><span class="p">.</span><span class="nx">answer_length</span><span class="p">}</span><span class="s2">文字程度で作成してください。\n  </span><span class="p">${</span><span class="nx">event</span><span class="p">.</span><span class="nx">feature</span><span class="p">}</span><span class="s2">\n  回答: \n`</span>\n</code></pre></div></div>\n<p data-sourcepos="173:5-173:145">このようにすることで、感想文を書く立場・対象・特徴について設置を教え、回答を生成させています。</p>\n</li>\n</ol>\n<p data-sourcepos="175:1-175:84">他の実装箇所については徐々に記事にして行こうと思います〜</p>\n<h1 data-sourcepos="177:1-177:11">\n<span id="最後に" class="fragment"></span><a href="#%E6%9C%80%E5%BE%8C%E3%81%AB"><i class="fa fa-link"></i></a>最後に</h1>\n<p data-sourcepos="179:1-180:35">AIを作るのは大変ですが、<br>\nAIを使うのは簡単でした。</p>\n<p data-sourcepos="182:1-182:45">楽しい世の中になってきましたね</p>\n',body:'# はじめに\n\n小学生の頃から嫌いなことがあります。\nそれは、プリントの「感想」の欄です.\n自分の思いを文章にするのが苦手で、「箇条書きでよくないか、、、？」と常々思ってきました。\n\n読書感想文なんて一番苦手でした。\n\n<img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/cf77c1c6-1a75-9568-c8e7-7a2637c6a98c.png" width="200px"/>\n\nそんな私がOpenAI社のGPT-3を利用して\n【感想文ジェネレーター】\nを作成しました。\n\nhttps://opinion-ai.vercel.app/\n\n無料枠で作成したため、無料枠が尽きると動かなくなりますので、\n突然サービス終了する可能性があります。ご容赦ください。\n\n<font color="red">(特にCSSには)改善の余地があります。ちょっとずつ直します</font>\n\n# 概要\n\n(現在の画面と異なる可能性があります)\n\n1. [感想文ジェネレーター](https://opinion-ai.vercel.app/)を開く\n\n    <img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/21098711-fcb1-91a5-83dc-8465330e69a0.png" width="400px"/>\n\n1. 必要な項目を入力\n\n    <img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0120d2f2-f99e-fc34-b159-42e259fac22f.png" width="400px"/>\n\n    * 例) \n    * 何について\n        * TypeScript初学者研修\n    * 職業\n        * 会社員3年目\n    * 何文字程度で作成するか\n        * 300\n\n1. 生成\n\n    <img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/6a112c3c-6022-350c-041d-ddf1acb53db5.png" width="400px"/>\n\n    そこそこいい感じですね👍\n    私が作る文章よりもしっかりしています\n\n# ざっくり技術スタック\n\n![opinion-ai.drawio.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/55c5a322-713e-6ef5-e43c-71faebd433ba.png)\n\n# ざっくり構成\n\n![構成.drawio.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4f0359ae-530e-5e1b-e082-ee5bc1f2cec8.png)\n\nざっくり解説してみると、\n\n## 利用者\n\n1. ブラウザで必要な情報を入力し、回答生成のリクエストを送る。\n1. `API Gateway`を通して`step functions`へ通じ処理が始まる。\n1. `API Gateway`のtimeoutは29sのため、`step functions`を使い、タイムアウトの問題を解決している。\n1. 非同期処理で、`OpenAI`からの回答が返ってきたら`Supabase`に回答を格納する。\n1. ブラウザでは`Supabase`のリアルタイム機能を使い、特定のテーブルの`INSERT`イベントを検知し、回答を表示する。\n\n## 開発\n\n* フロントエンド側は`Vercel`でビルド・デプロイしているので、`github`の`main`ブランチの変更を検知してビルド・デプロイが走る\n* バックエンド側のは`ServerlessFramework`でデプロイしている。\n\n# `OpenAI`回答生成\n\n## ソースコード\n\n```typescript:handler.ts\nimport { Configuration, OpenAIApi } from \'openai\'\n\nconst getAnswer = async (event) => {\n  const config = new Configuration({ apiKey: ************** });\n  const openai = new OpenAIApi(config);\n  const prompt = `\n  質問: あなたの職業は${event.occupation}です。${event.title}についての感想を以下を参考に${event.answer_length}文字程度で作成してください。\n  ${event.feature}\n  回答: \n  `\n  const response = await openai.createCompletion(\n    {\n      model: "text-davinci-003",\n      prompt: prompt,\n      temperature: 1,\n      max_tokens: 1000,\n    }\n  );\n}\n```\n\n## 解説\n\nnodejsでは、`openai`ライブラリをインストールして使います\n\n```bash\n# npm\nnpm i openai\n# yarn\nyarn add openai\n# pnpm\npnpm i openai\n```\n\n1. config設定\n\n    この時にapiKeyを使うのですが、この値は`GitHub`に上げたり、フロント側のソースコードに載せたりしないようにしましょう\n    私は`process.env.*****`で環境変数にしました。\n    \n    ```typescript\n    const config = new Configuration({ apiKey: ************** });\n    ```\n\n1. configを使って初期化をします。\n    \n    ```typescript\n    const openai = new OpenAIApi(config);\n    ```\n\n1. createCompletion\n\n    初期化をしたら`createCompletion`メソッドを使います。\n    このメソッドはプロンプトに基づいてテキストを生成するメソッドです。\n    \n    主なプロパティは以下の通りです。\n    \n    * model: 使用するモデルの名前\n    * prompt: テキスト生成のための入力となる文字列\n    * max_tokens: 生成する最大トークン数\n    * temperature: 生成されるテキストの多様性を制御するパラメータ。0から1までの値を設定し、1に近づくほど多様性が上がる。\n    \n    他にも色々なプロパティがあるので、もっとカスタマイズしたい場合は[公式ドキュメント](https://platform.openai.com/docs/introduction/overview)をご参照ください\n\n    ```typescript\n      const response = await openai.createCompletion(\n        {\n          model: "text-davinci-003",\n          prompt: prompt,\n          temperature: 1,\n          max_tokens: 1000,\n        }\n      );\n    ```\n\n1. promptについて\n\n\n    `createCompletion`メソッドは前の文から予測して次の文を考えるメソッドなので、例としては以下のように使います。\n    \n    ```\n    Aさん: 昨日の星空は綺麗だったね。Bさんはどうだった？\n    Bさん: \n    ```\n    \n    ここまでを`propmt`に入れることでBさんのセリフをBさんの立場で考えてくれるという仕組みです。\n    \n    私の場合は\n    \n    ```typescript\n    const prompt = `\n      質問: あなたの職業は${event.occupation}です。${event.title}についての感想を以下を参考に${event.answer_length}文字程度で作成してください。\n      ${event.feature}\n      回答: \n    `\n    ```\n    \n    このようにすることで、感想文を書く立場・対象・特徴について設置を教え、回答を生成させています。\n\n他の実装箇所については徐々に記事にして行こうと思います〜\n\n# 最後に\n\nAIを作るのは大変ですが、\nAIを使うのは簡単でした。\n\n楽しい世の中になってきましたね\n',coediting:!1,comments_count:3,created_at:"2023-02-28T00:44:27+09:00",group:null,id:"cbc06263c51ab64e5dbe",likes_count:30,private:!1,reactions_count:0,stocks_count:13,tags:[{name:"TypeScript",versions:[]},{name:"OpenAI",versions:[]},{name:"ServerlessFramework",versions:[]},{name:"stepfunctions",versions:[]},{name:"Supabase",versions:[]}],title:"OpenAI APIを利用して【感想文ジェネレーター】を作成しました",updated_at:"2023-02-28T00:44:27+09:00",url:"https://qiita.com/maaaashi/items/cbc06263c51ab64e5dbe",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:11450,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-6:125"><code>Firebase</code>の代替と謳われている<code>supabase</code>をよく使ってwebアプリを構築していますが、<br>\nWeb版の無料枠では2つのプロジェクトまでしか作成することができないため、<br>\nAWSのEC2上に<code>self-hosting</code>しました<br>\n今回はシングル構成ですが、<code>docker swarm</code>などを利用することで冗長構成にすることも可能です</p>\n<a href="https://camo.qiitausercontent.com/df8fe38d1967fd24d48984f2ee8a46cab277316b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f36373035653465392d356261652d383332332d616138312d3363306233623637333231622e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F6705e4e9-5bae-8323-aa81-3c0b3b67321b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b2c1512f0f0fda5d664aaed063a08cd9" width="300" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/6705e4e9-5bae-8323-aa81-3c0b3b67321b.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F6705e4e9-5bae-8323-aa81-3c0b3b67321b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5b3d8f6b40c44dee4a2ec44cf41e482f 1x" loading="lazy"></a>\n<a href="https://camo.qiitausercontent.com/c95cd65b7dcbfca8e8514f36993e32a90379d5fb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f39313466326633632d343864322d643433302d353533312d3538386661326335613132662e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F914f2f3c-48d2-d430-5531-588fa2c5a12f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c3cc354c27923178ea82b6cca59580c8" width="103" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/914f2f3c-48d2-d430-5531-588fa2c5a12f.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F914f2f3c-48d2-d430-5531-588fa2c5a12f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6a8f0dc39001f77620e834fbdcf82299 1x" loading="lazy"></a>\n<h1 data-sourcepos="14:1-14:17">\n<span id="1-ec2の作成" class="fragment"></span><a href="#1-ec2%E3%81%AE%E4%BD%9C%E6%88%90"><i class="fa fa-link"></i></a>1. EC2の作成</h1>\n<ol data-sourcepos="16:1-39:0">\n<li data-sourcepos="16:1-16:34">\n<p data-sourcepos="16:4-16:34">AWS management consoleを開く</p>\n</li>\n<li data-sourcepos="17:1-17:27">\n<p data-sourcepos="17:4-17:27">EC2のページを開く</p>\n</li>\n<li data-sourcepos="18:1-37:0">\n<p data-sourcepos="18:4-19:31">画面右上の「インスタンスを起動」ボタンをクリック<br>\n以下設定項目を設定</p>\n<ul data-sourcepos="21:5-37:0">\n<li data-sourcepos="21:5-22:25">名前\n<ul data-sourcepos="22:9-22:25">\n<li data-sourcepos="22:9-22:25">自由に設定</li>\n</ul>\n</li>\n<li data-sourcepos="23:5-24:21">OSイメージ\n<ul data-sourcepos="24:9-24:21">\n<li data-sourcepos="24:9-24:21">AmazonLinux</li>\n</ul>\n</li>\n<li data-sourcepos="25:5-27:148">インスタンスタイプ\n<ul data-sourcepos="26:9-27:148">\n<li data-sourcepos="26:9-26:25">自由に設定</li>\n<li data-sourcepos="27:9-27:148">無料枠の<code>t2.micro</code>でも動くかもしれませんが、あまりにもストレスが溜まったので<code>t3a.small</code>にしました。</li>\n</ul>\n</li>\n<li data-sourcepos="28:5-31:50">キーペア\n<ul data-sourcepos="29:9-31:50">\n<li data-sourcepos="29:9-31:50">新しいキーペアを生成\n<ul data-sourcepos="30:13-31:50">\n<li data-sourcepos="30:13-30:47">キーペア名：自由に設定</li>\n<li data-sourcepos="31:13-31:50">他はそのままキーペア生成</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos="32:5-34:77">セキュリティグループ\n<ul data-sourcepos="33:9-34:77">\n<li data-sourcepos="33:9-34:77">あとで設定するため、<br>\n「既存のセキュリティグループを設定」 &gt; 空のまま</li>\n</ul>\n</li>\n<li data-sourcepos="35:5-37:0">ストレージ\n<ul data-sourcepos="36:9-37:0">\n<li data-sourcepos="36:9-37:0">無料枠の限界30GiBまで拡張</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos="38:1-39:0">\n<p data-sourcepos="38:4-38:36">「インスタンスを起動」</p>\n</li>\n</ol>\n<h1 data-sourcepos="40:1-40:56">\n<span id="2-セキュリティーグループを作成する" class="fragment"></span><a href="#2-%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E3%83%BC%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>2. セキュリティーグループを作成する。</h1>\n<ol data-sourcepos="42:1-70:0">\n<li data-sourcepos="42:1-42:138">\n<p data-sourcepos="42:4-42:138">左側サイドメニューから、「ネットワーク &amp; セキュリティ」 &gt; 「セキュリティグループ」を選択する</p>\n</li>\n<li data-sourcepos="43:1-66:0">\n<p data-sourcepos="43:4-44:31">画面右上「セキュリティグループを作成」をクリック<br>\n以下設定項目を設定</p>\n<ul data-sourcepos="46:5-53:4">\n<li data-sourcepos="46:5-47:25">セキュリティグループ名\n<ul data-sourcepos="47:9-47:25">\n<li data-sourcepos="47:9-47:25">自由に設定</li>\n</ul>\n</li>\n<li data-sourcepos="48:5-49:25">説明\n<ul data-sourcepos="49:9-49:25">\n<li data-sourcepos="49:9-49:25">自由に設定</li>\n</ul>\n</li>\n<li data-sourcepos="50:5-51:49">VPC\n<ul data-sourcepos="51:9-51:49">\n<li data-sourcepos="51:9-51:49">先ほどEC2を構築したVPCを選択</li>\n</ul>\n</li>\n<li data-sourcepos="52:5-53:4">インバウンドルール</li>\n</ul>\n<table data-sourcepos="54:5-60:70">\n<thead>\n<tr data-sourcepos="54:5-54:65">\n<th data-sourcepos="54:6-54:14">タイプ</th>\n<th data-sourcepos="54:16-54:30">プロトコル</th>\n<th data-sourcepos="54:32-54:46">ポート範囲</th>\n<th data-sourcepos="54:48-54:56">ソース</th>\n<th data-sourcepos="54:58-54:57"></th>\n<th data-sourcepos="54:59-54:64">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos="56:5-56:70">\n<td data-sourcepos="56:6-56:20">カスタムTCP</td>\n<td data-sourcepos="56:22-56:24">TCP</td>\n<td data-sourcepos="56:26-56:29">8000</td>\n<td data-sourcepos="56:31-56:43">Anywhere-IPv4</td>\n<td data-sourcepos="56:45-56:53">0.0.0.0/0</td>\n<td data-sourcepos="56:55-56:69">自由に設定</td>\n</tr>\n<tr data-sourcepos="57:5-57:56">\n<td data-sourcepos="57:6-57:8">ssh</td>\n<td data-sourcepos="57:10-57:12">TCP</td>\n<td data-sourcepos="57:14-57:15">22</td>\n<td data-sourcepos="57:17-57:29">Anywhere-IPv4</td>\n<td data-sourcepos="57:31-57:39">0.0.0.0/0</td>\n<td data-sourcepos="57:41-57:55">自由に設定</td>\n</tr>\n<tr data-sourcepos="58:5-58:59">\n<td data-sourcepos="58:6-58:10">HTTPS</td>\n<td data-sourcepos="58:12-58:14">TCP</td>\n<td data-sourcepos="58:16-58:18">443</td>\n<td data-sourcepos="58:20-58:32">Anywhere-IPv4</td>\n<td data-sourcepos="58:34-58:42">0.0.0.0/0</td>\n<td data-sourcepos="58:44-58:58">自由に設定</td>\n</tr>\n<tr data-sourcepos="59:5-59:70">\n<td data-sourcepos="59:6-59:20">カスタムTCP</td>\n<td data-sourcepos="59:22-59:24">TCP</td>\n<td data-sourcepos="59:26-59:29">3000</td>\n<td data-sourcepos="59:31-59:43">Anywhere-IPv4</td>\n<td data-sourcepos="59:45-59:53">0.0.0.0/0</td>\n<td data-sourcepos="59:55-59:69">自由に設定</td>\n</tr>\n<tr data-sourcepos="60:5-60:70">\n<td data-sourcepos="60:6-60:20">カスタムTCP</td>\n<td data-sourcepos="60:22-60:24">TCP</td>\n<td data-sourcepos="60:26-60:29">5432</td>\n<td data-sourcepos="60:31-60:43">Anywhere-IPv4</td>\n<td data-sourcepos="60:45-60:53">0.0.0.0/0</td>\n<td data-sourcepos="60:55-60:69">自由に設定</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos="62:5-62:103"><code>0.0.0.0/0</code>の部分を自社のIPに設定することでIP制限をかけることができます</p>\n<ul data-sourcepos="64:5-66:0">\n<li data-sourcepos="64:5-66:0">タグ\n<ul data-sourcepos="65:9-66:0">\n<li data-sourcepos="65:9-66:0">自由に設定</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos="67:1-67:54">\n<p data-sourcepos="67:4-67:54">先ほど作成したEC2インスタンスを選択</p>\n</li>\n<li data-sourcepos="68:1-68:99">\n<p data-sourcepos="68:4-68:99">「アクション」 &gt; 「セキュリティ」 &gt; 「セキュリティグループを変更」</p>\n</li>\n<li data-sourcepos="69:1-70:0">\n<p data-sourcepos="69:4-69:54">今作ったセキュリティグループを設定</p>\n</li>\n</ol>\n<p data-sourcepos="71:1-71:164"><a href="https://camo.qiitausercontent.com/6f641950451760d0f2be6374401f6ec5e7a57e5e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f34373237353738392d613863622d396531612d396461352d3134633833373430653666372e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F47275789-a8cb-9e1a-9da5-14c83740e6f7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3f04f8e0010a6aad80e147397cb0cc60" alt="スクリーンショット 2023-02-24 23.17.59.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/47275789-a8cb-9e1a-9da5-14c83740e6f7.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F47275789-a8cb-9e1a-9da5-14c83740e6f7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0adb05cd6d886e7bd5cfaceb1777465f 1x" loading="lazy"></a></p>\n<p data-sourcepos="73:1-73:35">このようになっていたらOK</p>\n<h1 data-sourcepos="75:1-75:46">\n<span id="3-ec2に接続しsupabaseを起動する" class="fragment"></span><a href="#3-ec2%E3%81%AB%E6%8E%A5%E7%B6%9A%E3%81%97supabase%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>3. EC2に接続し、supabaseを起動する</h1>\n<ol data-sourcepos="77:1-178:0">\n<li data-sourcepos="77:1-81:0">\n<p data-sourcepos="77:4-77:95"><code>terraterm</code>などのツールや、<code>instance connect</code>を利用してEC2にssh接続をする</p>\n<ul data-sourcepos="79:5-81:0">\n<li data-sourcepos="79:5-79:81">ファイルを操作するのでVScodeで入っちゃうのがおすすめ</li>\n<li data-sourcepos="80:5-81:0">楽なのは<code>instance connect</code>で、画面上部の「接続」ボタンから接続したらOK</li>\n</ul>\n</li>\n<li data-sourcepos="82:1-117:0">\n<p data-sourcepos="82:4-82:42">以下の通りにコマンドを実行</p>\n<div class="code-frame" data-lang="sh" data-sourcepos="84:5-116:7"><div class="highlight"><pre><code><span class="nv">$ </span><span class="nb">sudo </span>yum update\n・\n・\n・\nUpgrade  4 Packages\n\nTotal download size: 34 M\nIs this ok <span class="o">[</span>y/d/N]: y\n・\n・\n・\nComplete!\n\n<span class="c"># docker install</span>\n<span class="nv">$ </span><span class="nb">sudo </span>yum <span class="nb">install </span>docker <span class="nt">-y</span>\n<span class="nv">$ </span><span class="nb">sudo </span>service docker start\n\n<span class="c"># docker-compose install</span>\n<span class="c"># version 1.29.2の場合</span>\n<span class="c"># versionは好きなものを入れる</span>\n<span class="nv">$ </span><span class="nb">sudo </span>curl <span class="nt">-L</span> <span class="s2">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-</span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-s</span><span class="si">)</span><span class="s2">-</span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span><span class="s2">"</span> <span class="nt">-o</span> /usr/local/bin/docker-compose\n<span class="nv">$ </span><span class="nb">sudo chmod</span> +x /usr/local/bin/docker-compose\n<span class="nv">$ </span><span class="nb">sudo chmod </span>666 /var/run/docker.sock\n\n<span class="c"># Gitのinstall</span>\n<span class="nv">$ </span><span class="nb">sudo </span>yum <span class="nb">install </span>git <span class="nt">-y</span>\n\n<span class="c"># supabase リポジトリのcloen</span>\n<span class="nv">$ </span>git clone <span class="nt">--depth</span> 1 https://github.com/supabase/supabase\n<span class="nv">$ </span><span class="nb">cd </span>supabase/docker\n<span class="nv">$ </span><span class="nb">cp</span> .env.example .env\n</code></pre></div></div>\n</li>\n<li data-sourcepos="118:1-124:0">\n<p data-sourcepos="118:4-118:16">.envの修正</p>\n<p data-sourcepos="120:5-121:49">.env内に出てくる<code>localhost</code>の値を全てEC2の<code>publicIP</code>に置き換える<br>\n私の環境では４箇所ありました。</p>\n</li>\n<li data-sourcepos="125:1-140:11">\n<p data-sourcepos="125:4-125:50">supabaseのセキュリティセットアップ</p>\n<ol data-sourcepos="127:5-140:11">\n<li data-sourcepos="127:5-128:59">\n<p data-sourcepos="127:8-128:59">公式のガイドに従い<a href="https://supabase.com/docs/guides/self-hosting#api-keys" rel="nofollow noopener" target="_blank">JWT Generator</a>を利用して<br>\n<code>jwt secret</code>と、<code>anon key</code>と<code>service key</code>を作成する</p>\n</li>\n<li data-sourcepos="129:5-140:11">\n<p data-sourcepos="129:8-129:37">次の箇所を書き換える</p>\n<div class="code-frame" data-lang="text" data-sourcepos="131:9-140:11"><div class="highlight"><pre><code>.env:\n    JWT_SECRET - jwt secret\n    ANON_KEY - anon key\n    SERVICE_ROLE_KEY - service key\n\nvolumes/api/kong.yml\n    anon - anon key\n    service_role - service key\n</code></pre></div></div>\n</li>\n</ol>\n</li>\n<li data-sourcepos="141:1-170:0">\n<p data-sourcepos="141:4-141:53">docker-compose.ymlの微修正(いらないかも)</p>\n<p data-sourcepos="143:5-143:245">私のPC上ではこれまでのセットアップで動いたのですが、<code>Amazon linux</code>上ではコンテナがうまく立ち上がらなかったので、脳死気味になるが、以下の設定を全てのサービスに追加する</p>\n<div class="code-frame" data-lang="yaml" data-sourcepos="145:5-147:7"><div class="highlight"><pre><code> <span class="na">privileged</span><span class="pi">:</span> <span class="kc">true</span>\n</code></pre></div></div>\n<p data-sourcepos="149:5-149:9">例)</p>\n<div class="code-frame" data-lang="yaml" data-sourcepos="151:5-166:7"><div class="highlight"><pre><code>  <span class="na">rest</span><span class="pi">:</span>\n    <span class="na">container_name</span><span class="pi">:</span> <span class="s">supabase-rest</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">postgrest/postgrest:v10.1.2</span>\n    <span class="na">depends_on</span><span class="pi">:</span>\n      <span class="na">db</span><span class="pi">:</span> <span class="c1"># Disable this if you are using an external Postgres database</span>\n        <span class="na">condition</span><span class="pi">:</span> <span class="s">service_healthy</span>\n    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="na">PGRST_DB_URI</span><span class="pi">:</span> <span class="s">postgres://authenticator:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}</span>\n      <span class="na">PGRST_DB_SCHEMAS</span><span class="pi">:</span> <span class="s">${PGRST_DB_SCHEMAS}</span>\n      <span class="na">PGRST_DB_ANON_ROLE</span><span class="pi">:</span> <span class="s">anon</span>\n      <span class="na">PGRST_JWT_SECRET</span><span class="pi">:</span> <span class="s">${JWT_SECRET}</span>\n      <span class="na">PGRST_DB_USE_LEGACY_GUCS</span><span class="pi">:</span> <span class="s2">"</span><span class="s">false"</span>\n    <span class="na">privileged</span><span class="pi">:</span> <span class="kc">true</span>   <span class="c1"># 追加</span>\n</code></pre></div></div>\n<p data-sourcepos="169:5-169:83"><font color="red">最後にdocker-compose.ymlファイルを載せます</font></p>\n</li>\n<li data-sourcepos="171:1-176:0">\n<p data-sourcepos="171:4-171:92">お待ちかねのサーバー起動(初回はimageのpullに時間がかかります。)</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="173:5-175:7"><div class="highlight"><pre><code><span class="nv">$ </span>docker-compose up <span class="nt">-d</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="177:1-178:0">\n<p data-sourcepos="177:4-177:49"><a href="">http://public ip:3000</a>を開くと、、、</p>\n</li>\n</ol>\n<p data-sourcepos="179:1-179:163"><a href="https://camo.qiitausercontent.com/8fd77bfea9c5672818ad307555b4dae390b2967c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f63333963613261352d663664652d363330652d633661302d3331396434326265356437362e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fc39ca2a5-f6de-630e-c6a0-319d42be5d76.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=13e1c5394efb3c4e94a5e8d7d387eb42" alt="スクリーンショット 2023-02-25 0.23.38.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/c39ca2a5-f6de-630e-c6a0-319d42be5d76.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fc39ca2a5-f6de-630e-c6a0-319d42be5d76.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f87cf6d0031c91e16e6e85c6c6b2b3ca 1x" loading="lazy"></a></p>\n<p data-sourcepos="181:1-181:15">やったー！</p>\n<h1 data-sourcepos="183:1-183:32">\n<span id="4-storageをs3に変更する" class="fragment"></span><a href="#4-storage%E3%82%92s3%E3%81%AB%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>4. storageをs3に変更する</h1>\n<ul data-sourcepos="185:1-187:0">\n<li data-sourcepos="185:1-185:86">せっかくAWS上で動かしているので、storageはs3を使いましょう〜</li>\n<li data-sourcepos="186:1-187:0">EBSも圧迫しますしね</li>\n</ul>\n<ol data-sourcepos="188:1-210:0">\n<li data-sourcepos="188:1-191:0">\n<p data-sourcepos="188:4-188:20">s3を作成する</p>\n<p data-sourcepos="190:5-190:66">名前は自由。他はデフォルトのままでOKです。</p>\n</li>\n<li data-sourcepos="192:1-204:0">\n<p data-sourcepos="192:4-192:67">docker-compose.ymlファイルのstorageの環境変数を変更</p>\n<div class="code-frame" data-lang="yaml" data-sourcepos="194:5-203:7"><div class="highlight"><pre><code>      <span class="na">FILE_SIZE_LIMIT</span><span class="pi">:</span> <span class="m">52428800</span>\n      <span class="na">STORAGE_BACKEND</span><span class="pi">:</span> <span class="s">s3</span>       <span class="c1"># 変更</span>\n      <span class="na">FILE_STORAGE_BACKEND_PATH</span><span class="pi">:</span> <span class="s">/var/lib/storage</span>\n      <span class="na">TENANT_ID</span><span class="pi">:</span> <span class="s">supabase</span>       <span class="c1"># 変更(なんでもいいです。変えなくてもいいです。)</span>\n      <span class="na">REGION</span><span class="pi">:</span> <span class="s">ap-northeast-1</span>    <span class="c1"># s3のリージョン指定</span>\n      <span class="na">GLOBAL_S3_BUCKET</span><span class="pi">:</span> <span class="err">*****</span>   <span class="c1"># s3バケット名を指定</span>\n      <span class="na">ENABLE_IMAGE_TRANSFORMATION</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>\n      <span class="na">IMGPROXY_URL</span><span class="pi">:</span> <span class="s">http://imgproxy:5001</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="205:1-210:0">\n<p data-sourcepos="205:4-205:18">環境再起動</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="207:5-209:7"><div class="highlight"><pre><code>docker-compose restart\n</code></pre></div></div>\n</li>\n</ol>\n<p data-sourcepos="211:1-211:57">これでstorage機能の保存先がs3になります。</p>\n<h1 data-sourcepos="213:1-213:11">\n<span id="5-参考" class="fragment"></span><a href="#5-%E5%8F%82%E8%80%83"><i class="fa fa-link"></i></a>5. 参考</h1>\n<details><summary>開く: docker-compose.yaml</summary>\n<div class="code-frame" data-lang="yaml" data-sourcepos="217:1-468:3">\n<div class="code-lang"><span class="bold">docker-compose.yml</span></div>\n<div class="highlight"><pre><code><span class="c1"># Usage</span>\n<span class="c1">#   Start:          docker compose up</span>\n<span class="c1">#   With helpers:   docker compose -f docker-compose.yml -f ./dev/docker-compose.dev.yml up</span>\n<span class="c1">#   Stop:           docker compose down</span>\n<span class="c1">#   Destroy:        docker compose -f docker-compose.yml -f ./dev/docker-compose.dev.yml down -v --remove-orphans</span>\n\n<span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3.8"</span>\n\n<span class="na">services</span><span class="pi">:</span>\n  <span class="na">studio</span><span class="pi">:</span>\n    <span class="na">container_name</span><span class="pi">:</span> <span class="s">supabase-studio</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">supabase/studio:20230216-e731b77</span>\n    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>\n    <span class="na">healthcheck</span><span class="pi">:</span>\n      <span class="na">test</span><span class="pi">:</span> <span class="pi">[</span> <span class="s2">"</span><span class="s">CMD"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">node"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">-e"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">require(\'http\').get(\'http://localhost:3000/api/profile\',</span><span class="nv"> </span><span class="s">(r)</span><span class="nv"> </span><span class="s">=&gt;</span><span class="nv"> </span><span class="s">{if</span><span class="nv"> </span><span class="s">(r.statusCode</span><span class="nv"> </span><span class="s">!==</span><span class="nv"> </span><span class="s">200)</span><span class="nv"> </span><span class="s">throw</span><span class="nv"> </span><span class="s">new</span><span class="nv"> </span><span class="s">Error(r.statusCode)})"</span> <span class="pi">]</span>\n      <span class="na">timeout</span><span class="pi">:</span> <span class="s">5s</span>\n      <span class="na">interval</span><span class="pi">:</span> <span class="s">5s</span>\n      <span class="na">retries</span><span class="pi">:</span> <span class="m">3</span>\n    <span class="na">ports</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">${STUDIO_PORT}:3000/tcp</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="na">STUDIO_PG_META_URL</span><span class="pi">:</span> <span class="s">http://meta:8080</span>\n      <span class="na">POSTGRES_PASSWORD</span><span class="pi">:</span> <span class="s">${POSTGRES_PASSWORD}</span>\n\n      <span class="na">DEFAULT_ORGANIZATION_NAME</span><span class="pi">:</span> <span class="s">${STUDIO_DEFAULT_ORGANIZATION}</span>\n      <span class="na">DEFAULT_PROJECT_NAME</span><span class="pi">:</span> <span class="s">${STUDIO_DEFAULT_PROJECT}</span>\n\n      <span class="na">SUPABASE_URL</span><span class="pi">:</span> <span class="s">http://kong:8000</span>\n      <span class="na">SUPABASE_PUBLIC_URL</span><span class="pi">:</span> <span class="s">${SUPABASE_PUBLIC_URL}</span>\n      <span class="na">SUPABASE_ANON_KEY</span><span class="pi">:</span> <span class="s">${ANON_KEY}</span>\n      <span class="na">SUPABASE_SERVICE_KEY</span><span class="pi">:</span> <span class="s">${SERVICE_ROLE_KEY}</span>\n    <span class="na">privileged</span><span class="pi">:</span> <span class="kc">true</span>\n\n  <span class="na">kong</span><span class="pi">:</span>\n    <span class="na">container_name</span><span class="pi">:</span> <span class="s">supabase-kong</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">kong:2.8.1</span>\n    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>\n    <span class="na">ports</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">${KONG_HTTP_PORT}:8000/tcp</span>\n      <span class="pi">-</span> <span class="s">${KONG_HTTPS_PORT}:8443/tcp</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="na">KONG_DATABASE</span><span class="pi">:</span> <span class="s2">"</span><span class="s">off"</span>\n      <span class="na">KONG_DECLARATIVE_CONFIG</span><span class="pi">:</span> <span class="s">/var/lib/kong/kong.yml</span>\n      <span class="c1"># https://github.com/supabase/cli/issues/14</span>\n      <span class="na">KONG_DNS_ORDER</span><span class="pi">:</span> <span class="s">LAST,A,CNAME</span>\n      <span class="na">KONG_PLUGINS</span><span class="pi">:</span> <span class="s">request-transformer,cors,key-auth,acl</span>\n      <span class="na">KONG_NGINX_PROXY_PROXY_BUFFER_SIZE</span><span class="pi">:</span> <span class="s">160k</span>\n      <span class="na">KONG_NGINX_PROXY_PROXY_BUFFERS</span><span class="pi">:</span> <span class="s">64 160k</span>\n    <span class="na">volumes</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">./volumes/api:/var/lib/kong:ro</span>\n    <span class="na">privileged</span><span class="pi">:</span> <span class="kc">true</span>\n\n  <span class="na">auth</span><span class="pi">:</span>\n    <span class="na">container_name</span><span class="pi">:</span> <span class="s">supabase-auth</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">supabase/gotrue:v2.47.0</span>\n    <span class="na">depends_on</span><span class="pi">:</span>\n      <span class="na">db</span><span class="pi">:</span> <span class="c1"># Disable this if you are using an external Postgres database</span>\n        <span class="na">condition</span><span class="pi">:</span> <span class="s">service_healthy</span>\n    <span class="na">healthcheck</span><span class="pi">:</span>\n      <span class="na">test</span><span class="pi">:</span> <span class="pi">[</span> <span class="s2">"</span><span class="s">CMD"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">wget"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">--no-verbose"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">--tries=1"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">--spider"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">http://localhost:9999/health"</span> <span class="pi">]</span>\n      <span class="na">timeout</span><span class="pi">:</span> <span class="s">5s</span>\n      <span class="na">interval</span><span class="pi">:</span> <span class="s">5s</span>\n      <span class="na">retries</span><span class="pi">:</span> <span class="m">3</span>\n    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="na">GOTRUE_API_HOST</span><span class="pi">:</span> <span class="s">0.0.0.0</span>\n      <span class="na">GOTRUE_API_PORT</span><span class="pi">:</span> <span class="m">9999</span>\n      <span class="na">API_EXTERNAL_URL</span><span class="pi">:</span> <span class="s">${API_EXTERNAL_URL}</span>\n\n      <span class="na">GOTRUE_DB_DRIVER</span><span class="pi">:</span> <span class="s">postgres</span>\n      <span class="na">GOTRUE_DB_DATABASE_URL</span><span class="pi">:</span> <span class="s">postgres://supabase_auth_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}</span>\n\n      <span class="na">GOTRUE_SITE_URL</span><span class="pi">:</span> <span class="s">${SITE_URL}</span>\n      <span class="na">GOTRUE_URI_ALLOW_LIST</span><span class="pi">:</span> <span class="s">${ADDITIONAL_REDIRECT_URLS}</span>\n      <span class="na">GOTRUE_DISABLE_SIGNUP</span><span class="pi">:</span> <span class="s">${DISABLE_SIGNUP}</span>\n\n      <span class="na">GOTRUE_JWT_ADMIN_ROLES</span><span class="pi">:</span> <span class="s">service_role</span>\n      <span class="na">GOTRUE_JWT_AUD</span><span class="pi">:</span> <span class="s">authenticated</span>\n      <span class="na">GOTRUE_JWT_DEFAULT_GROUP_NAME</span><span class="pi">:</span> <span class="s">authenticated</span>\n      <span class="na">GOTRUE_JWT_EXP</span><span class="pi">:</span> <span class="s">${JWT_EXPIRY}</span>\n      <span class="na">GOTRUE_JWT_SECRET</span><span class="pi">:</span> <span class="s">${JWT_SECRET}</span>\n\n      <span class="na">GOTRUE_EXTERNAL_EMAIL_ENABLED</span><span class="pi">:</span> <span class="s">${ENABLE_EMAIL_SIGNUP}</span>\n      <span class="na">GOTRUE_MAILER_AUTOCONFIRM</span><span class="pi">:</span> <span class="s">${ENABLE_EMAIL_AUTOCONFIRM}</span>\n      <span class="c1"># GOTRUE_MAILER_SECURE_EMAIL_CHANGE_ENABLED: true</span>\n      <span class="c1"># GOTRUE_SMTP_MAX_FREQUENCY: 1s</span>\n      <span class="na">GOTRUE_SMTP_ADMIN_EMAIL</span><span class="pi">:</span> <span class="s">${SMTP_ADMIN_EMAIL}</span>\n      <span class="na">GOTRUE_SMTP_HOST</span><span class="pi">:</span> <span class="s">${SMTP_HOST}</span>\n      <span class="na">GOTRUE_SMTP_PORT</span><span class="pi">:</span> <span class="s">${SMTP_PORT}</span>\n      <span class="na">GOTRUE_SMTP_USER</span><span class="pi">:</span> <span class="s">${SMTP_USER}</span>\n      <span class="na">GOTRUE_SMTP_PASS</span><span class="pi">:</span> <span class="s">${SMTP_PASS}</span>\n      <span class="na">GOTRUE_SMTP_SENDER_NAME</span><span class="pi">:</span> <span class="s">${SMTP_SENDER_NAME}</span>\n      <span class="na">GOTRUE_MAILER_URLPATHS_INVITE</span><span class="pi">:</span> <span class="s">${MAILER_URLPATHS_INVITE}</span>\n      <span class="na">GOTRUE_MAILER_URLPATHS_CONFIRMATION</span><span class="pi">:</span> <span class="s">${MAILER_URLPATHS_CONFIRMATION}</span>\n      <span class="na">GOTRUE_MAILER_URLPATHS_RECOVERY</span><span class="pi">:</span> <span class="s">${MAILER_URLPATHS_RECOVERY}</span>\n      <span class="na">GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE</span><span class="pi">:</span> <span class="s">${MAILER_URLPATHS_EMAIL_CHANGE}</span>\n\n      <span class="na">GOTRUE_EXTERNAL_PHONE_ENABLED</span><span class="pi">:</span> <span class="s">${ENABLE_PHONE_SIGNUP}</span>\n      <span class="na">GOTRUE_SMS_AUTOCONFIRM</span><span class="pi">:</span> <span class="s">${ENABLE_PHONE_AUTOCONFIRM}</span>\n      <span class="na">MFA_ENABLED</span><span class="pi">:</span> <span class="s">${MFA_ENABLED}</span>\n    <span class="na">privileged</span><span class="pi">:</span> <span class="kc">true</span>\n\n  <span class="na">rest</span><span class="pi">:</span>\n    <span class="na">container_name</span><span class="pi">:</span> <span class="s">supabase-rest</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">postgrest/postgrest:v10.1.2</span>\n    <span class="na">depends_on</span><span class="pi">:</span>\n      <span class="na">db</span><span class="pi">:</span> <span class="c1"># Disable this if you are using an external Postgres database</span>\n        <span class="na">condition</span><span class="pi">:</span> <span class="s">service_healthy</span>\n    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="na">PGRST_DB_URI</span><span class="pi">:</span> <span class="s">postgres://authenticator:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}</span>\n      <span class="na">PGRST_DB_SCHEMAS</span><span class="pi">:</span> <span class="s">${PGRST_DB_SCHEMAS}</span>\n      <span class="na">PGRST_DB_ANON_ROLE</span><span class="pi">:</span> <span class="s">anon</span>\n      <span class="na">PGRST_JWT_SECRET</span><span class="pi">:</span> <span class="s">${JWT_SECRET}</span>\n      <span class="na">PGRST_DB_USE_LEGACY_GUCS</span><span class="pi">:</span> <span class="s2">"</span><span class="s">false"</span>\n    <span class="na">privileged</span><span class="pi">:</span> <span class="kc">true</span>\n\n  <span class="na">realtime</span><span class="pi">:</span>\n    <span class="na">container_name</span><span class="pi">:</span> <span class="s">realtime-dev.supabase-realtime</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">supabase/realtime:v2.5.1</span>\n    <span class="na">depends_on</span><span class="pi">:</span>\n      <span class="na">db</span><span class="pi">:</span> <span class="c1"># Disable this if you are using an external Postgres database</span>\n        <span class="na">condition</span><span class="pi">:</span> <span class="s">service_healthy</span>\n    <span class="na">healthcheck</span><span class="pi">:</span>\n      <span class="na">test</span><span class="pi">:</span> <span class="pi">[</span> <span class="s2">"</span><span class="s">CMD"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">bash"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">-c"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">printf</span><span class="nv"> </span><span class="se">\\\\</span><span class="s">0</span><span class="nv"> </span><span class="s">&gt;</span><span class="nv"> </span><span class="s">/dev/tcp/localhost/4000"</span> <span class="pi">]</span>\n      <span class="na">timeout</span><span class="pi">:</span> <span class="s">5s</span>\n      <span class="na">interval</span><span class="pi">:</span> <span class="s">5s</span>\n      <span class="na">retries</span><span class="pi">:</span> <span class="m">3</span>\n    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="na">PORT</span><span class="pi">:</span> <span class="m">4000</span>\n      <span class="na">DB_HOST</span><span class="pi">:</span> <span class="s">${POSTGRES_HOST}</span>\n      <span class="na">DB_PORT</span><span class="pi">:</span> <span class="s">${POSTGRES_PORT}</span>\n      <span class="na">DB_USER</span><span class="pi">:</span> <span class="s">supabase_admin</span>\n      <span class="na">DB_PASSWORD</span><span class="pi">:</span> <span class="s">${POSTGRES_PASSWORD}</span>\n      <span class="na">DB_NAME</span><span class="pi">:</span> <span class="s">${POSTGRES_DB}</span>\n      <span class="na">DB_AFTER_CONNECT_QUERY</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">SET</span><span class="nv"> </span><span class="s">search_path</span><span class="nv"> </span><span class="s">TO</span><span class="nv"> </span><span class="s">_realtime\'</span>\n      <span class="na">DB_ENC_KEY</span><span class="pi">:</span> <span class="s">supabaserealtime</span>\n      <span class="na">API_JWT_SECRET</span><span class="pi">:</span> <span class="s">${JWT_SECRET}</span>\n      <span class="na">FLY_ALLOC_ID</span><span class="pi">:</span> <span class="s">fly123</span>\n      <span class="na">FLY_APP_NAME</span><span class="pi">:</span> <span class="s">realtime</span>\n      <span class="na">SECRET_KEY_BASE</span><span class="pi">:</span> <span class="s">UpNVntn3cDxHJpq99YMc1T1AQgQpc8kfYTuRgBiYa15BLrx8etQoXz3gZv1/u2oq</span>\n      <span class="na">ERL_AFLAGS</span><span class="pi">:</span> <span class="s">-proto_dist inet_tcp</span>\n      <span class="na">ENABLE_TAILSCALE</span><span class="pi">:</span> <span class="s2">"</span><span class="s">false"</span>\n      <span class="na">DNS_NODES</span><span class="pi">:</span> <span class="s2">"</span><span class="s">\'\'"</span>\n    <span class="na">command</span><span class="pi">:</span> <span class="pi">&gt;</span>\n      <span class="s">sh -c "/app/bin/migrate &amp;&amp; /app/bin/realtime eval \'Realtime.Release.seeds(Realtime.Repo)\' &amp;&amp; /app/bin/server"</span>\n    <span class="na">privileged</span><span class="pi">:</span> <span class="kc">true</span>\n\n  <span class="na">storage</span><span class="pi">:</span>\n    <span class="na">container_name</span><span class="pi">:</span> <span class="s">supabase-storage</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">supabase/storage-api:v0.28.2</span>\n    <span class="na">depends_on</span><span class="pi">:</span>\n      <span class="na">db</span><span class="pi">:</span> <span class="c1"># Disable this if you are using an external Postgres database</span>\n        <span class="na">condition</span><span class="pi">:</span> <span class="s">service_healthy</span>\n      <span class="na">rest</span><span class="pi">:</span>\n        <span class="na">condition</span><span class="pi">:</span> <span class="s">service_started</span>\n      <span class="na">imgproxy</span><span class="pi">:</span>\n        <span class="na">condition</span><span class="pi">:</span> <span class="s">service_started</span>\n    <span class="na">healthcheck</span><span class="pi">:</span>\n      <span class="na">test</span><span class="pi">:</span> <span class="pi">[</span> <span class="s2">"</span><span class="s">CMD"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">wget"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">--no-verbose"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">--tries=1"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">--spider"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">http://localhost:5000/status"</span> <span class="pi">]</span>\n      <span class="na">timeout</span><span class="pi">:</span> <span class="s">5s</span>\n      <span class="na">interval</span><span class="pi">:</span> <span class="s">5s</span>\n      <span class="na">retries</span><span class="pi">:</span> <span class="m">3</span>\n    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="na">ANON_KEY</span><span class="pi">:</span> <span class="s">${ANON_KEY}</span>\n      <span class="na">SERVICE_KEY</span><span class="pi">:</span> <span class="s">${SERVICE_ROLE_KEY}</span>\n      <span class="na">POSTGREST_URL</span><span class="pi">:</span> <span class="s">http://rest:3000</span>\n      <span class="na">PGRST_JWT_SECRET</span><span class="pi">:</span> <span class="s">${JWT_SECRET}</span>\n      <span class="na">DATABASE_URL</span><span class="pi">:</span> <span class="s">postgres://supabase_storage_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}</span>\n      <span class="na">FILE_SIZE_LIMIT</span><span class="pi">:</span> <span class="m">52428800</span>\n      <span class="na">STORAGE_BACKEND</span><span class="pi">:</span> <span class="s">s3</span>\n      <span class="na">FILE_STORAGE_BACKEND_PATH</span><span class="pi">:</span> <span class="s">/var/lib/storage</span>\n      <span class="na">TENANT_ID</span><span class="pi">:</span> <span class="s">supabase</span>\n      <span class="c1"># TODO: https://github.com/supabase/storage-api/issues/55</span>\n      <span class="na">REGION</span><span class="pi">:</span> <span class="s">ap-northeast-1</span>\n      <span class="na">GLOBAL_S3_BUCKET</span><span class="pi">:</span> <span class="s">supabase-sample-storage</span>\n      <span class="na">ENABLE_IMAGE_TRANSFORMATION</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>\n      <span class="na">IMGPROXY_URL</span><span class="pi">:</span> <span class="s">http://imgproxy:5001</span>\n    <span class="na">volumes</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">./volumes/storage:/var/lib/storage</span>\n    <span class="na">privileged</span><span class="pi">:</span> <span class="kc">true</span>\n\n  <span class="na">imgproxy</span><span class="pi">:</span>\n    <span class="na">container_name</span><span class="pi">:</span> <span class="s">supabase-imgproxy</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">darthsim/imgproxy:v3.11</span>\n    <span class="na">healthcheck</span><span class="pi">:</span>\n      <span class="na">test</span><span class="pi">:</span> <span class="pi">[</span> <span class="s2">"</span><span class="s">CMD"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">imgproxy"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">health"</span> <span class="pi">]</span>\n      <span class="na">timeout</span><span class="pi">:</span> <span class="s">5s</span>\n      <span class="na">interval</span><span class="pi">:</span> <span class="s">5s</span>\n      <span class="na">retries</span><span class="pi">:</span> <span class="m">3</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="na">IMGPROXY_BIND</span><span class="pi">:</span> <span class="s2">"</span><span class="s">:5001"</span>\n      <span class="na">IMGPROXY_LOCAL_FILESYSTEM_ROOT</span><span class="pi">:</span> <span class="s">/</span>\n      <span class="na">IMGPROXY_USE_ETAG</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>\n    <span class="na">volumes</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">./volumes/storage:/var/lib/storage</span>\n    <span class="na">privileged</span><span class="pi">:</span> <span class="kc">true</span>\n\n  <span class="na">meta</span><span class="pi">:</span>\n    <span class="na">container_name</span><span class="pi">:</span> <span class="s">supabase-meta</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">supabase/postgres-meta:v0.60.7</span>\n    <span class="na">depends_on</span><span class="pi">:</span>\n      <span class="na">db</span><span class="pi">:</span> <span class="c1"># Disable this if you are using an external Postgres database</span>\n        <span class="na">condition</span><span class="pi">:</span> <span class="s">service_healthy</span>\n    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="na">PG_META_PORT</span><span class="pi">:</span> <span class="m">8080</span>\n      <span class="na">PG_META_DB_HOST</span><span class="pi">:</span> <span class="s">${POSTGRES_HOST}</span>\n      <span class="na">PG_META_DB_PORT</span><span class="pi">:</span> <span class="s">${POSTGRES_PORT}</span>\n      <span class="na">PG_META_DB_NAME</span><span class="pi">:</span> <span class="s">${POSTGRES_DB}</span>\n      <span class="na">PG_META_DB_USER</span><span class="pi">:</span> <span class="s">supabase_admin</span>\n      <span class="na">PG_META_DB_PASSWORD</span><span class="pi">:</span> <span class="s">${POSTGRES_PASSWORD}</span>\n    <span class="na">privileged</span><span class="pi">:</span> <span class="kc">true</span>\n\n  <span class="c1"># Comment out everything below this point if you are using an external Postgres database</span>\n  <span class="na">db</span><span class="pi">:</span>\n    <span class="na">container_name</span><span class="pi">:</span> <span class="s">supabase-db</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">supabase/postgres:15.1.0.42-rc2</span>\n    <span class="na">healthcheck</span><span class="pi">:</span>\n      <span class="na">test</span><span class="pi">:</span> <span class="s">pg_isready -U postgres -h localhost</span>\n      <span class="na">interval</span><span class="pi">:</span> <span class="s">5s</span>\n      <span class="na">timeout</span><span class="pi">:</span> <span class="s">5s</span>\n      <span class="na">retries</span><span class="pi">:</span> <span class="m">10</span>\n    <span class="na">command</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">postgres</span>\n      <span class="pi">-</span> <span class="s">-c</span>\n      <span class="pi">-</span> <span class="s">config_file=/etc/postgresql/postgresql.conf</span>\n      <span class="pi">-</span> <span class="s">-c</span>\n      <span class="pi">-</span> <span class="s">log_min_messages=fatal</span> <span class="c1"># prevents Realtime polling queries from appearing in logs</span>\n    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>\n    <span class="na">ports</span><span class="pi">:</span>\n      <span class="c1"># Pass down internal port because it\'s set dynamically by other services</span>\n      <span class="pi">-</span> <span class="s">${POSTGRES_PORT}:${POSTGRES_PORT}</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="na">POSTGRES_HOST</span><span class="pi">:</span> <span class="s">/var/run/postgresql</span>\n      <span class="na">PGPORT</span><span class="pi">:</span> <span class="s">${POSTGRES_PORT}</span>\n      <span class="na">POSTGRES_PORT</span><span class="pi">:</span> <span class="s">${POSTGRES_PORT}</span>\n      <span class="na">PGPASSWORD</span><span class="pi">:</span> <span class="s">${POSTGRES_PASSWORD}</span>\n      <span class="na">POSTGRES_PASSWORD</span><span class="pi">:</span> <span class="s">${POSTGRES_PASSWORD}</span>\n      <span class="na">PGDATABASE</span><span class="pi">:</span> <span class="s">${POSTGRES_DB}</span>\n      <span class="na">POSTGRES_DB</span><span class="pi">:</span> <span class="s">${POSTGRES_DB}</span>\n    <span class="na">volumes</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">./volumes/db/realtime.sql:/docker-entrypoint-initdb.d/realtime.sql</span>\n      <span class="pi">-</span> <span class="s">./volumes/db/roles.sql:/docker-entrypoint-initdb.d/roles.sql</span>\n      <span class="c1"># Must be superuser to enable pg_net extension</span>\n      <span class="pi">-</span> <span class="s">./volumes/db/webhooks.sql:/etc/postgresql.schema.sql</span>\n      <span class="pi">-</span> <span class="s">./volumes/db/data:/var/lib/postgresql/data</span>\n    <span class="na">privileged</span><span class="pi">:</span> <span class="kc">true</span>\n</code></pre></div>\n</div>\n<details>\n</details></details>',body:'# はじめに\n\n`Firebase`の代替と謳われている`supabase`をよく使ってwebアプリを構築していますが、\nWeb版の無料枠では2つのプロジェクトまでしか作成することができないため、\nAWSのEC2上に`self-hosting`しました\n今回はシングル構成ですが、`docker swarm`などを利用することで冗長構成にすることも可能です\n\n<img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/6705e4e9-5bae-8323-aa81-3c0b3b67321b.png" width="300" />\n\n<img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/914f2f3c-48d2-d430-5531-588fa2c5a12f.png" width="103"/>\n\n\n\n# 1. EC2の作成\n\n1. AWS management consoleを開く\n1. EC2のページを開く\n1. 画面右上の「インスタンスを起動」ボタンをクリック\n    以下設定項目を設定\n\n    * 名前\n        * 自由に設定\n    * OSイメージ\n        * AmazonLinux\n    * インスタンスタイプ\n        * 自由に設定\n        * 無料枠の`t2.micro`でも動くかもしれませんが、あまりにもストレスが溜まったので`t3a.small`にしました。\n    * キーペア\n        * 新しいキーペアを生成\n            * キーペア名：自由に設定\n            * 他はそのままキーペア生成\n    * セキュリティグループ\n        * あとで設定するため、\n        「既存のセキュリティグループを設定」 > 空のまま\n    * ストレージ\n        * 無料枠の限界30GiBまで拡張\n\n1. 「インスタンスを起動」\n\n# 2. セキュリティーグループを作成する。\n\n1. 左側サイドメニューから、「ネットワーク & セキュリティ」 > 「セキュリティグループ」を選択する\n1. 画面右上「セキュリティグループを作成」をクリック\n    以下設定項目を設定\n\n    * セキュリティグループ名\n        * 自由に設定\n    * 説明\n        * 自由に設定\n    * VPC\n        * 先ほどEC2を構築したVPCを選択\n    * インバウンドルール\n    \n    |タイプ|プロトコル|ポート範囲|ソース||説明|\n    |----|----|----|----|----|----|\n    |カスタムTCP|TCP|8000|Anywhere-IPv4|0.0.0.0/0|自由に設定|\n    |ssh|TCP|22|Anywhere-IPv4|0.0.0.0/0|自由に設定|\n    |HTTPS|TCP|443|Anywhere-IPv4|0.0.0.0/0|自由に設定|\n    |カスタムTCP|TCP|3000|Anywhere-IPv4|0.0.0.0/0|自由に設定|\n    |カスタムTCP|TCP|5432|Anywhere-IPv4|0.0.0.0/0|自由に設定|\n    \n    `0.0.0.0/0`の部分を自社のIPに設定することでIP制限をかけることができます\n\n    * タグ\n        * 自由に設定\n\n1. 先ほど作成したEC2インスタンスを選択\n1. 「アクション」 > 「セキュリティ」 > 「セキュリティグループを変更」\n1. 今作ったセキュリティグループを設定\n\n![スクリーンショット 2023-02-24 23.17.59.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/47275789-a8cb-9e1a-9da5-14c83740e6f7.png)\n\nこのようになっていたらOK\n\n# 3. EC2に接続し、supabaseを起動する\n\n1. `terraterm`などのツールや、`instance connect`を利用してEC2にssh接続をする\n\n    * ファイルを操作するのでVScodeで入っちゃうのがおすすめ\n    * 楽なのは`instance connect`で、画面上部の「接続」ボタンから接続したらOK\n\n1. 以下の通りにコマンドを実行\n\n    ```sh\n    $ sudo yum update\n    ・\n    ・\n    ・\n    Upgrade  4 Packages\n    \n    Total download size: 34 M\n    Is this ok [y/d/N]: y\n    ・\n    ・\n    ・\n    Complete!\n    \n    # docker install\n    $ sudo yum install docker -y\n    $ sudo service docker start\n    \n    # docker-compose install\n    # version 1.29.2の場合\n    # versionは好きなものを入れる\n    $ sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose\n    $ sudo chmod +x /usr/local/bin/docker-compose\n    $ sudo chmod 666 /var/run/docker.sock\n    \n    # Gitのinstall\n    $ sudo yum install git -y\n    \n    # supabase リポジトリのcloen\n    $ git clone --depth 1 https://github.com/supabase/supabase\n    $ cd supabase/docker\n    $ cp .env.example .env\n    ```\n\n1. .envの修正\n\n    .env内に出てくる`localhost`の値を全てEC2の`publicIP`に置き換える\n    私の環境では４箇所ありました。\n\n\n\n1. supabaseのセキュリティセットアップ\n\n    1. 公式のガイドに従い[JWT Generator](https://supabase.com/docs/guides/self-hosting#api-keys)を利用して\n`jwt secret`と、`anon key`と`service key`を作成する\n    1. 次の箇所を書き換える\n        \n        ```\n        .env:\n            JWT_SECRET - jwt secret\n            ANON_KEY - anon key\n            SERVICE_ROLE_KEY - service key\n        \n        volumes/api/kong.yml\n            anon - anon key\n            service_role - service key\n        ```\n1. docker-compose.ymlの微修正(いらないかも)\n\n    私のPC上ではこれまでのセットアップで動いたのですが、`Amazon linux`上ではコンテナがうまく立ち上がらなかったので、脳死気味になるが、以下の設定を全てのサービスに追加する\n\n    ```yaml\n     privileged: true\n    ```\n    \n    例) \n    \n    ```yaml\n      rest:\n        container_name: supabase-rest\n        image: postgrest/postgrest:v10.1.2\n        depends_on:\n          db: # Disable this if you are using an external Postgres database\n            condition: service_healthy\n        restart: unless-stopped\n        environment:\n          PGRST_DB_URI: postgres://authenticator:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}\n          PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS}\n          PGRST_DB_ANON_ROLE: anon\n          PGRST_JWT_SECRET: ${JWT_SECRET}\n          PGRST_DB_USE_LEGACY_GUCS: "false"\n        privileged: true   # 追加\n    ```\n\n\n    <font color="red">最後にdocker-compose.ymlファイルを載せます</font>\n\n1. お待ちかねのサーバー起動(初回はimageのpullに時間がかかります。)\n\n    ```bash\n    $ docker-compose up -d\n    ```\n\n1. [http://public ip:3000]()を開くと、、、\n\n![スクリーンショット 2023-02-25 0.23.38.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/c39ca2a5-f6de-630e-c6a0-319d42be5d76.png)\n\nやったー！\n\n# 4. storageをs3に変更する\n\n* せっかくAWS上で動かしているので、storageはs3を使いましょう〜\n* EBSも圧迫しますしね\n\n1. s3を作成する\n\n    名前は自由。他はデフォルトのままでOKです。\n\n1. docker-compose.ymlファイルのstorageの環境変数を変更\n\n    ```yaml\n          FILE_SIZE_LIMIT: 52428800\n          STORAGE_BACKEND: s3       # 変更\n          FILE_STORAGE_BACKEND_PATH: /var/lib/storage\n          TENANT_ID: supabase       # 変更(なんでもいいです。変えなくてもいいです。)\n          REGION: ap-northeast-1    # s3のリージョン指定\n          GLOBAL_S3_BUCKET: *****   # s3バケット名を指定\n          ENABLE_IMAGE_TRANSFORMATION: "true"\n          IMGPROXY_URL: http://imgproxy:5001\n    ```\n\n1. 環境再起動\n    \n    ```bash\n    docker-compose restart\n    ```\n\nこれでstorage機能の保存先がs3になります。\n\n# 5. 参考\n\n<details><summary>開く: docker-compose.yaml</summary>\n\n```yaml:docker-compose.yml\n# Usage\n#   Start:          docker compose up\n#   With helpers:   docker compose -f docker-compose.yml -f ./dev/docker-compose.dev.yml up\n#   Stop:           docker compose down\n#   Destroy:        docker compose -f docker-compose.yml -f ./dev/docker-compose.dev.yml down -v --remove-orphans\n\nversion: "3.8"\n\nservices:\n  studio:\n    container_name: supabase-studio\n    image: supabase/studio:20230216-e731b77\n    restart: unless-stopped\n    healthcheck:\n      test: [ "CMD", "node", "-e", "require(\'http\').get(\'http://localhost:3000/api/profile\', (r) => {if (r.statusCode !== 200) throw new Error(r.statusCode)})" ]\n      timeout: 5s\n      interval: 5s\n      retries: 3\n    ports:\n      - ${STUDIO_PORT}:3000/tcp\n    environment:\n      STUDIO_PG_META_URL: http://meta:8080\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n\n      DEFAULT_ORGANIZATION_NAME: ${STUDIO_DEFAULT_ORGANIZATION}\n      DEFAULT_PROJECT_NAME: ${STUDIO_DEFAULT_PROJECT}\n\n      SUPABASE_URL: http://kong:8000\n      SUPABASE_PUBLIC_URL: ${SUPABASE_PUBLIC_URL}\n      SUPABASE_ANON_KEY: ${ANON_KEY}\n      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}\n    privileged: true\n\n  kong:\n    container_name: supabase-kong\n    image: kong:2.8.1\n    restart: unless-stopped\n    ports:\n      - ${KONG_HTTP_PORT}:8000/tcp\n      - ${KONG_HTTPS_PORT}:8443/tcp\n    environment:\n      KONG_DATABASE: "off"\n      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml\n      # https://github.com/supabase/cli/issues/14\n      KONG_DNS_ORDER: LAST,A,CNAME\n      KONG_PLUGINS: request-transformer,cors,key-auth,acl\n      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k\n      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k\n    volumes:\n      - ./volumes/api:/var/lib/kong:ro\n    privileged: true\n\n  auth:\n    container_name: supabase-auth\n    image: supabase/gotrue:v2.47.0\n    depends_on:\n      db: # Disable this if you are using an external Postgres database\n        condition: service_healthy\n    healthcheck:\n      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health" ]\n      timeout: 5s\n      interval: 5s\n      retries: 3\n    restart: unless-stopped\n    environment:\n      GOTRUE_API_HOST: 0.0.0.0\n      GOTRUE_API_PORT: 9999\n      API_EXTERNAL_URL: ${API_EXTERNAL_URL}\n\n      GOTRUE_DB_DRIVER: postgres\n      GOTRUE_DB_DATABASE_URL: postgres://supabase_auth_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}\n\n      GOTRUE_SITE_URL: ${SITE_URL}\n      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS}\n      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP}\n\n      GOTRUE_JWT_ADMIN_ROLES: service_role\n      GOTRUE_JWT_AUD: authenticated\n      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated\n      GOTRUE_JWT_EXP: ${JWT_EXPIRY}\n      GOTRUE_JWT_SECRET: ${JWT_SECRET}\n\n      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP}\n      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM}\n      # GOTRUE_MAILER_SECURE_EMAIL_CHANGE_ENABLED: true\n      # GOTRUE_SMTP_MAX_FREQUENCY: 1s\n      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}\n      GOTRUE_SMTP_HOST: ${SMTP_HOST}\n      GOTRUE_SMTP_PORT: ${SMTP_PORT}\n      GOTRUE_SMTP_USER: ${SMTP_USER}\n      GOTRUE_SMTP_PASS: ${SMTP_PASS}\n      GOTRUE_SMTP_SENDER_NAME: ${SMTP_SENDER_NAME}\n      GOTRUE_MAILER_URLPATHS_INVITE: ${MAILER_URLPATHS_INVITE}\n      GOTRUE_MAILER_URLPATHS_CONFIRMATION: ${MAILER_URLPATHS_CONFIRMATION}\n      GOTRUE_MAILER_URLPATHS_RECOVERY: ${MAILER_URLPATHS_RECOVERY}\n      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: ${MAILER_URLPATHS_EMAIL_CHANGE}\n\n      GOTRUE_EXTERNAL_PHONE_ENABLED: ${ENABLE_PHONE_SIGNUP}\n      GOTRUE_SMS_AUTOCONFIRM: ${ENABLE_PHONE_AUTOCONFIRM}\n      MFA_ENABLED: ${MFA_ENABLED}\n    privileged: true\n\n  rest:\n    container_name: supabase-rest\n    image: postgrest/postgrest:v10.1.2\n    depends_on:\n      db: # Disable this if you are using an external Postgres database\n        condition: service_healthy\n    restart: unless-stopped\n    environment:\n      PGRST_DB_URI: postgres://authenticator:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}\n      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS}\n      PGRST_DB_ANON_ROLE: anon\n      PGRST_JWT_SECRET: ${JWT_SECRET}\n      PGRST_DB_USE_LEGACY_GUCS: "false"\n    privileged: true\n\n  realtime:\n    container_name: realtime-dev.supabase-realtime\n    image: supabase/realtime:v2.5.1\n    depends_on:\n      db: # Disable this if you are using an external Postgres database\n        condition: service_healthy\n    healthcheck:\n      test: [ "CMD", "bash", "-c", "printf \\\\0 > /dev/tcp/localhost/4000" ]\n      timeout: 5s\n      interval: 5s\n      retries: 3\n    restart: unless-stopped\n    environment:\n      PORT: 4000\n      DB_HOST: ${POSTGRES_HOST}\n      DB_PORT: ${POSTGRES_PORT}\n      DB_USER: supabase_admin\n      DB_PASSWORD: ${POSTGRES_PASSWORD}\n      DB_NAME: ${POSTGRES_DB}\n      DB_AFTER_CONNECT_QUERY: \'SET search_path TO _realtime\'\n      DB_ENC_KEY: supabaserealtime\n      API_JWT_SECRET: ${JWT_SECRET}\n      FLY_ALLOC_ID: fly123\n      FLY_APP_NAME: realtime\n      SECRET_KEY_BASE: UpNVntn3cDxHJpq99YMc1T1AQgQpc8kfYTuRgBiYa15BLrx8etQoXz3gZv1/u2oq\n      ERL_AFLAGS: -proto_dist inet_tcp\n      ENABLE_TAILSCALE: "false"\n      DNS_NODES: "\'\'"\n    command: >\n      sh -c "/app/bin/migrate && /app/bin/realtime eval \'Realtime.Release.seeds(Realtime.Repo)\' && /app/bin/server"\n    privileged: true\n\n  storage:\n    container_name: supabase-storage\n    image: supabase/storage-api:v0.28.2\n    depends_on:\n      db: # Disable this if you are using an external Postgres database\n        condition: service_healthy\n      rest:\n        condition: service_started\n      imgproxy:\n        condition: service_started\n    healthcheck:\n      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/status" ]\n      timeout: 5s\n      interval: 5s\n      retries: 3\n    restart: unless-stopped\n    environment:\n      ANON_KEY: ${ANON_KEY}\n      SERVICE_KEY: ${SERVICE_ROLE_KEY}\n      POSTGREST_URL: http://rest:3000\n      PGRST_JWT_SECRET: ${JWT_SECRET}\n      DATABASE_URL: postgres://supabase_storage_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}\n      FILE_SIZE_LIMIT: 52428800\n      STORAGE_BACKEND: s3\n      FILE_STORAGE_BACKEND_PATH: /var/lib/storage\n      TENANT_ID: supabase\n      # TODO: https://github.com/supabase/storage-api/issues/55\n      REGION: ap-northeast-1\n      GLOBAL_S3_BUCKET: supabase-sample-storage\n      ENABLE_IMAGE_TRANSFORMATION: "true"\n      IMGPROXY_URL: http://imgproxy:5001\n    volumes:\n      - ./volumes/storage:/var/lib/storage\n    privileged: true\n\n  imgproxy:\n    container_name: supabase-imgproxy\n    image: darthsim/imgproxy:v3.11\n    healthcheck:\n      test: [ "CMD", "imgproxy", "health" ]\n      timeout: 5s\n      interval: 5s\n      retries: 3\n    environment:\n      IMGPROXY_BIND: ":5001"\n      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /\n      IMGPROXY_USE_ETAG: "true"\n    volumes:\n      - ./volumes/storage:/var/lib/storage\n    privileged: true\n\n  meta:\n    container_name: supabase-meta\n    image: supabase/postgres-meta:v0.60.7\n    depends_on:\n      db: # Disable this if you are using an external Postgres database\n        condition: service_healthy\n    restart: unless-stopped\n    environment:\n      PG_META_PORT: 8080\n      PG_META_DB_HOST: ${POSTGRES_HOST}\n      PG_META_DB_PORT: ${POSTGRES_PORT}\n      PG_META_DB_NAME: ${POSTGRES_DB}\n      PG_META_DB_USER: supabase_admin\n      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD}\n    privileged: true\n\n  # Comment out everything below this point if you are using an external Postgres database\n  db:\n    container_name: supabase-db\n    image: supabase/postgres:15.1.0.42-rc2\n    healthcheck:\n      test: pg_isready -U postgres -h localhost\n      interval: 5s\n      timeout: 5s\n      retries: 10\n    command:\n      - postgres\n      - -c\n      - config_file=/etc/postgresql/postgresql.conf\n      - -c\n      - log_min_messages=fatal # prevents Realtime polling queries from appearing in logs\n    restart: unless-stopped\n    ports:\n      # Pass down internal port because it\'s set dynamically by other services\n      - ${POSTGRES_PORT}:${POSTGRES_PORT}\n    environment:\n      POSTGRES_HOST: /var/run/postgresql\n      PGPORT: ${POSTGRES_PORT}\n      POSTGRES_PORT: ${POSTGRES_PORT}\n      PGPASSWORD: ${POSTGRES_PASSWORD}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n      PGDATABASE: ${POSTGRES_DB}\n      POSTGRES_DB: ${POSTGRES_DB}\n    volumes:\n      - ./volumes/db/realtime.sql:/docker-entrypoint-initdb.d/realtime.sql\n      - ./volumes/db/roles.sql:/docker-entrypoint-initdb.d/roles.sql\n      # Must be superuser to enable pg_net extension\n      - ./volumes/db/webhooks.sql:/etc/postgresql.schema.sql\n      - ./volumes/db/data:/var/lib/postgresql/data\n    privileged: true\n```\n\n<details>\n',coediting:!1,comments_count:0,created_at:"2023-02-25T00:32:24+09:00",group:null,id:"3b40350381ac6e734af1",likes_count:6,private:!1,reactions_count:0,stocks_count:1,tags:[{name:"AWS",versions:[]},{name:"EC2",versions:[]},{name:"Docker",versions:[]},{name:"Supabase",versions:[]}],title:"AWS EC2にsupabaseをdockerでself-hostingする",updated_at:"2023-02-25T00:54:26+09:00",url:"https://qiita.com/maaaashi/items/3b40350381ac6e734af1",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:1819,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<ul data-sourcepos="3:1-6:0">\n<li data-sourcepos="3:1-4:66">認証サーバーとして<code>Keycloak</code>、フロントエンドビルドツールとして<code>SvelteKit</code>を採用し、<br>\n構築するまでの手順を残していこうと思います。</li>\n<li data-sourcepos="5:1-6:0">ちょっと長いですがお付き合いください。</li>\n</ul>\n<h1 data-sourcepos="7:1-7:8">\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h1>\n<a href="https://camo.qiitausercontent.com/25c901b245d432c9605b9d4099d424fea7d8f021/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f32393936613131342d613733652d353166332d636566652d6662343361336261343466632e706e67" target="_blank" rel="nofollow noopener"><img width="300" src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F2996a114-a73e-51f3-cefe-fb43a3ba44fc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=126f74d02208b1a4834ab94d74723866" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/2996a114-a73e-51f3-cefe-fb43a3ba44fc.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F2996a114-a73e-51f3-cefe-fb43a3ba44fc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d0f02b96e38fb113079dc35e849deff6 1x" loading="lazy"></a>\n<ul data-sourcepos="11:1-19:0">\n<li data-sourcepos="11:1-12:22">MacBook Air\n<ul data-sourcepos="12:5-12:22">\n<li data-sourcepos="12:5-12:22">M2チップ 2022</li>\n</ul>\n</li>\n<li data-sourcepos="13:1-14:22">Docker\n<ul data-sourcepos="14:5-14:22">\n<li data-sourcepos="14:5-14:22">version 20.10.22</li>\n</ul>\n</li>\n<li data-sourcepos="15:1-16:21">Docker Compose\n<ul data-sourcepos="16:5-16:21">\n<li data-sourcepos="16:5-16:21">version v2.15.1</li>\n</ul>\n</li>\n<li data-sourcepos="17:1-19:0">keycloak-js\n<ul data-sourcepos="18:5-19:0">\n<li data-sourcepos="18:5-19:0">20.0.5</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos="20:1-20:82">\n<span id="1-ネットの記事にあったdocker-composeファイルで構築してみる" class="fragment"></span><a href="#1-%E3%83%8D%E3%83%83%E3%83%88%E3%81%AE%E8%A8%98%E4%BA%8B%E3%81%AB%E3%81%82%E3%81%A3%E3%81%9Fdocker-compose%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%A7%E6%A7%8B%E7%AF%89%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>1. ネットの記事にあったdocker-composeファイルで構築してみる</h1>\n<ol data-sourcepos="22:1-73:0">\n<li data-sourcepos="22:1-63:0">\n<p data-sourcepos="22:4-22:30">docker-compose.ymlの作成</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="24:5-26:7"><div class="highlight"><pre><code><span class="nb">touch </span>docker-compose.yml\n</code></pre></div></div>\n <details><summary>開く: docker-compose.yaml</summary>\n<div class="code-frame" data-lang="yaml" data-sourcepos="29:5-60:7"><div class="highlight"><pre><code><span class="na">version</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">3\'</span>\n\n<span class="na">volumes</span><span class="pi">:</span>\n  <span class="na">mysql_data</span><span class="pi">:</span>\n      <span class="na">driver</span><span class="pi">:</span> <span class="s">local</span>\n\n<span class="na">services</span><span class="pi">:</span>\n  <span class="na">mysql</span><span class="pi">:</span>\n      <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:5.7</span>\n      <span class="na">volumes</span><span class="pi">:</span>\n        <span class="pi">-</span> <span class="s">mysql_data:/var/lib/mysql</span>\n      <span class="na">environment</span><span class="pi">:</span>\n        <span class="na">MYSQL_ROOT_PASSWORD</span><span class="pi">:</span> <span class="s">root</span>\n        <span class="na">MYSQL_DATABASE</span><span class="pi">:</span> <span class="s">keycloak</span>\n        <span class="na">MYSQL_USER</span><span class="pi">:</span> <span class="s">keycloak</span>\n        <span class="na">MYSQL_PASSWORD</span><span class="pi">:</span> <span class="s">password</span>\n  <span class="na">keycloak</span><span class="pi">:</span>\n      <span class="na">image</span><span class="pi">:</span> <span class="s">quay.io/keycloak/keycloak:legacy</span>\n      <span class="na">environment</span><span class="pi">:</span>\n        <span class="na">DB_VENDOR</span><span class="pi">:</span> <span class="s">MYSQL</span>\n        <span class="na">DB_ADDR</span><span class="pi">:</span> <span class="s">mysql</span>\n        <span class="na">DB_DATABASE</span><span class="pi">:</span> <span class="s">keycloak</span>\n        <span class="na">DB_USER</span><span class="pi">:</span> <span class="s">keycloak</span>\n        <span class="na">DB_PASSWORD</span><span class="pi">:</span> <span class="s">password</span>\n        <span class="na">KEYCLOAK_USER</span><span class="pi">:</span> <span class="s">admin</span>\n        <span class="na">KEYCLOAK_PASSWORD</span><span class="pi">:</span> <span class="s">Pa55w0rd</span>\n      <span class="na">ports</span><span class="pi">:</span>\n        <span class="pi">-</span> <span class="s">8080:8080</span>\n      <span class="na">depends_on</span><span class="pi">:</span>\n        <span class="pi">-</span> <span class="s">mysql</span>\n</code></pre></div></div>\n </details>\n</li>\n<li data-sourcepos="64:1-73:0">\n<p data-sourcepos="64:4-64:21">サーバー起動</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="66:5-68:7"><div class="highlight"><pre><code>docker-compose up <span class="nt">-d</span>\n</code></pre></div></div>\n<p data-sourcepos="70:5-70:83"><a href="http://localhost:8080" rel="nofollow noopener" target="_blank">http://localhost:8080</a>でサーバーが立ち上がる</p>\n<p data-sourcepos="72:5-72:61">立ち上がるまでまあまあ時間はかかります</p>\n</li>\n</ol>\n<h1 data-sourcepos="74:1-74:44">\n<span id="2-レルムクライアントの設定" class="fragment"></span><a href="#2-%E3%83%AC%E3%83%AB%E3%83%A0%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%81%AE%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>2. レルム、クライアントの設定</h1>\n<ol data-sourcepos="76:1-87:0">\n<li data-sourcepos="76:1-76:19">\n<p data-sourcepos="76:4-76:19"><code>realm</code>の作成</p>\n</li>\n<li data-sourcepos="77:1-77:20">\n<p data-sourcepos="77:4-77:20"><code>client</code>の作成</p>\n</li>\n<li data-sourcepos="78:1-81:0">\n<p data-sourcepos="78:4-78:157">作成できたら、作成したclientの設定画面から、<code>Valid redirect URIs</code>と<code>Web Origins</code>にフロントエンドサーバーを登録する。</p>\n<p data-sourcepos="80:5-80:176">私はとりあえずローカルで試していたので<code>Valid redirect URIs</code>: <code>http://localhost:18080/*</code>、<code>Web Origins</code>: <code>http://localhost:18080</code>と設定しました。</p>\n</li>\n<li data-sourcepos="82:1-87:0">\n<p data-sourcepos="82:4-82:24">ユーザーの作成</p>\n<ol data-sourcepos="84:5-87:0">\n<li data-sourcepos="84:5-84:95">\n<code>Users</code>から、<code>Add User</code>を選択し、ユーザー名を任意に設定し、<code>create</code>\n</li>\n<li data-sourcepos="85:5-87:0">作成したユーザーの設定画面が開くので、<code>Credentials</code>タブを開き、<code>Set Password</code>でパスワードを設定する。<br>\n※ <code>Temporary</code>はOFFにしておく。</li>\n</ol>\n</li>\n</ol>\n<p data-sourcepos="88:1-88:51">これで認証サーバー側の設定は完了。</p>\n<h1 data-sourcepos="90:1-90:29">\n<span id="3-フロント側の準備" class="fragment"></span><a href="#3-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4%E3%81%AE%E6%BA%96%E5%82%99"><i class="fa fa-link"></i></a>3. フロント側の準備</h1>\n<ol data-sourcepos="92:1-129:0">\n<li data-sourcepos="92:1-99:0">\n<p data-sourcepos="92:4-92:17">Create Project</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="94:5-98:7"><div class="highlight"><pre><code>npm create svelte@latest my-app\n<span class="nb">cd </span>my-app\nnpm i\n</code></pre></div></div>\n</li>\n<li data-sourcepos="100:1-117:0">\n<p data-sourcepos="100:4-100:26">vite.config.tsの修正</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="102:5-113:7">\n<div class="code-lang"><span class="bold">vite.config.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">sveltekit</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@sveltejs/kit/vite</span><span class="dl">\'</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">defineConfig</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">vite</span><span class="dl">\'</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="nf">defineConfig</span><span class="p">({</span>\n  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nf">sveltekit</span><span class="p">()],</span>\n  <span class="na">server</span><span class="p">:</span> <span class="p">{</span>          <span class="c1">// 追加</span>\n    <span class="na">host</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>      <span class="c1">// 追加</span>\n    <span class="na">port</span><span class="p">:</span> <span class="mi">18080</span>      <span class="c1">// 追加</span>\n  <span class="p">}</span>                  <span class="c1">// 追加</span>\n<span class="p">});</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="115:5-116:133">portは自由に設定してください。<br>\nただし、<code>2. レルム、クライアントの設定</code>で設定したフロントサーバーのportに合わせるように。</p>\n</li>\n<li data-sourcepos="118:1-123:0">\n<p data-sourcepos="118:4-118:24">keycloak-jsのinstall</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="120:5-122:7"><div class="highlight"><pre><code>npm i keycloak-js\n</code></pre></div></div>\n</li>\n<li data-sourcepos="124:1-129:0">\n<p data-sourcepos="124:4-124:21">サーバー起動</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="126:5-128:7"><div class="highlight"><pre><code>npm run dev\n</code></pre></div></div>\n</li>\n</ol>\n<p data-sourcepos="130:1-131:48">これでSvelteKitのwelcomeページが開くはず<br>\n<a href="http://localhost:18080" rel="nofollow noopener" target="_blank">http://localhost:18080</a></p>\n<a href="https://camo.qiitausercontent.com/5a04f24e67be4119ddc08b56f10fcd7d733ecc02/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f65316330396565652d616530342d343839372d373736332d3431313961613932303438302e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe1c09eee-ae04-4897-7763-4119aa920480.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d114dcda5514b5bdb541ca5d4b2ec0fc" width="300" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e1c09eee-ae04-4897-7763-4119aa920480.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe1c09eee-ae04-4897-7763-4119aa920480.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=77c23ca39613d124827c80a62c86a1c4 1x" loading="lazy"></a>\n<h1 data-sourcepos="135:1-135:46">\n<span id="4-keyclaok-jsを使って認証してみる" class="fragment"></span><a href="#4-keyclaok-js%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E8%AA%8D%E8%A8%BC%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>4. keyclaok-jsを使って認証してみる</h1>\n<ol data-sourcepos="137:1-241:0">\n<li data-sourcepos="137:1-152:4">\n<p data-sourcepos="137:4-137:27">インスタンス生成</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="139:5-149:7">\n<div class="code-lang"><span class="bold">+page.svelte(抜粋)</span></div>\n<div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="nx">Keycloak</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">keycloak-js</span><span class="dl">\'</span>\n\n  <span class="kd">const</span> <span class="nx">keycloak</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Keycloak</span><span class="p">({</span>\n    <span class="na">clientId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">クライアント名</span><span class="dl">"</span><span class="p">,</span>\n    <span class="na">url</span><span class="p">:</span> <span class="dl">"</span><span class="s2">http://localhost:8080/auth/</span><span class="dl">"</span><span class="p">,</span>\n    <span class="na">realm</span><span class="p">:</span> <span class="dl">"</span><span class="s2">レルム名</span><span class="dl">"</span><span class="p">,</span>\n  <span class="p">})</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="151:5-151:248"><code>new Keycloak(*)</code>の部分にkeycloakの管理コンソールからconfigファイルをダウンロードしてきてそれを読ませる方法がネットにあがっていましたが、私のバージョンでは動きませんでした。</p>\n</li>\n<li data-sourcepos="153:1-184:0">\n<p data-sourcepos="153:4-153:24">認証処理を作成</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="155:5-183:7">\n<div class="code-lang"><span class="bold">+page.svelte()</span></div>\n<div class="highlight"><pre><code>  <span class="c1">// 認証状態</span>\n  <span class="kd">let</span> <span class="nx">keycloakState</span> <span class="o">=</span> <span class="p">{</span>\n    <span class="na">keycloak</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>\n    <span class="na">authenticated</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>\n  <span class="p">}</span>\n\n  <span class="kd">const</span> <span class="nx">keycloak</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Keycloak</span><span class="p">({</span>\n    <span class="na">clientId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">クライアント名</span><span class="dl">"</span><span class="p">,</span>\n    <span class="na">url</span><span class="p">:</span> <span class="dl">"</span><span class="s2">http://localhost:8080/auth/</span><span class="dl">"</span><span class="p">,</span>\n    <span class="na">realm</span><span class="p">:</span> <span class="dl">"</span><span class="s2">レルム名</span><span class="dl">"</span><span class="p">,</span>\n  <span class="p">})</span>\n\n  <span class="c1">// 認証処理</span>\n  <span class="nx">keycloak</span><span class="p">.</span><span class="nf">init</span><span class="p">({</span>\n    <span class="na">onLoad</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">login-required</span><span class="dl">\'</span><span class="p">,</span>\n    <span class="na">redirectUri</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">http://localhost:18080/</span><span class="dl">\'</span><span class="p">,</span>\n    <span class="na">scope</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">openid</span><span class="dl">\'</span>\n  <span class="p">})</span>\n  <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">authenticated</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="c1">// 認証成功時には認証状態を更新する</span>\n    <span class="nx">keycloakState</span> <span class="o">=</span> <span class="p">{</span>\n      <span class="na">keycloak</span><span class="p">:</span> <span class="nx">keycloak</span><span class="p">,</span> <span class="na">authenticated</span><span class="p">:</span> <span class="nx">authenticated</span>\n    <span class="p">};</span>\n  <span class="p">})</span>\n  <span class="p">.</span><span class="nf">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>\n  <span class="p">});</span>\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos="185:1-226:0">\n<p data-sourcepos="185:4-185:77">認証後にページ内容が表示されるようにawait blockを使う</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="187:5-225:7">\n<div class="code-lang"><span class="bold">+page.svelte</span></div>\n<div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="kd">let</span> <span class="nx">keycloakState</span> <span class="o">=</span> <span class="p">{</span>\n    <span class="na">keycloak</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>\n    <span class="na">authenticated</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>\n  <span class="p">}</span>\n\n  <span class="kd">const</span> <span class="nx">signIn</span> <span class="o">=</span> <span class="nf">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="kd">const</span> <span class="nx">keycloak</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Keycloak</span><span class="p">({</span>\n      <span class="na">clientId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">クライアント名</span><span class="dl">"</span><span class="p">,</span>\n      <span class="na">url</span><span class="p">:</span> <span class="dl">"</span><span class="s2">http://localhost:8080/auth/</span><span class="dl">"</span><span class="p">,</span>\n      <span class="na">realm</span><span class="p">:</span> <span class="dl">"</span><span class="s2">レルム名</span><span class="dl">"</span><span class="p">,</span>\n    <span class="p">})</span>    \n    <span class="c1">// 認証処理</span>\n    <span class="nx">keycloak</span><span class="p">.</span><span class="nf">init</span><span class="p">({</span>\n      <span class="na">onLoad</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">login-required</span><span class="dl">\'</span><span class="p">,</span>\n      <span class="na">redirectUri</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">http://localhost:18080/</span><span class="dl">\'</span><span class="p">,</span>\n      <span class="na">scope</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">openid</span><span class="dl">\'</span>\n    <span class="p">})</span>\n    <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">authenticated</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n      <span class="c1">// 認証成功時には認証状態を更新する</span>\n      <span class="nx">keycloakState</span> <span class="o">=</span> <span class="p">{</span>\n        <span class="na">keycloak</span><span class="p">:</span> <span class="nx">keycloak</span><span class="p">,</span> <span class="na">authenticated</span><span class="p">:</span> <span class="nx">authenticated</span>\n      <span class="p">};</span>\n    <span class="p">})</span>\n    <span class="p">.</span><span class="nf">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n      <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>\n    <span class="p">});</span>\n  <span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n{#await signIn()}\n  ...ログイン中\n{:then data}\n  <span class="nt">&lt;section&gt;</span>\n    省略  \n  <span class="nt">&lt;/section&gt;</span>\n{/await}\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos="227:1-241:0">\n<p data-sourcepos="227:4-227:27">画面を開いてみる</p>\n<p data-sourcepos="229:5-229:168"><a href="https://camo.qiitausercontent.com/fe7cb06bfb727e161e203e4bba04b891359c1f8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f37386530376330332d313736332d353562612d663834642d3839333633366161666531362e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F78e07c03-1763-55ba-f84d-893636aafe16.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=603f6f28d9fda5d1125435e7e9c5ca0c" alt="スクリーンショット 2023-02-23 22.01.20.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/78e07c03-1763-55ba-f84d-893636aafe16.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F78e07c03-1763-55ba-f84d-893636aafe16.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7b1ba964a3817afee5721d759b1ebe71 1x" loading="lazy"></a></p>\n<p data-sourcepos="231:5-232:102"><strong>KeyCloakログイン画面が表示された！</strong><br>\n<code>2. レルム、クライアントの設定</code>で作成したユーザーでログインすると...</p>\n <a href="https://camo.qiitausercontent.com/5a04f24e67be4119ddc08b56f10fcd7d733ecc02/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f65316330396565652d616530342d343839372d373736332d3431313961613932303438302e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe1c09eee-ae04-4897-7763-4119aa920480.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d114dcda5514b5bdb541ca5d4b2ec0fc" width="300" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e1c09eee-ae04-4897-7763-4119aa920480.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe1c09eee-ae04-4897-7763-4119aa920480.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=77c23ca39613d124827c80a62c86a1c4 1x" loading="lazy"></a>\n<p data-sourcepos="237:5-238:83">welcomeページにリダイレクトされた!<br>\n成功！！かと思いきや、、、<font color="red">エラー発見</font></p>\n<p data-sourcepos="240:5-240:57"><font color="red">token requestで401エラー</font></p>\n</li>\n</ol>\n<h1 data-sourcepos="242:1-242:20">\n<span id="5-エラー調査" class="fragment"></span><a href="#5-%E3%82%A8%E3%83%A9%E3%83%BC%E8%AA%BF%E6%9F%BB"><i class="fa fa-link"></i></a>5. エラー調査</h1>\n<div class="code-frame" data-lang="json" data-sourcepos="244:1-250:3"><div class="highlight"><pre><code><span class="w">  </span><span class="err">StatusCode:</span><span class="w"> </span><span class="mi">401</span><span class="err">,</span><span class="w">\n  </span><span class="err">Response</span><span class="w"> </span><span class="err">Body:</span><span class="w"> </span><span class="p">{</span><span class="w">\n    </span><span class="nl">"error"</span><span class="p">:</span><span class="s2">"unauthorized_client"</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"error_description"</span><span class="p">:</span><span class="s2">"Client secret not provided in request"</span><span class="w">\n  </span><span class="p">}</span><span class="w"> \n</span></code></pre></div></div>\n<p data-sourcepos="252:1-252:56">よくわからなかったのでAIに聞いてみた。</p>\n<blockquote data-sourcepos="254:1-257:41">\n<p data-sourcepos="254:3-257:41"><strong>私</strong><br>\ntoken endpointを叩いたときにステータスコード401になってしまいます。 エラー内容は以下の通りです。<br>\n{"error":"unauthorized_client","error_description":"Client secret not provided in request"}<br>\n原因はなんだと思いますか？</p>\n</blockquote>\n<blockquote data-sourcepos="259:1-262:74">\n<p data-sourcepos="259:4-262:74"><font color="red"><strong>AI</strong></font><br>\nkeycloakjsを使っているとのことですが、token endpointを叩くときにclient secretをリクエストに含めていますか？<br>\nclient secretはaccess typeがconfidentialの場合に必要なパラメーターです。<br>\nclient secretはKeycloakの管理コンソールで確認できます。</p>\n</blockquote>\n<p data-sourcepos="264:1-265:79">なるほどなるほど。<br>\nじゃあkeycloak-jsで<strong>client secret</strong>が設定できたらいいんだな！</p>\n<blockquote data-sourcepos="267:1-268:91">\n<p data-sourcepos="267:3-268:91"><strong>私</strong><br>\nkeycloakjsを使っている時にclient secretを含める方法を教えてください</p>\n</blockquote>\n<blockquote data-sourcepos="270:1-272:114">\n<p data-sourcepos="270:3-272:114"><font color="red"><strong>AI</strong></font><br>\nkeycloakjsを使っている時にclient secretを含める方法は、keycloak-jsクライアントではサポートされていないようです。<br>\nkeycloak-jsクライアントはpublic keycloak clientとして動作し、client secretを必要としません</p>\n</blockquote>\n<p data-sourcepos="274:1-276:85">なるほどなるほど。<br>\nじゃあKeycloak管理コンソール上で今使っているclientを<strong>credentialなclientからpublicなclientへ</strong>変えればいいんだな！<br>\nと思ったが、<strong>設定箇所が管理コンソール上に見当たらない...</strong></p>\n<p data-sourcepos="278:1-278:29">これもAIに聞いてみた</p>\n<blockquote data-sourcepos="280:1-282:91">\n<p data-sourcepos="280:3-282:91"><strong>私</strong><br>\nDockerでquay.io/keycloak/keycloak:legacyのイメージを使用してkeycloakを起動していますが、<br>\nAccess Typeを変更できる箇所が見当たりません。どこにありますか？</p>\n</blockquote>\n<blockquote data-sourcepos="284:1-287:166">\n<p data-sourcepos="284:3-287:166"><font color="red"><strong>AI</strong></font><br>\nquay.io/keycloak/keycloak:legacyのイメージを使用しているとのことですが、そのイメージはKeycloakの古いバージョン（3.4.3.Final）を含んでいます。<br>\nAccess Typeの設定は、Keycloakの新しいバージョン（4.0以降）で導入されたものです。<br>\nそのため、Access Typeが管理コンソールに見つからないのだと思われます。 最新版のKeycloakを使用することをお勧めします。</p>\n</blockquote>\n<p data-sourcepos="289:1-290:51"><strong>優秀すぎる...</strong><br>\nすぐにdocker-compose.ymlを書き換えました</p>\n<div class="code-frame" data-lang="yaml" data-sourcepos="292:1-302:3">\n<div class="code-lang"><span class="bold">docker-compose.yml</span></div>\n<div class="highlight"><pre><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3"</span>\n<span class="na">services</span><span class="pi">:</span>\n  <span class="na">keycloak</span><span class="pi">:</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">jboss/keycloak:latest</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="na">KEYCLOAK_USER</span><span class="pi">:</span> <span class="s">keycloak</span>\n      <span class="na">KEYCLOAK_PASSWORD</span><span class="pi">:</span> <span class="s">password</span>\n    <span class="na">ports</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">8080:8080</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="304:1-305:94">次は、、<font color="red">コンテナが立ち上がらない...!!</font><br>\n調べてみると<strong>jboss/keycloak</strong>は <strong>Apple CPU搭載 Mac</strong> 非対応のようです。。</p>\n<h1 data-sourcepos="307:1-307:40">\n<span id="6-jbosskeycloakをmacで起動する" class="fragment"></span><a href="#6-jbosskeycloak%E3%82%92mac%E3%81%A7%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>6. jboss/keycloakをMacで起動する</h1>\n<p data-sourcepos="309:1-309:56"><iframe id="qiita-embed-content__64823f663689fa93b5206eed290c0f53" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__64823f663689fa93b5206eed290c0f53" data-content="https%3A%2F%2Fqiita.com%2Ftamaki_tech%2Fitems%2F3001577a5db1f0f43b56" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<p data-sourcepos="311:1-311:42">こちらの記事を参考にしました</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="313:1-325:3"><div class="highlight"><pre><code><span class="c"># 1. git clone</span>\ngit clone https://github.com/keycloak/keycloak-containers.git\n\n<span class="c"># 2.　ディレクトリ移動</span>\n<span class="nv">$ </span><span class="nb">cd </span>keycloak-containers/server\n\n<span class="c"># 3. ver19.0.3ブランチに移動する</span>\n<span class="nv">$ </span>git checkout 19.0.3\n\n<span class="c"># 4. 任意のimage名・タグでdocker buildする</span>\n<span class="nv">$ </span>docker build ./ <span class="nt">-t</span> jboss/keycloak:19.0.3\n</code></pre></div></div>\n<a href="https://camo.qiitausercontent.com/4a2f45675dab276a9257a33e0e71d522d5ea21e7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31323635396461342d333438642d656237382d653866382d3431353930393037316338662e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F12659da4-348d-eb78-e8f8-415909071c8f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b30475d3a4e65352945b7dc89a729aa7" width="400" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/12659da4-348d-eb78-e8f8-415909071c8f.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F12659da4-348d-eb78-e8f8-415909071c8f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=dacb6375e92eae88ae237c35fc871dc9 1x" loading="lazy"></a>\n<p data-sourcepos="329:1-329:23">作られていたらOK</p>\n<p data-sourcepos="331:1-331:177">このイメージを使うように<code>1. ネットの記事にあったdocker-composeファイルで構築してみる</code>で作った<code>docker-compose.yml</code>ファイルを修正する</p>\n<div class="code-frame" data-lang="yaml" data-sourcepos="333:1-344:3">\n<div class="code-lang"><span class="bold">docker-compose.yml</span></div>\n<div class="highlight"><pre><code><span class="na">version</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">3\'</span>\n\n<span class="na">services</span><span class="pi">:</span>\n  <span class="na">keycloak</span><span class="pi">:</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">jboss/keycloak:19.0.3</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="na">KEYCLOAK_USER</span><span class="pi">:</span> <span class="s">admin</span>\n      <span class="na">KEYCLOAK_PASSWORD</span><span class="pi">:</span> <span class="s">password</span>\n    <span class="na">ports</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">8080:8080</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="346:1-348:53">起動OK。<br>\n再度<code>2. レルム、クライアントの設定</code>をし直す。<br>\n※ 👇の設定をOFFにした方が良さそう。</p>\n<a href="https://camo.qiitausercontent.com/bc240a90b5ec31cac9fc59f9427069f71c5acffe/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f64616336626164392d643435652d396463652d396430392d3761343939313061626435612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fdac6bad9-d45e-9dce-9d09-7a49910abd5a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b31257f7e6568194009b7bf729d33473" width="300" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/dac6bad9-d45e-9dce-9d09-7a49910abd5a.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fdac6bad9-d45e-9dce-9d09-7a49910abd5a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1e72a279859d2e1ba6bcd848644d8545 1x" loading="lazy"></a>\n<h1 data-sourcepos="353:1-353:15">\n<span id="7-再挑戦" class="fragment"></span><a href="#7-%E5%86%8D%E6%8C%91%E6%88%A6"><i class="fa fa-link"></i></a>7. 再挑戦</h1>\n<p data-sourcepos="355:1-355:54">もう一度アプリ側からログインを試す。</p>\n<a href="https://camo.qiitausercontent.com/fe7cb06bfb727e161e203e4bba04b891359c1f8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f37386530376330332d313736332d353562612d663834642d3839333633366161666531362e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F78e07c03-1763-55ba-f84d-893636aafe16.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=603f6f28d9fda5d1125435e7e9c5ca0c" width="300" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/78e07c03-1763-55ba-f84d-893636aafe16.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F78e07c03-1763-55ba-f84d-893636aafe16.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7b1ba964a3817afee5721d759b1ebe71 1x" loading="lazy"></a>  \n<p data-sourcepos="359:1-359:15">ドキドキ...</p>\n<a href="https://camo.qiitausercontent.com/5a04f24e67be4119ddc08b56f10fcd7d733ecc02/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f65316330396565652d616530342d343839372d373736332d3431313961613932303438302e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe1c09eee-ae04-4897-7763-4119aa920480.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d114dcda5514b5bdb541ca5d4b2ec0fc" width="300" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e1c09eee-ae04-4897-7763-4119aa920480.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe1c09eee-ae04-4897-7763-4119aa920480.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=77c23ca39613d124827c80a62c86a1c4 1x" loading="lazy"></a>\n<p data-sourcepos="363:1-363:18">やったー！！</p>\n<a href="https://camo.qiitausercontent.com/a9d11a5afb76c43cebf58ba21f58f72b1c09d84e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f65616630363666612d316638642d396437332d643934622d6631396530353464313833302e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Feaf066fa-1f8d-9d73-d94b-f19e054d1830.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=022ebefb3b153c6faa97da3508e1a1fe" width="400" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/eaf066fa-1f8d-9d73-d94b-f19e054d1830.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Feaf066fa-1f8d-9d73-d94b-f19e054d1830.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ea2c2f0d0a827fc1ad71dee378b381d9 1x" loading="lazy"></a>\n<p data-sourcepos="367:1-367:100">ちゃんと状態を保存している<code>keycloakState</code>にも認証情報が入っていますね👍</p>\n<a href="https://camo.qiitausercontent.com/d59513958ad68daa0a5763767df6a63e55bd32a2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f34306230613264382d623062372d633333342d363138612d6462366663646233363465382e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F40b0a2d8-b0b7-c334-618a-db6fcdb364e8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d8dd9d09507a759c975304dc10f7c981" width="400" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/40b0a2d8-b0b7-c334-618a-db6fcdb364e8.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F40b0a2d8-b0b7-c334-618a-db6fcdb364e8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=27eee0a1a21562b60839ff717acf058a 1x" loading="lazy"></a>\n<h1 data-sourcepos="371:1-371:14">\n<span id="8-まとめ" class="fragment"></span><a href="#8-%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>8. まとめ</h1>\n<h4 data-sourcepos="373:1-373:17">\n<span id="ai優秀" class="fragment"></span><a href="#ai%E5%84%AA%E7%A7%80"><i class="fa fa-link"></i></a><strong>AI優秀</strong>\n</h4>\n',body:'# はじめに\n\n* 認証サーバーとして`Keycloak`、フロントエンドビルドツールとして`SvelteKit`を採用し、\n構築するまでの手順を残していこうと思います。\n* ちょっと長いですがお付き合いください。\n\n# 環境\n\n<img width="300" src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/2996a114-a73e-51f3-cefe-fb43a3ba44fc.png" />\n\n* MacBook Air\n    * M2チップ 2022\n* Docker\n    * version 20.10.22\n* Docker Compose\n    * version v2.15.1\n* keycloak-js\n    * 20.0.5\n\n# 1. ネットの記事にあったdocker-composeファイルで構築してみる\n\n1. docker-compose.ymlの作成\n\n    ```bash\n    touch docker-compose.yml\n    ```\n    <details><summary>開く: docker-compose.yaml</summary>\n\n    ```yaml\n    version: \'3\'\n\n    volumes:\n      mysql_data:\n          driver: local\n\n    services:\n      mysql:\n          image: mysql:5.7\n          volumes:\n            - mysql_data:/var/lib/mysql\n          environment:\n            MYSQL_ROOT_PASSWORD: root\n            MYSQL_DATABASE: keycloak\n            MYSQL_USER: keycloak\n            MYSQL_PASSWORD: password\n      keycloak:\n          image: quay.io/keycloak/keycloak:legacy\n          environment:\n            DB_VENDOR: MYSQL\n            DB_ADDR: mysql\n            DB_DATABASE: keycloak\n            DB_USER: keycloak\n            DB_PASSWORD: password\n            KEYCLOAK_USER: admin\n            KEYCLOAK_PASSWORD: Pa55w0rd\n          ports:\n            - 8080:8080\n          depends_on:\n            - mysql\n    ```\n\n    </details>\n\n1. サーバー起動\n\n    ```bash\n    docker-compose up -d\n    ```\n\n    [http://localhost:8080](http://localhost:8080)でサーバーが立ち上がる\n\n    立ち上がるまでまあまあ時間はかかります\n\n# 2. レルム、クライアントの設定\n\n1. `realm`の作成\n1. `client`の作成\n1. 作成できたら、作成したclientの設定画面から、`Valid redirect URIs`と`Web Origins`にフロントエンドサーバーを登録する。\n\n    私はとりあえずローカルで試していたので`Valid redirect URIs`: `http://localhost:18080/*`、`Web Origins`: `http://localhost:18080`と設定しました。\n\n1. ユーザーの作成\n\n    1. `Users`から、`Add User`を選択し、ユーザー名を任意に設定し、`create`\n    2. 作成したユーザーの設定画面が開くので、`Credentials`タブを開き、`Set Password`でパスワードを設定する。  \n    ※ `Temporary`はOFFにしておく。\n\nこれで認証サーバー側の設定は完了。\n\n# 3. フロント側の準備\n\n1. Create Project\n\n    ```bash\n    npm create svelte@latest my-app\n    cd my-app\n    npm i\n    ```\n\n1. vite.config.tsの修正\n\n    ```typescript:vite.config.ts\n    import { sveltekit } from \'@sveltejs/kit/vite\';\n    import { defineConfig } from \'vite\';\n\n    export default defineConfig({\n      plugins: [sveltekit()],\n      server: {          // 追加\n        host: true,      // 追加\n        port: 18080      // 追加\n      }                  // 追加\n    });\n    ```\n\n    portは自由に設定してください。\n    ただし、`2. レルム、クライアントの設定`で設定したフロントサーバーのportに合わせるように。\n\n1. keycloak-jsのinstall\n\n    ```bash\n    npm i keycloak-js\n    ```\n\n1. サーバー起動\n\n    ```bash\n    npm run dev\n    ```\n\nこれでSvelteKitのwelcomeページが開くはず\n[http://localhost:18080](http://localhost:18080)\n\n<img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e1c09eee-ae04-4897-7763-4119aa920480.png" width="300" />\n\n# 4. keyclaok-jsを使って認証してみる\n\n1. インスタンス生成\n    \n    ```vue:+page.svelte(抜粋)\n    <script lang="ts">\n      import Keycloak from \'keycloak-js\'\n    \n      const keycloak = new Keycloak({\n        clientId: "クライアント名",\n        url: "http://localhost:8080/auth/",\n        realm: "レルム名",\n      })\n    <\/script>\n    ```\n    \n    `new Keycloak(*)`の部分にkeycloakの管理コンソールからconfigファイルをダウンロードしてきてそれを読ませる方法がネットにあがっていましたが、私のバージョンでは動きませんでした。\n    \n1. 認証処理を作成\n    \n    ```typescript:+page.svelte()\n      // 認証状態\n      let keycloakState = {\n        keycloak: null,\n        authenticated: false,\n      }\n    \n      const keycloak = new Keycloak({\n        clientId: "クライアント名",\n        url: "http://localhost:8080/auth/",\n        realm: "レルム名",\n      })\n    \n      // 認証処理\n      keycloak.init({\n        onLoad: \'login-required\',\n        redirectUri: \'http://localhost:18080/\',\n        scope: \'openid\'\n      })\n      .then((authenticated) => {\n        // 認証成功時には認証状態を更新する\n        keycloakState = {\n          keycloak: keycloak, authenticated: authenticated\n        };\n      })\n      .catch((e) => {\n        console.error(e)\n      });\n    ```\n\n1. 認証後にページ内容が表示されるようにawait blockを使う\n\n    ```vue:+page.svelte\n    <script lang="ts">\n      let keycloakState = {\n        keycloak: null,\n        authenticated: false,\n      }\n    \n      const signIn = async () => {\n        const keycloak = new Keycloak({\n          clientId: "クライアント名",\n          url: "http://localhost:8080/auth/",\n          realm: "レルム名",\n        })    \n        // 認証処理\n        keycloak.init({\n          onLoad: \'login-required\',\n          redirectUri: \'http://localhost:18080/\',\n          scope: \'openid\'\n        })\n        .then((authenticated) => {\n          // 認証成功時には認証状態を更新する\n          keycloakState = {\n            keycloak: keycloak, authenticated: authenticated\n          };\n        })\n        .catch((e) => {\n          console.error(e)\n        });\n      }\n    <\/script>\n    \n    {#await signIn()}\n      ...ログイン中\n    {:then data}\n      <section>\n        省略  \n      </section>\n    {/await}\n    ```\n\n1. 画面を開いてみる\n    \n    ![スクリーンショット 2023-02-23 22.01.20.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/78e07c03-1763-55ba-f84d-893636aafe16.png)\n    \n    **KeyCloakログイン画面が表示された！**\n    `2. レルム、クライアントの設定`で作成したユーザーでログインすると...\n\n\n    <img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e1c09eee-ae04-4897-7763-4119aa920480.png" width="300" />\n\n    welcomeページにリダイレクトされた!\n    成功！！かと思いきや、、、<font color="red">エラー発見</font>\n\n    <font color="red">token requestで401エラー</font>\n\n# 5. エラー調査\n\n```json\n  StatusCode: 401,\n  Response Body: {\n    "error":"unauthorized_client",\n    "error_description":"Client secret not provided in request"\n  } \n```\n\nよくわからなかったのでAIに聞いてみた。\n\n> **私**\n> token endpointを叩いたときにステータスコード401になってしまいます。 エラー内容は以下の通りです。 \n> {"error":"unauthorized_client","error_description":"Client secret not provided in request"} \n> 原因はなんだと思いますか？\n\n>  <font color="red">**AI**</font>\n> keycloakjsを使っているとのことですが、token endpointを叩くときにclient secretをリクエストに含めていますか？\n> client secretはaccess typeがconfidentialの場合に必要なパラメーターです。\n> client secretはKeycloakの管理コンソールで確認できます。\n\nなるほどなるほど。\nじゃあkeycloak-jsで**client secret**が設定できたらいいんだな！\n\n> **私**\n> keycloakjsを使っている時にclient secretを含める方法を教えてください\n\n> <font color="red">**AI**</font>\n> keycloakjsを使っている時にclient secretを含める方法は、keycloak-jsクライアントではサポートされていないようです。\n> keycloak-jsクライアントはpublic keycloak clientとして動作し、client secretを必要としません\n\nなるほどなるほど。\nじゃあKeycloak管理コンソール上で今使っているclientを**credentialなclientからpublicなclientへ**変えればいいんだな！\nと思ったが、**設定箇所が管理コンソール上に見当たらない...**\n\nこれもAIに聞いてみた\n\n> **私**\n> Dockerでquay.io/keycloak/keycloak:legacyのイメージを使用してkeycloakを起動していますが、\n> Access Typeを変更できる箇所が見当たりません。どこにありますか？\n\n> <font color="red">**AI**</font>\n> quay.io/keycloak/keycloak:legacyのイメージを使用しているとのことですが、そのイメージはKeycloakの古いバージョン（3.4.3.Final）を含んでいます。 \n> Access Typeの設定は、Keycloakの新しいバージョン（4.0以降）で導入されたものです。\n> そのため、Access Typeが管理コンソールに見つからないのだと思われます。 最新版のKeycloakを使用することをお勧めします。\n\n**優秀すぎる...**\nすぐにdocker-compose.ymlを書き換えました\n\n```yaml:docker-compose.yml\nversion: "3"\nservices:\n  keycloak:\n    image: jboss/keycloak:latest\n    environment:\n      KEYCLOAK_USER: keycloak\n      KEYCLOAK_PASSWORD: password\n    ports:\n      - 8080:8080\n```\n\n次は、、<font color="red">コンテナが立ち上がらない...!!</font>\n調べてみると**jboss/keycloak**は **Apple CPU搭載 Mac** 非対応のようです。。\n\n# 6. jboss/keycloakをMacで起動する\n\nhttps://qiita.com/tamaki_tech/items/3001577a5db1f0f43b56\n\nこちらの記事を参考にしました\n\n```bash\n# 1. git clone\ngit clone https://github.com/keycloak/keycloak-containers.git\n\n# 2.　ディレクトリ移動\n$ cd keycloak-containers/server\n\n# 3. ver19.0.3ブランチに移動する\n$ git checkout 19.0.3\n\n# 4. 任意のimage名・タグでdocker buildする\n$ docker build ./ -t jboss/keycloak:19.0.3\n```\n\n<img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/12659da4-348d-eb78-e8f8-415909071c8f.png" width="400" />\n\n作られていたらOK\n\nこのイメージを使うように`1. ネットの記事にあったdocker-composeファイルで構築してみる`で作った`docker-compose.yml`ファイルを修正する\n\n```yaml:docker-compose.yml\nversion: \'3\'\n\nservices:\n  keycloak:\n    image: jboss/keycloak:19.0.3\n    environment:\n      KEYCLOAK_USER: admin\n      KEYCLOAK_PASSWORD: password\n    ports:\n      - 8080:8080\n```\n\n起動OK。\n再度`2. レルム、クライアントの設定`をし直す。\n※ 👇の設定をOFFにした方が良さそう。\n\n<img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/dac6bad9-d45e-9dce-9d09-7a49910abd5a.png" width="300" />\n\n\n#  7. 再挑戦\n\nもう一度アプリ側からログインを試す。\n\n<img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/78e07c03-1763-55ba-f84d-893636aafe16.png" width="300"/>  \n\nドキドキ...\n\n<img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e1c09eee-ae04-4897-7763-4119aa920480.png" width="300" />\n\nやったー！！\n\n<img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/eaf066fa-1f8d-9d73-d94b-f19e054d1830.png" width="400" />\n\nちゃんと状態を保存している`keycloakState`にも認証情報が入っていますね👍\n\n<img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/40b0a2d8-b0b7-c334-618a-db6fcdb364e8.png" width="400" />\n\n# 8. まとめ\n\n#### **AI優秀**\n',coediting:!1,comments_count:0,created_at:"2023-02-23T22:55:43+09:00",group:null,id:"685c6ac112320172203b",likes_count:2,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"Mac",versions:[]},{name:"TypeScript",versions:[]},{name:"Keycloak",versions:[]},{name:"SvelteKit",versions:[]}],title:"【Keycloak + SvelteKit】Keycloakをdockerで構築し、keycloak-jsを使ってアプリケーションからログインできるまで悩んだ記録",updated_at:"2023-02-24T10:45:34+09:00",url:"https://qiita.com/maaaashi/items/685c6ac112320172203b",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:640,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<a href="https://camo.qiitausercontent.com/cfd0f4f6cff315b7fc0b970db217d4ed85f82093/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f38333732656230352d663534622d643836302d623234332d6339653063363535616636372e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F8372eb05-f54b-d860-b243-c9e0c655af67.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=452c9f8e29557b61cbd8022a1fe3641a" width="300" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/8372eb05-f54b-d860-b243-c9e0c655af67.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F8372eb05-f54b-d860-b243-c9e0c655af67.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e6765905c47b650b26fb3f836900bfd6 1x" loading="lazy"></a>\n<p data-sourcepos="5:1-7:103"><strong><a href="https://kit.svelte.jp/" rel="nofollow noopener" target="_blank">SvelteKit</a></strong>  + <strong><a href="https://flowbite-svelte.com/" rel="nofollow noopener" target="_blank">Flowbite-svelte</a></strong><br>\nでよくあるパスワードフォームの実装をしました。<br>\nよく使うと思うので、記事にしておき、使うときにコピペしようと思いますw</p>\n<p data-sourcepos="9:1-9:96">アイコンには <strong><a href="https://svelte-icons.vercel.app/" rel="nofollow noopener" target="_blank">svelte-icons</a></strong> を使っています。</p>\n<h2 data-sourcepos="12:1-12:21">\n<span id="完成イメージ" class="fragment"></span><a href="#%E5%AE%8C%E6%88%90%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8"><i class="fa fa-link"></i></a>完成イメージ</h2>\n<p data-sourcepos="14:1-14:164"><a href="https://camo.qiitausercontent.com/d77513d262d2e9e354bc2ece4a3ca3841384eca9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31333861623636322d396664332d653132622d313833322d3933373436333832633261622e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F138ab662-9fd3-e12b-1832-93746382c2ab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e039d1553339cc3ca20badc3baef93b5" alt="スクリーンショット 2023-02-18 23.15.30.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/138ab662-9fd3-e12b-1832-93746382c2ab.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F138ab662-9fd3-e12b-1832-93746382c2ab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3b6b579e7a666d2a936ab87aefbc7e0c 1x" loading="lazy"></a></p>\n<ul data-sourcepos="16:1-17:0">\n<li data-sourcepos="16:1-17:0">目のマークをクリックすると、パスワードが表示される</li>\n</ul>\n<p data-sourcepos="18:1-18:164"><a href="https://camo.qiitausercontent.com/759d97f523949b4f983049564b4ed1707848bd0b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f64323238323765352d613031372d623030362d393663342d6666373435656565396436622e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fd22827e5-a017-b006-96c4-ff745eee9d6b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f557c3590218fcf7bc2786577c340603" alt="スクリーンショット 2023-02-18 23.15.10.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/d22827e5-a017-b006-96c4-ff745eee9d6b.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fd22827e5-a017-b006-96c4-ff745eee9d6b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=931f14df7a9dc6a94df4fad5678e2161 1x" loading="lazy"></a></p>\n<h1 data-sourcepos="21:1-21:55">\n<span id="flowbite-svelte導入" class="fragment"></span><a href="#flowbite-svelte%E5%B0%8E%E5%85%A5"><i class="fa fa-link"></i></a><a href="https://flowbite-svelte.com/" rel="nofollow noopener" target="_blank">Flowbite-svelte</a>導入</h1>\n<ol data-sourcepos="23:1-48:0">\n<li data-sourcepos="23:1-35:0">\n<p data-sourcepos="23:4-23:52"><code>svelte-add</code>で<code>tailwindcss</code>のインストール</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="25:5-34:7"><div class="highlight"><pre><code>// npm\n<span class="nv">$ </span>npx svelte-add@latest tailwindcss\n\n// yarn\n<span class="nv">$ </span>yarn <span class="nt">-s</span> run svelte-add@latest tailwindcss\n\n// pnpm\n<span class="nv">$ </span>pnpm dlx svelte-add@latest tailwindcss\n</code></pre></div></div>\n</li>\n<li data-sourcepos="36:1-48:0">\n<p data-sourcepos="36:4-36:39">依存関係含めインストール</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="38:5-47:7"><div class="highlight"><pre><code>// npm\n<span class="nv">$ </span>npm i <span class="nt">-D</span> flowbite flowbite-svelte classnames @popperjs/core\n\n// yarn\n<span class="nv">$ </span>yarn add flowbite flowbite-svelte classnames @popperjs/core\n\n// pnpm\n<span class="nv">$ </span>pnpm i <span class="nt">-D</span> flowbite flowbite-svelte classnames @popperjs/core\n</code></pre></div></div>\n</li>\n</ol>\n<h1 data-sourcepos="49:1-49:56">\n<span id="svelte-icons導入" class="fragment"></span><a href="#svelte-icons%E5%B0%8E%E5%85%A5"><i class="fa fa-link"></i></a><a href="https://svelte-icons.vercel.app/" rel="nofollow noopener" target="_blank">svelte-icons</a>導入</h1>\n<div class="code-frame" data-lang="text" data-sourcepos="51:1-60:3"><div class="highlight"><pre><code>// npm\n$ npm i -D svelte-icons\n\n// yarn\n$ yarn add svelte-icons\n\n// pnpm\n$ pnpm i -D svelte-icons\n</code></pre></div></div>\n<h1 data-sourcepos="62:1-62:8">\n<span id="実装" class="fragment"></span><a href="#%E5%AE%9F%E8%A3%85"><i class="fa fa-link"></i></a>実装</h1>\n<h2 data-sourcepos="64:1-64:33">\n<span id="先にソースコードから" class="fragment"></span><a href="#%E5%85%88%E3%81%AB%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8B%E3%82%89"><i class="fa fa-link"></i></a>先にソースコードから</h2>\n<div class="code-frame" data-lang="vue" data-sourcepos="66:1-111:3">\n<div class="code-lang"><span class="bold">+page.svelte</span></div>\n<div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">Heading</span><span class="p">,</span> <span class="nx">Input</span><span class="p">,</span> <span class="nx">Label</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">flowbite-svelte</span><span class="dl">"</span><span class="p">;</span>\n  <span class="k">import</span> <span class="nx">FaRegEyeSlash</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">svelte-icons/fa/FaRegEyeSlash.svelte</span><span class="dl">\'</span>\n  <span class="k">import</span> <span class="nx">FaRegEye</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">svelte-icons/fa/FaRegEye.svelte</span><span class="dl">\'</span>\n  <span class="kd">let</span> <span class="nx">email</span> <span class="o">=</span> <span class="dl">\'\'</span>\n  <span class="kd">let</span> <span class="nx">password</span> <span class="o">=</span> <span class="dl">\'\'</span>\n  <span class="kd">let</span> <span class="nx">passwordFormType</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">password</span><span class="dl">\'</span> <span class="o">|</span> <span class="dl">\'</span><span class="s1">text</span><span class="dl">\'</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">password</span><span class="dl">\'</span>\n  <span class="kd">let</span> <span class="nx">viewPassword</span> <span class="o">=</span> <span class="kc">false</span>\n\n  <span class="kd">const</span> <span class="nx">clickHandler</span> <span class="o">=</span> <span class="p">():</span> <span class="k">void</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="nx">viewPassword</span> <span class="o">=</span> <span class="o">!</span><span class="nx">viewPassword</span>\n    <span class="nf">if </span><span class="p">(</span><span class="nx">viewPassword</span><span class="p">)</span> <span class="nx">passwordFormType</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">text</span><span class="dl">\'</span>\n    <span class="k">else</span> <span class="nx">passwordFormType</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">password</span><span class="dl">\'</span>\n  <span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"h-full w-4/5 mx-auto mt-10 p-5 border bg-gray-100 rounded-lg"</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"login"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"text-center"</span><span class="nt">&gt;</span>\n      <span class="nt">&lt;Heading</span> <span class="na">tag=</span><span class="s">"h3"</span><span class="nt">&gt;</span>SignIn<span class="nt">&lt;/Heading&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;Label</span> <span class="na">for=</span><span class="s">"email"</span><span class="nt">&gt;</span>email<span class="nt">&lt;/Label&gt;</span>\n    <span class="nt">&lt;Input</span>\n      <span class="na">id=</span><span class="s">"email"</span>\n      <span class="na">bind:value=</span><span class="s">{email}</span>\n      <span class="na">type=</span><span class="s">"email"</span>\n    <span class="nt">/&gt;</span>\n\n    <span class="nt">&lt;Label</span> <span class="na">for=</span><span class="s">"password"</span><span class="nt">&gt;</span>password<span class="nt">&lt;/Label&gt;</span>\n    <span class="nt">&lt;Input</span>\n      <span class="na">id=</span><span class="s">"password"</span>\n      <span class="na">bind:value=</span><span class="s">{password}</span>\n      <span class="na">type=</span><span class="s">{passwordFormType}</span>\n    <span class="nt">&gt;</span>\n      <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"h-1/2"</span> <span class="na">slot=</span><span class="s">"right"</span> <span class="na">on:click=</span><span class="s">{clickHandler}</span><span class="nt">&gt;</span>\n        {#if viewPassword}\n          <span class="nt">&lt;FaRegEye</span> <span class="nt">/&gt;</span>\n          {:else}\n          <span class="nt">&lt;FaRegEyeSlash</span> <span class="nt">/&gt;</span>\n        {/if}\n      <span class="nt">&lt;/button&gt;</span>\n    <span class="nt">&lt;/Input&gt;</span>\n  <span class="nt">&lt;/form&gt;</span>\n<span class="nt">&lt;/div&gt;</span>\n</code></pre></div>\n</div>\n<h2 data-sourcepos="113:1-113:30">\n<span id="目のアイコンの表示" class="fragment"></span><a href="#%E7%9B%AE%E3%81%AE%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%AE%E8%A1%A8%E7%A4%BA"><i class="fa fa-link"></i></a>目のアイコンの表示</h2>\n<p data-sourcepos="115:1-115:91"><code>&lt;Input&gt;&lt;/Input&gt;</code>コンポーネントの<code>slot="right"</code>にボタンを入れています。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="117:1-131:3"><div class="highlight"><pre><code><span class="nt">&lt;Input</span>\n  <span class="na">id=</span><span class="s">"password"</span>\n  <span class="na">bind:value=</span><span class="s">{password}</span>\n  <span class="na">type=</span><span class="s">{passwordFormType}</span>\n<span class="nt">&gt;</span>\n  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"h-1/2"</span> <span class="na">slot=</span><span class="s">"right"</span> <span class="na">on:click=</span><span class="s">{clickHandler}</span><span class="nt">&gt;</span>\n    {#if viewPassword}\n      <span class="nt">&lt;FaRegEye</span> <span class="nt">/&gt;</span>\n    {:else}\n      <span class="nt">&lt;FaRegEyeSlash</span> <span class="nt">/&gt;</span>\n    {/if}\n  <span class="nt">&lt;/button&gt;</span>\n<span class="nt">&lt;/Input&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="133:1-133:99">これによりフォームの右側に目のアイコンを表示させることができます。</p>\n<a href="https://camo.qiitausercontent.com/3aa1e2b771d829b38b3517ea70e3adaf8bb8ae50/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f39623637623532342d633361642d343264322d613038362d6638396163336531376162302e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F9b67b524-c3ad-42d2-a086-f89ac3e17ab0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9674670d292f414305beee8308a201b1" width="100" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/9b67b524-c3ad-42d2-a086-f89ac3e17ab0.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F9b67b524-c3ad-42d2-a086-f89ac3e17ab0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6aaa45cb37aa1d22341bc294e08b224d 1x" loading="lazy"></a>\n<h2 data-sourcepos="137:1-137:36">\n<span id="パスワード表示--非表示" class="fragment"></span><a href="#%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E8%A1%A8%E7%A4%BA--%E9%9D%9E%E8%A1%A8%E7%A4%BA"><i class="fa fa-link"></i></a>パスワード表示 / 非表示</h2>\n<ol data-sourcepos="139:1-144:0">\n<li data-sourcepos="139:1-141:54">パスワードフォームの<code>type</code>を変数に持っておきます。\n<ul data-sourcepos="140:5-141:54">\n<li data-sourcepos="140:5-140:27">初期値: \'password\'</li>\n<li data-sourcepos="141:5-141:54">例のソースコードでは<code>passwordFormType</code>\n</li>\n</ul>\n</li>\n<li data-sourcepos="142:1-142:70">アイコンの切り替え用にflagも定義しておきます。</li>\n<li data-sourcepos="143:1-144:0">先ほど表示させたボタンの<code>on:click</code>属性で1.2.で定めた値を書き換えます</li>\n</ol>\n<div class="code-frame" data-lang="vue" data-sourcepos="145:1-162:3">\n<div class="code-lang"><span class="bold">一部抜粋</span></div>\n<div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="kd">let</span> <span class="nx">password</span> <span class="o">=</span> <span class="dl">""</span>\n  <span class="kd">let</span> <span class="nx">passwordFormType</span><span class="p">:</span> <span class="dl">"</span><span class="s2">password</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">password</span><span class="dl">"</span>\n  <span class="kd">const</span> <span class="nx">clickHandler</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="nx">viewPassword</span> <span class="o">=</span> <span class="o">!</span><span class="nx">viewPassword</span>\n    <span class="nf">if </span><span class="p">(</span><span class="nx">viewPassword</span><span class="p">)</span> <span class="nx">passwordFormType</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">text</span><span class="dl">\'</span>\n    <span class="k">else</span> <span class="nx">passwordFormType</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">password</span><span class="dl">\'</span>\n  <span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;Input</span> <span class="na">type=</span><span class="s">{passwordFormType}</span> <span class="na">bind:value=</span><span class="s">{password}</span> <span class="nt">&gt;</span>\n    <span class="nt">&lt;button</span>\n        <span class="na">type=</span><span class="s">"button"</span>\n        <span class="na">class=</span><span class="s">"h-1/2"</span>\n        <span class="na">slot=</span><span class="s">"right"</span>\n        <span class="na">on:click=</span><span class="s">{clickHandler}</span><span class="nt">&gt;</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="164:1-165:120">これでフォーム横のアイコンをクリックしたときに<br>\nパスワードフォームの<code>type</code>が切り替わり、表示非表示を切り替えることができるでしょう</p>\n',body:'# はじめに\n\n<img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/8372eb05-f54b-d860-b243-c9e0c655af67.png" width="300"/>\n\n**[SvelteKit](https://kit.svelte.jp/)**  + **[Flowbite-svelte](https://flowbite-svelte.com/)**\nでよくあるパスワードフォームの実装をしました。\nよく使うと思うので、記事にしておき、使うときにコピペしようと思いますw\n\nアイコンには **[svelte-icons](https://svelte-icons.vercel.app/)** を使っています。\n\n\n## 完成イメージ\n\n![スクリーンショット 2023-02-18 23.15.30.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/138ab662-9fd3-e12b-1832-93746382c2ab.png)\n\n* 目のマークをクリックすると、パスワードが表示される\n\n![スクリーンショット 2023-02-18 23.15.10.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/d22827e5-a017-b006-96c4-ff745eee9d6b.png)\n\n\n# [Flowbite-svelte](https://flowbite-svelte.com/)導入\n\n1. `svelte-add`で`tailwindcss`のインストール\n\n    ```bash\n    // npm\n    $ npx svelte-add@latest tailwindcss\n    \n    // yarn\n    $ yarn -s run svelte-add@latest tailwindcss\n    \n    // pnpm\n    $ pnpm dlx svelte-add@latest tailwindcss\n    ```\n\n1. 依存関係含めインストール\n\n    ```bash\n    // npm\n    $ npm i -D flowbite flowbite-svelte classnames @popperjs/core\n    \n    // yarn\n    $ yarn add flowbite flowbite-svelte classnames @popperjs/core\n    \n    // pnpm\n    $ pnpm i -D flowbite flowbite-svelte classnames @popperjs/core\n    ```\n\n# [svelte-icons](https://svelte-icons.vercel.app/)導入\n\n```\n// npm\n$ npm i -D svelte-icons\n\n// yarn\n$ yarn add svelte-icons\n\n// pnpm\n$ pnpm i -D svelte-icons\n```\n\n# 実装\n\n## 先にソースコードから\n\n```vue:+page.svelte\n<script lang="ts">\n  import { Heading, Input, Label } from "flowbite-svelte";\n  import FaRegEyeSlash from \'svelte-icons/fa/FaRegEyeSlash.svelte\'\n  import FaRegEye from \'svelte-icons/fa/FaRegEye.svelte\'\n  let email = \'\'\n  let password = \'\'\n  let passwordFormType: \'password\' | \'text\' = \'password\'\n  let viewPassword = false\n\n  const clickHandler = (): void => {\n    viewPassword = !viewPassword\n    if (viewPassword) passwordFormType = \'text\'\n    else passwordFormType = \'password\'\n  }\n<\/script>\n\n<div class="h-full w-4/5 mx-auto mt-10 p-5 border bg-gray-100 rounded-lg">\n  <form action="login">\n    <div class="text-center">\n      <Heading tag="h3">SignIn</Heading>\n    </div>\n    <Label for="email">email</Label>\n    <Input\n      id="email"\n      bind:value={email}\n      type="email"\n    />\n\n    <Label for="password">password</Label>\n    <Input\n      id="password"\n      bind:value={password}\n      type={passwordFormType}\n    >\n      <button type="button" class="h-1/2" slot="right" on:click={clickHandler}>\n        {#if viewPassword}\n          <FaRegEye />\n          {:else}\n          <FaRegEyeSlash />\n        {/if}\n      </button>\n    </Input>\n  </form>\n</div>\n```\n\n## 目のアイコンの表示\n\n`<Input></Input>`コンポーネントの`slot="right"`にボタンを入れています。\n\n```vue\n<Input\n  id="password"\n  bind:value={password}\n  type={passwordFormType}\n>\n  <button type="button" class="h-1/2" slot="right" on:click={clickHandler}>\n    {#if viewPassword}\n      <FaRegEye />\n    {:else}\n      <FaRegEyeSlash />\n    {/if}\n  </button>\n</Input>\n```\n\nこれによりフォームの右側に目のアイコンを表示させることができます。\n\n<img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/9b67b524-c3ad-42d2-a086-f89ac3e17ab0.png" width="100"/>\n\n## パスワード表示 / 非表示\n\n1. パスワードフォームの`type`を変数に持っておきます。\n    * 初期値: \'password\'\n    * 例のソースコードでは`passwordFormType`\n1. アイコンの切り替え用にflagも定義しておきます。\n1. 先ほど表示させたボタンの`on:click`属性で1.2.で定めた値を書き換えます\n\n```vue:一部抜粋\n<script lang="ts">\n  let password = ""\n  let passwordFormType: "password" | "text" = "password"\n  const clickHandler = () => {\n    viewPassword = !viewPassword\n    if (viewPassword) passwordFormType = \'text\'\n    else passwordFormType = \'password\'\n  }\n<\/script>\n\n<Input type={passwordFormType} bind:value={password} >\n    <button\n        type="button"\n        class="h-1/2"\n        slot="right"\n        on:click={clickHandler}>\n```\n\nこれでフォーム横のアイコンをクリックしたときに\nパスワードフォームの`type`が切り替わり、表示非表示を切り替えることができるでしょう\n\n',coediting:!1,comments_count:0,created_at:"2023-02-18T23:36:34+09:00",group:null,id:"fbeb32b4ec1663fc1383",likes_count:3,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"TypeScript",versions:[]},{name:"tailwindcss",versions:[]},{name:"SvelteKit",versions:[]}],title:"【SvelteKit + Flowbite-svelte + svelte-icons】よくあるパスワードフォームを実装する",updated_at:"2023-02-18T23:36:34+09:00",url:"https://qiita.com/maaaashi/items/fbeb32b4ec1663fc1383",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:407,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<h3 data-sourcepos="3:1-3:10">\n<span id="前提" class="fragment"></span><a href="#%E5%89%8D%E6%8F%90"><i class="fa fa-link"></i></a>前提</h3>\n<p data-sourcepos="5:1-7:121"><strong>SvelteKit</strong>では、<br>\n<strong>+page.svelte</strong>や、 <strong>+page.ts</strong>に書くことで<font color="green">クライアントサイド</font>でjsを動かすことができ、<br>\n*<strong>.server.ts</strong>に書くことで<font color="blue">サーバーサイド</font>でjsを動かすことができます。</p>\n<p data-sourcepos="9:1-9:34"><strong>今回やりたかったこと</strong></p>\n<ul data-sourcepos="11:1-13:0">\n<li data-sourcepos="11:1-11:50">ログインしていればそのまま表示、</li>\n<li data-sourcepos="12:1-13:0">ログインしていないときは任意のパスへとリダイレクトさせる</li>\n</ul>\n<p data-sourcepos="14:1-16:59">いつもは<font color="green">クライアントサイド</font>のjsに処理を書いているが、<br>\nそれだとログインしていなくても一瞬ログイン後の画面が出てしまっていた。<br>\n(画面表示後にリダイレクト処理が動くため)</p>\n<p data-sourcepos="18:1-19:177">画面表示前に動く<font color="blue">サーバーサイド</font>でリダイレクトさせることでその事象を抑えたかったが、<br>\n普段<font color="green">クライアントサイド</font>で書いているやり方ではリダイレクトさせることができなかったのでそのときのメモ。</p>\n<h1 data-sourcepos="22:1-22:92">\n<span id="クライアントサイドでリダイレクトさせる場合" class="fragment"></span><a href="#%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%82%B5%E3%82%A4%E3%83%89%E3%81%A7%E3%83%AA%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%83%88%E3%81%95%E3%81%9B%E3%82%8B%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a><font color="green">クライアントサイド</font>でリダイレクトさせる場合</h1>\n<div class="code-frame" data-lang="vue" data-sourcepos="24:1-37:3">\n<div class="code-lang"><span class="bold">+layout.svelte</span></div>\n<div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">goto</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">$app/navigation</span><span class="dl">"</span><span class="p">;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">onMount</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">svelte</span><span class="dl">"</span><span class="p">;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">page</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">$app/store</span><span class="dl">"</span><span class="p">;</span>\n\n  <span class="nf">onMount</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="kd">const</span> <span class="nx">session</span> <span class="o">=</span> <span class="nf">getSession</span><span class="p">()</span>\n\t<span class="nf">if</span><span class="p">(</span><span class="o">!</span><span class="nx">session</span> <span class="o">&amp;&amp;</span> <span class="nx">$page</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">pathname</span> <span class="o">!==</span> <span class="dl">\'</span><span class="s1">/auth</span><span class="dl">\'</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nf">goto</span><span class="p">(</span><span class="dl">\'</span><span class="s1">/auth</span><span class="dl">\'</span><span class="p">)</span>\n\t<span class="p">}</span>\n  <span class="p">})</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="39:1-40:72"><code>app</code>モジュールの<code>goto</code>を使うことでリダイレクトさせることができます。<br>\n(当然window.location.href = ""でもリダイレクトできます。)</p>\n<p data-sourcepos="42:1-42:53">※ <code>goto</code>はonMount内でのみ使用できます。</p>\n<p data-sourcepos="44:1-44:115"><font color="red">この場合一瞬ですが、ログイン後の画面が表示されてしまいます。</font></p>\n<h2 data-sourcepos="46:1-46:18">\n<span id="goto使い方" class="fragment"></span><a href="#goto%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a><code>goto</code>使い方</h2>\n<h3 data-sourcepos="48:1-48:7">\n<span id="型" class="fragment"></span><a href="#%E5%9E%8B"><i class="fa fa-link"></i></a>型</h3>\n<div class="code-frame" data-lang="typescript" data-sourcepos="50:1-58:3"><div class="highlight"><pre><code><span class="nf">goto</span><span class="p">(</span><span class="nx">url</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="nx">URL</span><span class="p">,</span> <span class="nx">opts</span><span class="p">?:</span> <span class="p">{</span>\n    <span class="nx">replaceState</span><span class="p">?:</span> <span class="nx">boolean</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">;</span>\n    <span class="nl">noScroll</span><span class="p">?:</span> <span class="nx">boolean</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">;</span>\n    <span class="nl">keepFocus</span><span class="p">?:</span> <span class="nx">boolean</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">;</span>\n    <span class="nl">state</span><span class="p">?:</span> <span class="kr">any</span><span class="p">;</span>\n    <span class="nl">invalidateAll</span><span class="p">?:</span> <span class="nx">boolean</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">;</span>\n<span class="p">}</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">)</span>\n</code></pre></div></div>\n<h3 data-sourcepos="60:1-60:7">\n<span id="例" class="fragment"></span><a href="#%E4%BE%8B"><i class="fa fa-link"></i></a>例</h3>\n<div class="code-frame" data-lang="typescript" data-sourcepos="62:1-76:3"><div class="highlight"><pre><code><span class="c1">// example 1</span>\n<span class="nf">goto</span><span class="p">(</span><span class="dl">\'</span><span class="s1">/auth</span><span class="dl">\'</span><span class="p">)</span>\n\n<span class="c1">// example 2</span>\n<span class="kd">const</span> <span class="nx">base</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">https://hogehoge.com</span><span class="dl">\'</span>\n<span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">URL</span><span class="p">(</span><span class="dl">\'</span><span class="s1">/auth</span><span class="dl">\'</span><span class="p">,</span> <span class="nx">base</span><span class="p">)</span>\n<span class="nf">goto</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>\n\n<span class="c1">// example 3</span>\n<span class="kd">const</span> <span class="nx">opt</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">replaceState</span><span class="p">:</span> <span class="kc">true</span>\n<span class="p">}</span>\n<span class="nf">goto</span><span class="p">(</span><span class="dl">\'</span><span class="s1">/auth</span><span class="dl">\'</span><span class="p">,</span> <span class="nx">opt</span><span class="p">)</span>\n</code></pre></div></div>\n<p data-sourcepos="78:1-78:30">こんな感じのようです</p>\n<h1 data-sourcepos="80:1-80:85">\n<span id="サーバーサイドでリダイレクトさせる場合" class="fragment"></span><a href="#%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%B5%E3%82%A4%E3%83%89%E3%81%A7%E3%83%AA%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%83%88%E3%81%95%E3%81%9B%E3%82%8B%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a><font color="blue">サーバーサイド</font>でリダイレクトさせる場合</h1>\n<div class="code-frame" data-lang="typescript" data-sourcepos="82:1-98:3">\n<div class="code-lang"><span class="bold">+layout.server.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">redirect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@sveltejs/kit</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="nx">supabase</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../supabase</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="cm">/** @type {import(\'./$types\').PageServerLoad} */</span>\n<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">load</span><span class="p">({</span> <span class="nx">url</span> <span class="p">})</span> <span class="p">{</span>\n  <span class="kd">const</span> <span class="nx">session</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">supabase</span><span class="p">.</span><span class="nx">auth</span><span class="p">.</span><span class="nf">getSession</span><span class="p">()</span>\n\n  <span class="nf">if </span><span class="p">(</span><span class="nx">session</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">session</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="nx">session</span><span class="p">;</span>\n  <span class="p">}</span>\n\n  <span class="nf">if </span><span class="p">(</span><span class="nx">url</span><span class="p">.</span><span class="nx">pathname</span> <span class="o">!==</span> <span class="dl">\'</span><span class="s1">/auth</span><span class="dl">\'</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">throw</span> <span class="nf">redirect</span><span class="p">(</span><span class="mi">301</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">/auth</span><span class="dl">\'</span><span class="p">)</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="100:1-101:105"><code>redirect</code>を使うことでリダイレクトさせることができます。<br>\nこちらであれば一瞬画面が表示されちゃうみたいなことはありませんでした。</p>\n<h2 data-sourcepos="103:1-103:23">\n<span id="redirect-使い方" class="fragment"></span><a href="#redirect-%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a><code>redirect</code> 使い方</h2>\n<h3 data-sourcepos="105:1-105:7">\n<span id="型-1" class="fragment"></span><a href="#%E5%9E%8B-1"><i class="fa fa-link"></i></a>型</h3>\n<div class="code-frame" data-lang="typescript" data-sourcepos="107:1-110:3"><div class="highlight"><pre><code><span class="nf">redirect</span><span class="p">(</span><span class="nx">status</span><span class="p">:</span> <span class="mi">300</span> <span class="o">|</span> <span class="mi">301</span> <span class="o">|</span> <span class="mi">302</span> <span class="o">|</span> <span class="mi">303</span> <span class="o">|</span> <span class="mi">304</span> <span class="o">|</span> <span class="mi">305</span> <span class="o">|</span> <span class="mi">306</span> <span class="o">|</span> <span class="mi">307</span> <span class="o">|</span> <span class="mi">308</span><span class="p">,</span>\n         <span class="nx">location</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span>\n</code></pre></div></div>\n<h3 data-sourcepos="112:1-112:7">\n<span id="例-1" class="fragment"></span><a href="#%E4%BE%8B-1"><i class="fa fa-link"></i></a>例</h3>\n<div class="code-frame" data-lang="typescript" data-sourcepos="114:1-121:3"><div class="highlight"><pre><code><span class="c1">// OK</span>\n<span class="nf">redirect</span><span class="p">(</span><span class="mi">301</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">/auth</span><span class="dl">\'</span><span class="p">)</span>\n\n<span class="c1">// NG</span>\n<span class="nf">redirect</span><span class="p">(</span><span class="dl">\'</span><span class="s1">/auth</span><span class="dl">\'</span><span class="p">)</span>\n<span class="nf">redirect</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">/auth</span><span class="dl">\'</span><span class="p">)</span>\n</code></pre></div></div>\n',body:'# はじめに\n\n### 前提\n\n**SvelteKit**では、\n**+page.svelte**や、 **+page.ts**に書くことで<font color="green">クライアントサイド</font>でjsを動かすことができ、\n***.server.ts**に書くことで<font color="blue">サーバーサイド</font>でjsを動かすことができます。\n\n**今回やりたかったこと**\n\n* ログインしていればそのまま表示、\n* ログインしていないときは任意のパスへとリダイレクトさせる\n\nいつもは<font color="green">クライアントサイド</font>のjsに処理を書いているが、\nそれだとログインしていなくても一瞬ログイン後の画面が出てしまっていた。\n(画面表示後にリダイレクト処理が動くため)\n\n画面表示前に動く<font color="blue">サーバーサイド</font>でリダイレクトさせることでその事象を抑えたかったが、\n普段<font color="green">クライアントサイド</font>で書いているやり方ではリダイレクトさせることができなかったのでそのときのメモ。\n\n\n# <font color="green">クライアントサイド</font>でリダイレクトさせる場合\n\n```vue:+layout.svelte\n<script lang="ts">\n  import { goto } from "$app/navigation";\n  import { onMount } from "svelte";\n  import { page } from "$app/store";\n\n  onMount(() => {\n    const session = getSession()\n\tif(!session && $page.url.pathname !== \'/auth\') {\n      goto(\'/auth\')\n\t}\n  })\n<\/script>\n```\n\n`app`モジュールの`goto`を使うことでリダイレクトさせることができます。\n(当然window.location.href = ""でもリダイレクトできます。)\n\n※ `goto`はonMount内でのみ使用できます。\n\n<font color="red">この場合一瞬ですが、ログイン後の画面が表示されてしまいます。</font>\n\n## `goto`使い方\n\n### 型\n\n```typescript\ngoto(url: string | URL, opts?: {\n    replaceState?: boolean | undefined;\n    noScroll?: boolean | undefined;\n    keepFocus?: boolean | undefined;\n    state?: any;\n    invalidateAll?: boolean | undefined;\n} | undefined)\n```\n\n### 例\n\n```typescript\n// example 1\ngoto(\'/auth\')\n\n// example 2\nconst base = \'https://hogehoge.com\'\nconst url = new URL(\'/auth\', base)\ngoto(url)\n\n// example 3\nconst opt = {\n  replaceState: true\n}\ngoto(\'/auth\', opt)\n```\n\nこんな感じのようです\n\n# <font color="blue">サーバーサイド</font>でリダイレクトさせる場合\n\n```typescript:+layout.server.ts\nimport { redirect } from "@sveltejs/kit";\nimport supabase from "../supabase";\n\n/** @type {import(\'./$types\').PageServerLoad} */\nexport async function load({ url }) {\n  const session = await supabase.auth.getSession()\n\n  if (session.data.session) {\n    return session;\n  }\n\n  if (url.pathname !== \'/auth\') {\n    throw redirect(301, \'/auth\')\n  }\n}\n```\n\n`redirect`を使うことでリダイレクトさせることができます。\nこちらであれば一瞬画面が表示されちゃうみたいなことはありませんでした。\n\n## `redirect` 使い方\n\n### 型\n\n```typescript\nredirect(status: 300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308,\n         location: string)\n```\n\n### 例\n\n```typescript\n// OK\nredirect(301, \'/auth\')\n\n// NG\nredirect(\'/auth\')\nredirect(200, \'/auth\')\n```\n\n',coediting:!1,comments_count:0,created_at:"2023-02-18T21:42:07+09:00",group:null,id:"77782694be12c1123cc8",likes_count:6,private:!1,reactions_count:0,stocks_count:3,tags:[{name:"TypeScript",versions:[]},{name:"SvelteKit",versions:[]}],title:"【SvelteKit】クライアントサイドとサーバーサイドでのリダイレクトのさせ方の違いについて",updated_at:"2023-02-18T21:47:14+09:00",url:"https://qiita.com/maaaashi/items/77782694be12c1123cc8",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:2794,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<ul data-sourcepos="3:1-5:0">\n<li data-sourcepos="3:1-3:74">\n<code>serverless.yml</code>内に<code>api</code>の情報や認証情報を載せたくない</li>\n<li data-sourcepos="4:1-5:0">\n<code>local</code>, <code>dev</code>, <code>production</code>で値を変えたい</li>\n</ul>\n<p data-sourcepos="6:1-7:57">そんな時は<code>.env</code>ファイルに変数を格納することが多いと思うので、<br>\n<code>ServerlessFramework</code>で<code>.env</code>を使うときのメモ。</p>\n<h1 data-sourcepos="10:1-10:14">\n<span id="導入方法" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>導入方法</h1>\n<ol data-sourcepos="12:1-65:0">\n<li data-sourcepos="12:1-23:0">\n<p data-sourcepos="12:4-12:55"><code>serverless.[yml, ts]</code>ファイルにpluginの記載</p>\n<div class="code-frame" data-lang="yaml" data-sourcepos="14:5-18:7">\n<div class="code-lang"><span class="bold">serverless.yml</span></div>\n<div class="highlight"><pre><code><span class="na">plugins</span><span class="pi">:</span>\n  <span class="pi">-</span> <span class="s">...</span>\n  <span class="pi">-</span> <span class="s">serverless-dotenv-plugin</span>\n</code></pre></div>\n</div>\n<div class="code-frame" data-lang="typescript" data-sourcepos="20:5-22:7">\n<div class="code-lang"><span class="bold">serverless.ts</span></div>\n<div class="highlight"><pre><code>  <span class="nx">plugins</span><span class="p">:</span> <span class="p">[...,</span> <span class="dl">\'</span><span class="s1">serverless-dotenv-plugin</span><span class="dl">\'</span><span class="p">],</span>\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos="24:1-39:0">\n<p data-sourcepos="24:4-24:79"><code>serverless.[yml, ts]</code>ファイルの修正(すでに書いてあればSKIP)</p>\n<div class="code-frame" data-lang="yaml" data-sourcepos="26:5-30:7">\n<div class="code-lang"><span class="bold">serverless.yml</span></div>\n<div class="highlight"><pre><code><span class="na">provider</span><span class="pi">:</span>\n  <span class="na">environment</span><span class="pi">:</span>\n  <span class="c1"># ここに.envを読み込んだ環境変数が入るようになります</span>\n</code></pre></div>\n</div>\n<div class="code-frame" data-lang="typescript" data-sourcepos="32:5-38:7">\n<div class="code-lang"><span class="bold">serverless.ts</span></div>\n<div class="highlight"><pre><code><span class="nx">provider</span><span class="p">:</span> <span class="p">{</span>\n  <span class="nl">environment</span><span class="p">:</span> <span class="p">{</span>\n    <span class="c1">// ここに.envを読み込んだ環境変数が入るようになります</span>\n  <span class="p">}</span>\n<span class="p">},</span>\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos="40:1-52:4">\n<p data-sourcepos="40:4-40:50"><code>serverless-dotenv-plugin</code>のインストール</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="42:5-51:7"><div class="highlight"><pre><code><span class="c"># npm</span>\n<span class="nv">$ </span>npm i <span class="nt">--save-dev</span> serverless-dotenv-plugin\n\n<span class="c"># yarn</span>\n<span class="nv">$ </span>yarn add <span class="nt">--dev</span> serverless-dotenv-plugin\n\n<span class="c"># pnpm</span>\n<span class="nv">$ </span>pnpm i <span class="nt">--save-dev</span> serverless-dotenv-plugin\n</code></pre></div></div>\n</li>\n<li data-sourcepos="53:1-65:0">\n<p data-sourcepos="53:4-53:16">.envの作成</p>\n<p data-sourcepos="55:5-55:89"><code>serverless.[yml, ts]</code>と同じディレクトリに<code>.env</code>ファイルを作成する</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="57:5-64:7"><div class="highlight"><pre><code><span class="nv">$ </span><span class="nb">ls</span>\n...\nserverless.[yaml, ts]\n...\n\n<span class="nv">$ </span><span class="nb">touch</span> .env\n</code></pre></div></div>\n</li>\n</ol>\n<h1 data-sourcepos="66:1-66:20">\n<span id="動かしてみる" class="fragment"></span><a href="#%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>動かしてみる</h1>\n<p data-sourcepos="68:1-68:51">まずは<code>.env</code>に適当な変数を入れてみる</p>\n<div class="code-frame" data-lang="text" data-sourcepos="70:1-72:3">\n<div class="code-lang"><span class="bold">.env</span></div>\n<div class="highlight"><pre><code>QIITA=hoge\n</code></pre></div>\n</div>\n<p data-sourcepos="74:1-74:98"><code>sls print</code>で実際にデプロイされる変数が入った後のファイルを見てみる。</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="76:1-83:3"><div class="highlight"><pre><code><span class="nv">$ </span>sls print\n\n・・・・省略\n  environment:\n    QIITA: hoge\n・・・・省略\n</code></pre></div></div>\n<p data-sourcepos="85:1-86:55"><code>serverless.yml</code>には<code>QIITA</code>の記載はしていないですが、<br>\nちゃんと<code>.env</code>から変数が入りましたね👍</p>\n<h1 data-sourcepos="88:1-88:24">\n<span id="envenvについて" class="fragment"></span><a href="#envenv%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><i class="fa fa-link"></i></a>.env.{env}について</h1>\n<h4 data-sourcepos="90:1-90:123">\n<span id="envlocal-にはシークレット情報が載るためgit管理はやめましょう" class="fragment"></span><a href="#envlocal-%E3%81%AB%E3%81%AF%E3%82%B7%E3%83%BC%E3%82%AF%E3%83%AC%E3%83%83%E3%83%88%E6%83%85%E5%A0%B1%E3%81%8C%E8%BC%89%E3%82%8B%E3%81%9F%E3%82%81git%E7%AE%A1%E7%90%86%E3%81%AF%E3%82%84%E3%82%81%E3%81%BE%E3%81%97%E3%82%87%E3%81%86"><i class="fa fa-link"></i></a><font color="red"><code>.env.*.local</code> にはシークレット情報が載るため、git管理はやめましょう</font>\n</h4>\n<h3 data-sourcepos="92:1-92:8">\n<span id="env" class="fragment"></span><a href="#env"><i class="fa fa-link"></i></a>.env</h3>\n<ul data-sourcepos="94:1-96:0">\n<li data-sourcepos="94:1-94:38">デフォルトで呼ばれます。</li>\n<li data-sourcepos="95:1-96:0">例) 環境に依存しないデフォルト値の設定などで使います。</li>\n</ul>\n<h3 data-sourcepos="97:1-97:14">\n<span id="envlocal" class="fragment"></span><a href="#envlocal"><i class="fa fa-link"></i></a>.env.local</h3>\n<ul data-sourcepos="99:1-101:0">\n<li data-sourcepos="99:1-99:86">環境に依存しないが、シークレットにしたいものを入れます。</li>\n<li data-sourcepos="100:1-101:0">例) 個人のアカウント情報など</li>\n</ul>\n<h3 data-sourcepos="102:1-102:20">\n<span id="envdevelopment" class="fragment"></span><a href="#envdevelopment"><i class="fa fa-link"></i></a>.env.development</h3>\n<ul data-sourcepos="104:1-106:0">\n<li data-sourcepos="104:1-104:79">\n<code>NODE_ENV</code>や<code>--env</code>や<code>--stage</code>が指定されない場合に呼ばれます</li>\n<li data-sourcepos="105:1-106:0">例) 開発環境で使われるデフォルト値を入れます。</li>\n</ul>\n<h3 data-sourcepos="107:1-107:26">\n<span id="envdevelopmentlocal" class="fragment"></span><a href="#envdevelopmentlocal"><i class="fa fa-link"></i></a>.env.development.local</h3>\n<ul data-sourcepos="109:1-111:0">\n<li data-sourcepos="109:1-109:91">\n<code>NODE_ENV</code>や<code>--env</code>や<code>--stage</code>が指定されない場合のシークレット情報。</li>\n<li data-sourcepos="110:1-111:0">例) 開発環境で使われるAPI_KEY情報など</li>\n</ul>\n<h3 data-sourcepos="112:1-112:14">\n<span id="envenv" class="fragment"></span><a href="#envenv"><i class="fa fa-link"></i></a>.env.{env}</h3>\n<ul data-sourcepos="114:1-116:0">\n<li data-sourcepos="114:1-114:100">\n<code>NODE_ENV</code>や<code>--env</code>や<code>--stage</code>が指定されている場合に使われるデフォルト値。</li>\n<li data-sourcepos="115:1-116:0">例) <code>sls deploy --env production</code>時には<code>.env.production</code>が呼ばれます。</li>\n</ul>\n<h3 data-sourcepos="117:1-117:19">\n<span id="envenvlocal" class="fragment"></span><a href="#envenvlocal"><i class="fa fa-link"></i></a>env.{ENV}.local</h3>\n<ul data-sourcepos="119:1-121:0">\n<li data-sourcepos="119:1-119:94">\n<code>NODE_ENV</code>や<code>--env</code>や<code>--stage</code>が指定されている場合のシークレット情報。</li>\n<li data-sourcepos="120:1-121:0">例) <code>sls deploy --env production</code>時には<code>.env.production.local</code>が呼ばれます。</li>\n</ul>\n<h4 data-sourcepos="122:1-122:158">\n<span id="envlocal-にはシークレット情報が載るためgit管理はやめましょう大事なことなので２回" class="fragment"></span><a href="#envlocal-%E3%81%AB%E3%81%AF%E3%82%B7%E3%83%BC%E3%82%AF%E3%83%AC%E3%83%83%E3%83%88%E6%83%85%E5%A0%B1%E3%81%8C%E8%BC%89%E3%82%8B%E3%81%9F%E3%82%81git%E7%AE%A1%E7%90%86%E3%81%AF%E3%82%84%E3%82%81%E3%81%BE%E3%81%97%E3%82%87%E3%81%86%E5%A4%A7%E4%BA%8B%E3%81%AA%E3%81%93%E3%81%A8%E3%81%AA%E3%81%AE%E3%81%A7%EF%BC%92%E5%9B%9E"><i class="fa fa-link"></i></a><font color="red"><code>.env.*.local</code> にはシークレット情報が載るため、git管理はやめましょう(大事なことなので２回...)</font>\n</h4>\n<h1 data-sourcepos="125:1-125:17">\n<span id="オプション" class="fragment"></span><a href="#%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3"><i class="fa fa-link"></i></a>オプション</h1>\n<p data-sourcepos="127:1-129:66">rootディレクトリの設定ができたり、色々できそうです。<br>\nデフォルトのままでも十分使えますが、プロジェクトによって設定してみても良いと思います。<br>\n気になる方は公式サイトを確認してみてください</p>\n<div class="code-frame" data-lang="yaml" data-sourcepos="131:1-136:3">\n<div class="code-lang"><span class="bold">serverless.yml</span></div>\n<div class="highlight"><pre><code><span class="na">custom</span><span class="pi">:</span>\n  <span class="na">dotenv</span><span class="pi">:</span>\n    <span class="c1"># default: project root</span>\n    <span class="na">path</span><span class="pi">:</span> <span class="s">path/to/my/dotenvfiles</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos="138:1-138:8">\n<span id="参考" class="fragment"></span><a href="#%E5%8F%82%E8%80%83"><i class="fa fa-link"></i></a>参考</h1>\n<p data-sourcepos="140:1-140:59"><iframe id="qiita-embed-content__869bae63018638ea1f9ba30bb2f6476f" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__869bae63018638ea1f9ba30bb2f6476f" data-content="https%3A%2F%2Fwww.serverless.com%2Fplugins%2Fserverless-dotenv-plugin" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n',body:'# はじめに\n\n* `serverless.yml`内に`api`の情報や認証情報を載せたくない\n* `local`, `dev`, `production`で値を変えたい\n\nそんな時は`.env`ファイルに変数を格納することが多いと思うので、\n`ServerlessFramework`で`.env`を使うときのメモ。\n\n\n# 導入方法\n\n1. `serverless.[yml, ts]`ファイルにpluginの記載\n\n    ```yaml:serverless.yml\n    plugins:\n      - ...\n      - serverless-dotenv-plugin\n    ```\n    \n    ```typescript:serverless.ts\n      plugins: [..., \'serverless-dotenv-plugin\'],\n    ```\n\n1. `serverless.[yml, ts]`ファイルの修正(すでに書いてあればSKIP)\n    \n    ```yaml:serverless.yml\n    provider:\n      environment:\n      # ここに.envを読み込んだ環境変数が入るようになります\n    ```\n\n    ```typescript:serverless.ts\n    provider: {\n      environment: {\n        // ここに.envを読み込んだ環境変数が入るようになります\n      }\n    },\n    ```\n\n1. `serverless-dotenv-plugin`のインストール\n    \n    ```bash\n    # npm\n    $ npm i --save-dev serverless-dotenv-plugin\n    \n    # yarn\n    $ yarn add --dev serverless-dotenv-plugin\n    \n    # pnpm\n    $ pnpm i --save-dev serverless-dotenv-plugin\n    ```\n    \n1. .envの作成\n\n    `serverless.[yml, ts]`と同じディレクトリに`.env`ファイルを作成する\n\n    ```bash\n    $ ls\n    ...\n    serverless.[yaml, ts]\n    ...\n    \n    $ touch .env\n    ```\n\n# 動かしてみる\n\nまずは`.env`に適当な変数を入れてみる\n\n```.env\nQIITA=hoge\n```\n\n`sls print`で実際にデプロイされる変数が入った後のファイルを見てみる。\n\n```bash\n$ sls print\n\n・・・・省略\n  environment:\n    QIITA: hoge\n・・・・省略\n```\n\n`serverless.yml`には`QIITA`の記載はしていないですが、\nちゃんと`.env`から変数が入りましたね👍\n\n# .env.{env}について\n\n#### <font color="red">`.env.*.local` にはシークレット情報が載るため、git管理はやめましょう</font>\n\n### .env\n\n* デフォルトで呼ばれます。\n* 例) 環境に依存しないデフォルト値の設定などで使います。\n\n### .env.local\n\n* 環境に依存しないが、シークレットにしたいものを入れます。\n* 例) 個人のアカウント情報など\n\n### .env.development\n\n* `NODE_ENV`や`--env`や`--stage`が指定されない場合に呼ばれます\n* 例) 開発環境で使われるデフォルト値を入れます。\n\n### .env.development.local\n\n* `NODE_ENV`や`--env`や`--stage`が指定されない場合のシークレット情報。\n* 例) 開発環境で使われるAPI_KEY情報など\n\n### .env.{env}\n\n* `NODE_ENV`や`--env`や`--stage`が指定されている場合に使われるデフォルト値。\n* 例) `sls deploy --env production`時には`.env.production`が呼ばれます。\n\n### env.{ENV}.local\n\n* `NODE_ENV`や`--env`や`--stage`が指定されている場合のシークレット情報。\n* 例) `sls deploy --env production`時には`.env.production.local`が呼ばれます。\n\n#### <font color="red">`.env.*.local` にはシークレット情報が載るため、git管理はやめましょう(大事なことなので２回...)</font>\n\n\n# オプション\n\nrootディレクトリの設定ができたり、色々できそうです。\nデフォルトのままでも十分使えますが、プロジェクトによって設定してみても良いと思います。\n気になる方は公式サイトを確認してみてください\n\n```yaml:serverless.yml\ncustom:\n  dotenv:\n    # default: project root\n    path: path/to/my/dotenvfiles\n```\n\n# 参考\n\nhttps://www.serverless.com/plugins/serverless-dotenv-plugin\n',coediting:!1,comments_count:0,created_at:"2023-02-17T08:26:55+09:00",group:null,id:"b810920b589c701ecdfc",likes_count:3,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"ServerlessFramework",versions:[]}],title:"serverless frameworkで.envを使う",updated_at:"2023-02-26T18:05:24+09:00",url:"https://qiita.com/maaaashi/items/b810920b589c701ecdfc",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:312,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:97"><code>AWS Lambda</code> <code>runtime: nodejs</code>を使って<br>\n<code>S3</code>にファイルをアップロードしようとした際につまづいたことをメモ。</p>\n<h1 data-sourcepos="6:1-6:8">\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h1>\n<ul data-sourcepos="8:1-10:0">\n<li data-sourcepos="8:1-10:0">aws-lambda\n<ul data-sourcepos="9:5-10:0">\n<li data-sourcepos="9:5-10:0">runtime: nodejs 14.*</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos="11:1-11:8">\n<span id="結論" class="fragment"></span><a href="#%E7%B5%90%E8%AB%96"><i class="fa fa-link"></i></a>結論</h1>\n<h4 data-sourcepos="13:1-13:86">\n<span id="aws-sdkにはv2とv3がある" class="fragment"></span><a href="#aws-sdk%E3%81%AB%E3%81%AFv2%E3%81%A8v3%E3%81%8C%E3%81%82%E3%82%8B"><i class="fa fa-link"></i></a><code>aws-sdk</code>には<font color="red">V2</font>と<font color="red">V3</font>がある</h4>\n<h4 data-sourcepos="15:1-15:70">\n<span id="そして私の環境ではv2だと動きませんでした" class="fragment"></span><a href="#%E3%81%9D%E3%81%97%E3%81%A6%E7%A7%81%E3%81%AE%E7%92%B0%E5%A2%83%E3%81%A7%E3%81%AFv2%E3%81%A0%E3%81%A8%E5%8B%95%E3%81%8D%E3%81%BE%E3%81%9B%E3%82%93%E3%81%A7%E3%81%97%E3%81%9F"><i class="fa fa-link"></i></a>そして、私の環境ではV2だと動きませんでした。</h4>\n<p data-sourcepos="17:1-17:45">クラメソにも記事がありました。</p>\n<p data-sourcepos="19:1-19:70"><iframe id="qiita-embed-content__f6af85c7a251cbe9c460652de1fac748" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__f6af85c7a251cbe9c460652de1fac748" data-content="https%3A%2F%2Fdev.classmethod.jp%2Farticles%2Faws-sdk-for-javascript-v2-v3-diff%2F" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<h1 data-sourcepos="21:1-21:23">\n<span id="導入方法の違い" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5%E6%96%B9%E6%B3%95%E3%81%AE%E9%81%95%E3%81%84"><i class="fa fa-link"></i></a>導入方法の違い</h1>\n<div class="code-frame" data-lang="bash" data-sourcepos="23:1-29:3"><div class="highlight"><pre><code>// V2\n<span class="nv">$ </span>npm <span class="nb">install </span>aws-sdk\n\n// V3\n<span class="nv">$ </span>npm <span class="nb">install</span> @aws-sdk/client-s3\n</code></pre></div></div>\n<h1 data-sourcepos="31:1-31:55">\n<span id="s3へオブジェクトをuploadするときの違い" class="fragment"></span><a href="#s3%E3%81%B8%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92upload%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E9%81%95%E3%81%84"><i class="fa fa-link"></i></a>S3へオブジェクトをuploadするときの違い</h1>\n<h2 data-sourcepos="33:1-33:14">\n<span id="v2の場合" class="fragment"></span><a href="#v2%E3%81%AE%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a>V2の場合</h2>\n<div class="code-frame" data-lang="typescript" data-sourcepos="35:1-56:3"><div class="highlight"><pre><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">AWS</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">aws-sdk</span><span class="dl">\'</span>\n\n<span class="nx">AWS</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">apiVersions</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">s3</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">2006-03-01</span><span class="dl">\'</span><span class="p">,</span>\n<span class="p">};</span>\n\n<span class="kd">const</span> <span class="nx">putObject</span> <span class="o">=</span> <span class="nf">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="kd">var</span> <span class="nx">s3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nc">S3</span><span class="p">();</span>\n  \n  <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>\n    <span class="na">Body</span><span class="p">:</span> <span class="o">&lt;</span><span class="nb">Object</span><span class="o">&gt;</span><span class="p">,</span> \n    <span class="na">Bucket</span><span class="p">:</span> <span class="o">&lt;</span><span class="nx">Bucket名</span><span class="o">&gt;</span><span class="p">,</span> \n    <span class="na">Key</span><span class="p">:</span>  <span class="o">&lt;</span><span class="nx">Object名</span><span class="o">&gt;</span><span class="p">,</span>\n  <span class="p">};</span>\n  \n  <span class="nx">s3</span><span class="p">.</span><span class="nf">putObject</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="nf">if </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>\n    <span class="k">else</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>\n  <span class="p">});</span>\n<span class="p">}</span>\n</code></pre></div></div>\n<h2 data-sourcepos="58:1-58:14">\n<span id="v3の場合" class="fragment"></span><a href="#v3%E3%81%AE%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a>V3の場合</h2>\n<div class="code-frame" data-lang="typescript" data-sourcepos="60:1-77:3"><div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">S3Client</span><span class="p">,</span> <span class="nx">PutObjectCommand</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@aws-sdk/client-s3</span><span class="dl">\'</span><span class="p">;</span>\n\n<span class="kd">const</span> <span class="nx">putObject</span> <span class="o">=</span> <span class="nf">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="kd">const</span> <span class="nx">s3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">S3Client</span><span class="p">({</span>\n    <span class="na">region</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">ap-northeast-1</span><span class="dl">\'</span>\n  <span class="p">})</span>\n  \n  <span class="kd">const</span> <span class="nx">command</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PutObjectCommand</span><span class="p">({</span>\n    <span class="na">Body</span><span class="p">:</span> <span class="o">&lt;</span><span class="nb">Object</span><span class="o">&gt;</span><span class="p">,</span> \n    <span class="na">Bucket</span><span class="p">:</span> <span class="o">&lt;</span><span class="nx">Bucket名</span><span class="o">&gt;</span><span class="p">,</span> \n    <span class="na">Key</span><span class="p">:</span>  <span class="o">&lt;</span><span class="nx">Object名</span><span class="o">&gt;</span><span class="p">,</span>\n  <span class="p">})</span>\n  \n  <span class="k">await</span> <span class="nx">s3</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nx">command</span><span class="p">)</span>\n<span class="p">}</span>\n\n</code></pre></div></div>\n<h1 data-sourcepos="79:1-79:11">\n<span id="最後に" class="fragment"></span><a href="#%E6%9C%80%E5%BE%8C%E3%81%AB"><i class="fa fa-link"></i></a>最後に</h1>\n<p data-sourcepos="81:1-81:92">V2は2023年にメンテナンスモードになるらしいので、V3を使いましょう</p>\n',body:"# はじめに\n\n`AWS Lambda` `runtime: nodejs`を使って\n`S3`にファイルをアップロードしようとした際につまづいたことをメモ。\n\n# 環境\n\n* aws-lambda\n    * runtime: nodejs 14.*\n\n# 結論\n\n#### `aws-sdk`には<font color=\"red\">V2</font>と<font color=\"red\">V3</font>がある\n\n#### そして、私の環境ではV2だと動きませんでした。\n\nクラメソにも記事がありました。\n\nhttps://dev.classmethod.jp/articles/aws-sdk-for-javascript-v2-v3-diff/\n\n# 導入方法の違い\n\n```bash\n// V2\n$ npm install aws-sdk\n\n// V3\n$ npm install @aws-sdk/client-s3\n```\n\n# S3へオブジェクトをuploadするときの違い\n\n## V2の場合\n\n```typescript\nimport * as AWS from 'aws-sdk'\n\nAWS.config.apiVersions = {\n  s3: '2006-03-01',\n};\n\nconst putObject = async () => {\n  var s3 = new AWS.S3();\n  \n  var params = {\n    Body: <Object>, \n    Bucket: <Bucket名>, \n    Key:  <Object名>,\n  };\n  \n  s3.putObject(params, (err, data) => {\n    if (err) console.log(err);\n    else console.log(data);\n  });\n}\n```\n\n## V3の場合\n\n```typescript\nimport { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';\n\nconst putObject = async () => {\n  const s3 = new S3Client({\n    region: 'ap-northeast-1'\n  })\n  \n  const command = new PutObjectCommand({\n    Body: <Object>, \n    Bucket: <Bucket名>, \n    Key:  <Object名>,\n  })\n  \n  await s3.send(command)\n}\n\n```\n\n# 最後に\n\nV2は2023年にメンテナンスモードになるらしいので、V3を使いましょう\n",coediting:!1,comments_count:0,created_at:"2023-02-16T19:19:13+09:00",group:null,id:"c568bf36e5399b7df8f2",likes_count:3,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Node.js",versions:[]},{name:"AWS",versions:[]}],title:"nodejsでaws-sdkを使った時にハマったこと",updated_at:"2023-02-16T19:19:13+09:00",url:"https://qiita.com/maaaashi/items/c568bf36e5399b7df8f2",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:929,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-3:198"><code>ServerlessFramework</code>の<code>aws-nodejs-typescript</code>テンプレートを使って構築したlambdaを使った<code>Step Functions</code>を構築した時にエラーになったので、修正内容をメモ。</p>\n<h1 data-sourcepos="6:1-6:22">\n<span id="step-functionsとは" class="fragment"></span><a href="#step-functions%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>Step Functionsとは</h1>\n<p data-sourcepos="8:1-8:39">こちらの記事がわかりやすい</p>\n<p data-sourcepos="10:1-10:60"><iframe id="qiita-embed-content__10842835b3a565a12ac27e7cb1c33c0d" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__10842835b3a565a12ac27e7cb1c33c0d" data-content="https%3A%2F%2Fqiita.com%2Fmiyuki_samitani%2Fitems%2F6c58d107cdc86d938fe3" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<h1 data-sourcepos="12:1-12:22">\n<span id="step-funcitons構築" class="fragment"></span><a href="#step-funcitons%E6%A7%8B%E7%AF%89"><i class="fa fa-link"></i></a>Step Funcitons構築</h1>\n<ol data-sourcepos="15:1-157:0">\n<li data-sourcepos="15:1-35:0">\n<p data-sourcepos="15:4-15:13">sls create</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="17:5-19:7"><div class="highlight"><pre><code>sls create <span class="nt">--template</span> aws-nodejs-typescript\n</code></pre></div></div>\n<p data-sourcepos="21:5-21:49">これで以下ファイルが生成される</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="23:5-34:7"><div class="highlight"><pre><code><span class="nv">$ </span>tree <span class="nt">-L</span> 1\n<span class="nb">.</span>\n├── README.md\n├── node_modules\n├── package.json\n├── pnpm-lock.yaml\n├── serverless.ts\n├── src\n├── tsconfig.json\n└── tsconfig.paths.json\n</code></pre></div></div>\n</li>\n<li data-sourcepos="36:1-51:0">\n<p data-sourcepos="36:4-36:59">Plugin: <code>serverless-step-functions</code>のインストール</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="38:5-46:7">\n<div class="code-lang"><span class="bold">serverless.yml</span></div>\n<div class="highlight"><pre><code>  <span class="nx">service</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">step-functions</span><span class="dl">\'</span><span class="p">,</span>\n  <span class="nx">frameworkVersion</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">3</span><span class="dl">\'</span><span class="p">,</span>\n<span class="err">　　　　</span><span class="c1">// serverless-step-functions追加</span>\n  <span class="nx">plugins</span><span class="p">:</span> <span class="p">[</span><span class="dl">\'</span><span class="s1">serverless-esbuild</span><span class="dl">\'</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">serverless-step-functions</span><span class="dl">\'</span><span class="p">],</span>\n  <span class="nx">provider</span><span class="p">:</span> <span class="p">{</span>\n    <span class="nl">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">aws</span><span class="dl">\'</span><span class="p">,</span>\n    <span class="nx">runtime</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">nodejs14.x</span><span class="dl">\'</span><span class="p">,</span>\n</code></pre></div>\n</div>\n<div class="code-frame" data-lang="bash" data-sourcepos="48:5-50:7"><div class="highlight"><pre><code>serverless plugin <span class="nb">install</span> <span class="nt">-n</span> serverless-step-functions\n</code></pre></div></div>\n</li>\n<li data-sourcepos="52:1-125:0">\n<p data-sourcepos="52:4-52:25">serverless.tsの修正</p>\n<p data-sourcepos="54:5-55:84">今回は試しとして、lambdaが１つだけある構成で作ってみる。<br>\nlambdaは<code>POST: hellow</code>がすでに作られているので、それを使う。</p>\n<p data-sourcepos="57:5-58:142">構成<br>\n<a href="https://camo.qiitausercontent.com/e4d3b12182e95b28fbb8cceddb902a29d18eb187/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f66643534326564642d646534662d663732642d346635372d3038653736373339633439362e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Ffd542edd-de4f-f72d-4f57-08e76739c496.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4c7d8b360f173210a13b449c3b24df0a" width="400" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/fd542edd-de4f-f72d-4f57-08e76739c496.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Ffd542edd-de4f-f72d-4f57-08e76739c496.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8538179ffd6bd8b7823e0ec3fe09e37d 1x" loading="lazy"></a></p>\n<p data-sourcepos="60:5-60:37">公式から例を拾ってくる</p>\n<div class="code-frame" data-lang="yaml" data-sourcepos="62:5-80:7">\n<div class="code-lang"><span class="bold">serverless.yml</span></div>\n<div class="highlight"><pre><code><span class="na">stepFunctions</span><span class="pi">:</span>\n  <span class="na">stateMachines</span><span class="pi">:</span>\n    <span class="na">hellostepfunc1</span><span class="pi">:</span>\n      <span class="na">events</span><span class="pi">:</span>\n        <span class="pi">-</span> <span class="na">http</span><span class="pi">:</span>\n            <span class="na">path</span><span class="pi">:</span> <span class="s">gofunction</span>\n            <span class="na">method</span><span class="pi">:</span> <span class="s">GET</span>\n      <span class="na">name</span><span class="pi">:</span> <span class="s">myStateMachine</span>\n      <span class="na">definition</span><span class="pi">:</span>\n        <span class="na">Comment</span><span class="pi">:</span> <span class="s2">"</span><span class="s">A</span><span class="nv"> </span><span class="s">Hello</span><span class="nv"> </span><span class="s">World</span><span class="nv"> </span><span class="s">example</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">Amazon</span><span class="nv"> </span><span class="s">States</span><span class="nv"> </span><span class="s">Language</span><span class="nv"> </span><span class="s">using</span><span class="nv"> </span><span class="s">an</span><span class="nv"> </span><span class="s">AWS</span><span class="nv"> </span><span class="s">Lambda</span><span class="nv"> </span><span class="s">Function"</span>\n        <span class="na">StartAt</span><span class="pi">:</span> <span class="s">HelloWorld1</span>\n        <span class="na">States</span><span class="pi">:</span>\n          <span class="na">HelloWorld1</span><span class="pi">:</span>\n            <span class="na">Type</span><span class="pi">:</span> <span class="s">Task</span>\n            <span class="na">Resource</span><span class="pi">:</span>\n              <span class="na">Fn::GetAtt</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">hello</span><span class="pi">,</span> <span class="nv">Arn</span><span class="pi">]</span>\n            <span class="na">End</span><span class="pi">:</span> <span class="kc">true</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="82:5-82:109">これを<code>POST</code>にし、corsを有効にして、`serverless.tsに書き直すと↓のようになる。</p>\n<p data-sourcepos="84:5-84:71">ただし、Commentは使えなかったので外しています。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="86:5-124:7">\n<div class="code-lang"><span class="bold">serverless.ts</span></div>\n<div class="highlight"><pre><code>  <span class="nx">stepFunctions</span><span class="p">:</span> <span class="p">{</span>\n    <span class="nl">stateMachines</span><span class="p">:</span> <span class="p">{</span>\n      <span class="na">hellostepfunc1</span><span class="p">:</span> <span class="p">{</span>\n        <span class="na">events</span><span class="p">:</span> <span class="p">[{</span>\n          <span class="na">http</span><span class="p">:</span> <span class="p">{</span>\n            <span class="na">path</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">gofunction</span><span class="dl">\'</span><span class="p">,</span>\n            <span class="na">method</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">POST</span><span class="dl">\'</span><span class="p">,</span>\n            <span class="na">cors</span><span class="p">:</span> <span class="p">{</span>\n              <span class="na">origin</span><span class="p">:</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">,</span>\n              <span class="na">headers</span><span class="p">:</span> <span class="p">[</span>\n                <span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">,</span>\n                <span class="dl">"</span><span class="s2">X-Amz-Date</span><span class="dl">"</span><span class="p">,</span>\n                <span class="dl">"</span><span class="s2">Authorization</span><span class="dl">"</span><span class="p">,</span>\n                <span class="dl">"</span><span class="s2">X-Api-Key</span><span class="dl">"</span><span class="p">,</span>\n                <span class="dl">"</span><span class="s2">X-Amz-Security-Token</span><span class="dl">"</span><span class="p">,</span>\n                <span class="dl">"</span><span class="s2">X-Amz-User-Agent</span><span class="dl">"</span>\n              <span class="p">]</span>\n            <span class="p">}</span>\n          <span class="p">}</span>\n        <span class="p">}],</span>\n        <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">myStateMachine</span><span class="dl">\'</span><span class="p">,</span>\n        <span class="na">definition</span><span class="p">:</span> <span class="p">{</span>\n          <span class="na">Commnet</span><span class="p">:</span> <span class="dl">"</span><span class="s2">A Hello World example of the Amazon States Language using an AWS Lambda Function</span><span class="dl">"</span><span class="p">,</span>\n          <span class="na">StartAt</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">HelloWorld1</span><span class="dl">\'</span><span class="p">,</span>\n          <span class="na">States</span><span class="p">:</span> <span class="p">{</span>\n            <span class="na">HelloWorld1</span><span class="p">:</span> <span class="p">{</span>\n              <span class="na">Type</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">Task</span><span class="dl">\'</span><span class="p">,</span>\n              <span class="na">Resource</span><span class="p">:</span> <span class="p">{</span>\n                <span class="dl">\'</span><span class="s1">Fn::GetAtt</span><span class="dl">\'</span><span class="p">:</span> <span class="p">[</span><span class="dl">\'</span><span class="s1">hello</span><span class="dl">\'</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">Arn</span><span class="dl">\'</span><span class="p">]</span>\n              <span class="p">},</span>\n              <span class="na">End</span><span class="p">:</span> <span class="kc">true</span>\n            <span class="p">}</span>\n          <span class="p">}</span>\n        <span class="p">}</span>\n      <span class="p">}</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos="126:1-137:0">\n<p data-sourcepos="126:4-126:15">デプロイ</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="128:5-136:7"><div class="highlight"><pre><code>sls deploy\n\n・・・\n\n✔ Serverless StepFunctions OutPuts\nendpoints:\n  POST - https://<span class="k">************</span>.execute-api.us-east-1.amazonaws.com/dev/gofunction\n</code></pre></div></div>\n</li>\n<li data-sourcepos="138:1-147:0">\n<p data-sourcepos="138:4-138:40">POSTリクエストを送ってみる</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="140:5-144:7"><div class="highlight"><pre><code><span class="nv">$ </span>curl <span class="nt">-X</span> POST <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">-d</span> <span class="s1">\'{"name":"太郎"}\'</span> https://<span class="k">***********</span>.execute-api.us-east-1.amazonaws.com/dev/gofunction\n\n<span class="o">{</span><span class="s2">"executionArn"</span>:<span class="s2">"arn:aws:states:us-east-1:**********:execution:myStateMachine:***************-*******"</span>,<span class="s2">"startDate"</span>:1.67637299142E9<span class="o">}</span>\n</code></pre></div></div>\n<p data-sourcepos="146:5-146:52">それらしいレスポンスが帰ってきた</p>\n</li>\n<li data-sourcepos="148:1-157:0">\n<p data-sourcepos="148:4-148:75">マネジメントコンソールから実行結果を確認してみる</p>\n<p data-sourcepos="150:5-150:167"><a href="https://camo.qiitausercontent.com/d31ef013c3b9a74b4c4d38178504e3e94a04ebad/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f38323963376662372d393566632d356331642d373930632d3831633334643636656136652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F829c7fb7-95fc-5c1d-790c-81c34d66ea6e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6be3532c96a99745a734c0f0a0b23cbe" alt="スクリーンショット 2023-02-14 1.49.39.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/829c7fb7-95fc-5c1d-790c-81c34d66ea6e.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F829c7fb7-95fc-5c1d-790c-81c34d66ea6e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0c5f81f95274c1f870849552cfdaae3e 1x" loading="lazy"></a></p>\n<p data-sourcepos="152:5-152:142"><a href="https://camo.qiitausercontent.com/833b1f6c21e1da800284f9942fb1cbb48765f2f4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f63336261666538302d303733332d616634632d656635322d3832623739313963313235362e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fc3bafe80-0733-af4c-ef52-82b7919c1256.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a646a7b070cf519e9faa14a0723e9079" width="250" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/c3bafe80-0733-af4c-ef52-82b7919c1256.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fc3bafe80-0733-af4c-ef52-82b7919c1256.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3b06421b3e67362a9286ff235a74c94d 1x" loading="lazy"></a></p>\n<p data-sourcepos="155:5-155:47"><font color="red">失敗していた</font></p>\n</li>\n</ol>\n<h1 data-sourcepos="158:1-158:23">\n<span id="失敗の原因調査" class="fragment"></span><a href="#%E5%A4%B1%E6%95%97%E3%81%AE%E5%8E%9F%E5%9B%A0%E8%AA%BF%E6%9F%BB"><i class="fa fa-link"></i></a>失敗の原因調査</h1>\n<p data-sourcepos="160:1-160:89">step functionsでは失敗のログが出力されるので、それを確認すると、</p>\n<div class="code-frame" data-lang="json" data-sourcepos="162:1-175:3">\n<div class="code-lang"><span class="bold">Type</span></div>\n<div class="highlight"><pre><code><span class="p">{</span><span class="w">\n  </span><span class="nl">"errorType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"TypeError"</span><span class="p">,</span><span class="w">\n  </span><span class="nl">"errorMessage"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Cannot read property \'Content-Type\' of undefined"</span><span class="p">,</span><span class="w">\n  </span><span class="nl">"trace"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">\n    </span><span class="s2">"TypeError: Cannot read property \'Content-Type\' of undefined"</span><span class="p">,</span><span class="w">\n    </span><span class="s2">"    at httpJsonBodyParserMiddlewareBefore (/node_modules/.pnpm/@middy+http-json-body-parser@3.6.2/node_modules/@middy/http-json-body-parser/index.js:13:29)"</span><span class="p">,</span><span class="w">\n    </span><span class="s2">"    at runMiddlewares (/node_modules/.pnpm/@middy+core@3.6.2/node_modules/@middy/core/index.js:118:27)"</span><span class="p">,</span><span class="w">\n    </span><span class="s2">"    at runRequest (/node_modules/.pnpm/@middy+core@3.6.2/node_modules/@middy/core/index.js:78:15)"</span><span class="p">,</span><span class="w">\n    </span><span class="s2">"    at Runtime.middy2 (/node_modules/.pnpm/@middy+core@3.6.2/node_modules/@middy/core/index.js:32:16)"</span><span class="p">,</span><span class="w">\n    </span><span class="s2">"    at Runtime.handleOnceNonStreaming (/var/runtime/Runtime.js:74:25)"</span><span class="w">\n  </span><span class="p">]</span><span class="w">\n</span><span class="p">}</span><span class="w">\n</span></code></pre></div>\n</div>\n<p data-sourcepos="177:1-177:116">このように出ており、<code>middy</code>で<code>Content-Type</code>が<code>undefined</code>に対して呼ばれているようでした。</p>\n<p data-sourcepos="179:1-179:76">実際にlambdaのコードを見てみると、この部分でした。👇</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="181:1-186:3"><div class="highlight"><pre><code>  <span class="kd">const</span> <span class="nx">httpJsonBodyParserMiddlewareBefore</span> <span class="o">=</span> <span class="nf">async </span><span class="p">(</span><span class="nx">request</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="kd">const</span> <span class="p">{</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">body</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">event</span><span class="p">;</span>\n    <span class="c1">// headersがundefinedになっていた</span>\n    <span class="kd">const</span> <span class="nx">contentType</span> <span class="o">=</span> <span class="nx">headers</span><span class="p">[</span><span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">]</span> <span class="o">??</span> <span class="nx">headers</span><span class="p">[</span><span class="dl">"</span><span class="s2">content-type</span><span class="dl">"</span><span class="p">];</span>\n</code></pre></div></div>\n<blockquote data-sourcepos="188:1-190:42">\n<h4 data-sourcepos="188:3-188:18">\n<span id="middyとは" class="fragment"></span><a href="#middy%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>middyとは</h4>\n<p data-sourcepos="189:3-190:42">「AWS Lambda 向け軽量Node.jsミドルウエアエンジン」と紹介されていました。<br>\n詳しくは調べてみてください。</p>\n</blockquote>\n<h1 data-sourcepos="193:1-193:8">\n<span id="修正" class="fragment"></span><a href="#%E4%BF%AE%E6%AD%A3"><i class="fa fa-link"></i></a>修正</h1>\n<p data-sourcepos="195:1-196:71">step functionsのlambaでは、headersやbodyが<code>undefined</code>になってしまうため、<br>\nmiddyは使わないように直してあげれば良さそうです。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="198:1-207:3">\n<div class="code-lang"><span class="bold">handler.ts</span></div>\n<div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">hello</span> <span class="o">=</span> <span class="nf">async </span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="k">return</span> <span class="p">{</span>\n    <span class="na">message</span><span class="p">:</span> <span class="s2">`Hello </span><span class="p">${</span><span class="nx">event</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">, welcome to the exciting Serverless world!`</span><span class="p">,</span>\n    <span class="nx">event</span><span class="p">,</span>\n  <span class="p">};</span>\n<span class="p">};</span>\n\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="nx">hello</span><span class="p">;</span>\n</code></pre></div>\n</div>\n<h2 data-sourcepos="209:1-209:46">\n<span id="再度postリクエストを送ってみる" class="fragment"></span><a href="#%E5%86%8D%E5%BA%A6post%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%82%92%E9%80%81%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>再度POSTリクエストを送ってみる</h2>\n<div class="code-frame" data-lang="bash" data-sourcepos="211:1-215:3"><div class="highlight"><pre><code><span class="nv">$ </span>curl <span class="nt">-X</span> POST <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">-d</span> <span class="s1">\'{"name":"太郎"}\'</span> https://<span class="k">***********</span>.execute-api.us-east-1.amazonaws.com/dev/gofunction\n\n<span class="o">{</span><span class="s2">"executionArn"</span>:<span class="s2">"arn:aws:states:us-east-1:**********:execution:myStateMachine:***************-*******"</span>,<span class="s2">"startDate"</span>:1.67637299142E9<span class="o">}</span>\n</code></pre></div></div>\n<p data-sourcepos="217:1-217:164"><a href="https://camo.qiitausercontent.com/e45c8617609775689768b8a97c1063eea92268ca/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f62353438376638372d346163612d343964352d303438322d3566373139623862333239632e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fb5487f87-4aca-49d5-0482-5f719b8b329c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c2929c8d64b60392e5bf821a315913cd" alt="スクリーンショット 2023-02-14 20.12.57.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/b5487f87-4aca-49d5-0482-5f719b8b329c.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fb5487f87-4aca-49d5-0482-5f719b8b329c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=517f048374d5fb23bccc56a44d9dccb3 1x" loading="lazy"></a></p>\n<h3 data-sourcepos="219:1-219:13">\n<span id="成功" class="fragment"></span><a href="#%E6%88%90%E5%8A%9F"><i class="fa fa-link"></i></a>成功！</h3>\n<p data-sourcepos="221:1-221:69">入出力もコンソールから確認できて良い感じですね</p>\n<p data-sourcepos="223:1-223:164"><a href="https://camo.qiitausercontent.com/802d77b5504b9b466d8d507a4f2451ca04a86115/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f35633434643830612d323132302d333736302d316432352d3330613262356333323361382e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F5c44d80a-2120-3760-1d25-30a2b5c323a8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=053ca44e42b33dba03f02fae4a5f16a8" alt="スクリーンショット 2023-02-14 20.13.41.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/5c44d80a-2120-3760-1d25-30a2b5c323a8.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F5c44d80a-2120-3760-1d25-30a2b5c323a8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a37cd19a30b08738761c2792214c20f1 1x" loading="lazy"></a></p>\n',body:'# はじめに\n\n`ServerlessFramework`の`aws-nodejs-typescript`テンプレートを使って構築したlambdaを使った`Step Functions`を構築した時にエラーになったので、修正内容をメモ。\n\n\n# Step Functionsとは\n\nこちらの記事がわかりやすい\n\nhttps://qiita.com/miyuki_samitani/items/6c58d107cdc86d938fe3\n\n# Step Funcitons構築\n\n\n1. sls create\n\n    ```bash\n    sls create --template aws-nodejs-typescript\n    ```\n\n    これで以下ファイルが生成される\n    \n    ```bash\n    $ tree -L 1\n    .\n    ├── README.md\n    ├── node_modules\n    ├── package.json\n    ├── pnpm-lock.yaml\n    ├── serverless.ts\n    ├── src\n    ├── tsconfig.json\n    └── tsconfig.paths.json\n    ```\n\n1. Plugin: `serverless-step-functions`のインストール\n    \n    ```typescript:serverless.yml\n      service: \'step-functions\',\n      frameworkVersion: \'3\',\n    　　　　// serverless-step-functions追加\n      plugins: [\'serverless-esbuild\', \'serverless-step-functions\'],\n      provider: {\n        name: \'aws\',\n        runtime: \'nodejs14.x\',\n    ```\n    \n    ```bash\n    serverless plugin install -n serverless-step-functions\n    ```\n\n1. serverless.tsの修正\n\n    今回は試しとして、lambdaが１つだけある構成で作ってみる。\n    lambdaは`POST: hellow`がすでに作られているので、それを使う。\n    \n    構成\n    <img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/fd542edd-de4f-f72d-4f57-08e76739c496.png" width="400"></img>\n    \n    公式から例を拾ってくる\n    \n    ```yaml:serverless.yml\n    stepFunctions:\n      stateMachines:\n        hellostepfunc1:\n          events:\n            - http:\n                path: gofunction\n                method: GET\n          name: myStateMachine\n          definition:\n            Comment: "A Hello World example of the Amazon States Language using an AWS Lambda Function"\n            StartAt: HelloWorld1\n            States:\n              HelloWorld1:\n                Type: Task\n                Resource:\n                  Fn::GetAtt: [hello, Arn]\n                End: true\n    ```\n    \n    これを`POST`にし、corsを有効にして、`serverless.tsに書き直すと↓のようになる。\n\n    ただし、Commentは使えなかったので外しています。\n    \n    ```typescript:serverless.ts\n      stepFunctions: {\n        stateMachines: {\n          hellostepfunc1: {\n            events: [{\n              http: {\n                path: \'gofunction\',\n                method: \'POST\',\n                cors: {\n                  origin: "*",\n                  headers: [\n                    "Content-Type",\n                    "X-Amz-Date",\n                    "Authorization",\n                    "X-Api-Key",\n                    "X-Amz-Security-Token",\n                    "X-Amz-User-Agent"\n                  ]\n                }\n              }\n            }],\n            name: \'myStateMachine\',\n            definition: {\n              Commnet: "A Hello World example of the Amazon States Language using an AWS Lambda Function",\n              StartAt: \'HelloWorld1\',\n              States: {\n                HelloWorld1: {\n                  Type: \'Task\',\n                  Resource: {\n                    \'Fn::GetAtt\': [\'hello\', \'Arn\']\n                  },\n                  End: true\n                }\n              }\n            }\n          }\n        }\n      }\n    ```\n\n1. デプロイ\n\n    ```bash\n    sls deploy\n    \n    ・・・\n    \n    ✔ Serverless StepFunctions OutPuts\n    endpoints:\n      POST - https://************.execute-api.us-east-1.amazonaws.com/dev/gofunction\n    ```\n\n1. POSTリクエストを送ってみる\n        \n    ```bash\n    $ curl -X POST -H "Content-Type: application/json" -d \'{"name":"太郎"}\' https://***********.execute-api.us-east-1.amazonaws.com/dev/gofunction\n    \n    {"executionArn":"arn:aws:states:us-east-1:**********:execution:myStateMachine:***************-*******","startDate":1.67637299142E9}\n    ```\n        \n    それらしいレスポンスが帰ってきた\n\n1. マネジメントコンソールから実行結果を確認してみる\n\n    ![スクリーンショット 2023-02-14 1.49.39.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/829c7fb7-95fc-5c1d-790c-81c34d66ea6e.png)\n\n    <img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/c3bafe80-0733-af4c-ef52-82b7919c1256.png" width="250"></img>\n\n\n    <font color="red">失敗していた</font>\n\n\n# 失敗の原因調査\n\nstep functionsでは失敗のログが出力されるので、それを確認すると、\n\n```json:Type\n{\n  "errorType": "TypeError",\n  "errorMessage": "Cannot read property \'Content-Type\' of undefined",\n  "trace": [\n    "TypeError: Cannot read property \'Content-Type\' of undefined",\n    "    at httpJsonBodyParserMiddlewareBefore (/node_modules/.pnpm/@middy+http-json-body-parser@3.6.2/node_modules/@middy/http-json-body-parser/index.js:13:29)",\n    "    at runMiddlewares (/node_modules/.pnpm/@middy+core@3.6.2/node_modules/@middy/core/index.js:118:27)",\n    "    at runRequest (/node_modules/.pnpm/@middy+core@3.6.2/node_modules/@middy/core/index.js:78:15)",\n    "    at Runtime.middy2 (/node_modules/.pnpm/@middy+core@3.6.2/node_modules/@middy/core/index.js:32:16)",\n    "    at Runtime.handleOnceNonStreaming (/var/runtime/Runtime.js:74:25)"\n  ]\n}\n```\n\nこのように出ており、`middy`で`Content-Type`が`undefined`に対して呼ばれているようでした。\n\n実際にlambdaのコードを見てみると、この部分でした。👇\n\n```typescript\n  const httpJsonBodyParserMiddlewareBefore = async (request) => {\n    const { headers, body } = request.event;\n    // headersがundefinedになっていた\n    const contentType = headers["Content-Type"] ?? headers["content-type"];\n```\n\n> #### middyとは\n> 「AWS Lambda 向け軽量Node.jsミドルウエアエンジン」と紹介されていました。\n詳しくは調べてみてください。\n\n\n# 修正\n\nstep functionsのlambaでは、headersやbodyが`undefined`になってしまうため、\nmiddyは使わないように直してあげれば良さそうです。\n\n```typescript:handler.ts\nconst hello = async (event) => {\n  return {\n    message: `Hello ${event.body.name}, welcome to the exciting Serverless world!`,\n    event,\n  };\n};\n\nexport const main = hello;\n```\n\n## 再度POSTリクエストを送ってみる\n        \n```bash\n$ curl -X POST -H "Content-Type: application/json" -d \'{"name":"太郎"}\' https://***********.execute-api.us-east-1.amazonaws.com/dev/gofunction\n\n{"executionArn":"arn:aws:states:us-east-1:**********:execution:myStateMachine:***************-*******","startDate":1.67637299142E9}\n```\n\n![スクリーンショット 2023-02-14 20.12.57.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/b5487f87-4aca-49d5-0482-5f719b8b329c.png)\n        \n### 成功！\n\n入出力もコンソールから確認できて良い感じですね\n\n![スクリーンショット 2023-02-14 20.13.41.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/5c44d80a-2120-3760-1d25-30a2b5c323a8.png)\n\n',coediting:!1,comments_count:0,created_at:"2023-02-14T20:17:04+09:00",group:null,id:"2e55d673f1bd3cbd087c",likes_count:3,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"TypeScript",versions:[]},{name:"ServerlessFramework",versions:[]}],title:"aws-nodejs-typescriptで作成したlambdaを使ってStep Functionsを構築したらハマったこと",updated_at:"2023-02-14T20:17:04+09:00",url:"https://qiita.com/maaaashi/items/2e55d673f1bd3cbd087c",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:820,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-3:80"><font color="red">playgroundみたいなものを作ってみたかった</font></p>\n<p data-sourcepos="5:1-6:80">普段フロントエンド開発をしていて<code>tailwindcss</code>に触れる機会が多いので、<br>\nclassを書き換えると反映されるようなサイトを作りました。</p>\n<p data-sourcepos="8:1-8:75">大したものではないのでハードルは下げてくださいまし</p>\n<h2 data-sourcepos="11:1-11:12">\n<span id="全体像" class="fragment"></span><a href="#%E5%85%A8%E4%BD%93%E5%83%8F"><i class="fa fa-link"></i></a>全体像</h2>\n<p data-sourcepos="13:1-13:164"><a href="https://camo.qiitausercontent.com/bd7c9d9bd5f2b318aadbd64cbc088a039b230763/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f34653434363363382d636663302d646562652d643765382d6564346564356261613862662e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4e4463c8-cfc0-debe-d7e8-ed4ed5baa8bf.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2f5c7574228da79a9086c900eb4f79ff" alt="スクリーンショット 2023-02-12 15.04.25.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4e4463c8-cfc0-debe-d7e8-ed4ed5baa8bf.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4e4463c8-cfc0-debe-d7e8-ed4ed5baa8bf.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8b4c2cf56918fffd54fad6ba1b865778 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="15:1-15:9">\n<span id="概要" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>概要</h2>\n<p data-sourcepos="17:1-17:164"><a href="https://camo.qiitausercontent.com/f9acc2663525a8d67eefd3d32c1cfb066a9dc77d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31653136666636642d343364382d393830332d393065612d6639326533343630653133312e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1e16ff6d-43d8-9803-90ea-f92e3460e131.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=10b03c9937f7bdcaf94cb38a137f3105" alt="スクリーンショット 2023-02-12 15.05.01.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1e16ff6d-43d8-9803-90ea-f92e3460e131.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1e16ff6d-43d8-9803-90ea-f92e3460e131.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=bdf071fa92cb84f50f3c3daeb6656453 1x" loading="lazy"></a></p>\n<p data-sourcepos="19:1-19:51">こちらのフォームで書き換えたものが</p>\n<p data-sourcepos="21:1-21:164"><a href="https://camo.qiitausercontent.com/c003f8dd3102347f149c77c969a6693bab894820/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f66393137333831322d646335392d366431622d623838652d3235376666386437366238322e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Ff9173812-dc59-6d1b-b88e-257ff8d76b82.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7094463d1f103f255334e2ee6a62a784" alt="スクリーンショット 2023-02-12 15.06.15.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/f9173812-dc59-6d1b-b88e-257ff8d76b82.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Ff9173812-dc59-6d1b-b88e-257ff8d76b82.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d4bc9ed923cfcca18d00d837d9372898 1x" loading="lazy"></a></p>\n<p data-sourcepos="23:1-23:60">こちらに反映されるようになっております。</p>\n<p data-sourcepos="25:1-25:49"><iframe id="qiita-embed-content__c91915400650186a5717becda6e71b0d" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__c91915400650186a5717becda6e71b0d" data-content="https%3A%2F%2Fmaaaashi-tailwindcss-preview.mss-rep.com%2F" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<h1 data-sourcepos="28:1-28:14">\n<span id="開発環境" class="fragment"></span><a href="#%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>開発環境</h1>\n<ul data-sourcepos="30:1-38:0">\n<li data-sourcepos="30:1-31:14">node\n<ul data-sourcepos="31:5-31:14">\n<li data-sourcepos="31:5-31:14">v18.14.0</li>\n</ul>\n</li>\n<li data-sourcepos="32:1-33:12">pnpm\n<ul data-sourcepos="33:5-33:12">\n<li data-sourcepos="33:5-33:12">7.26.3</li>\n</ul>\n</li>\n<li data-sourcepos="34:1-35:41">Framework\n<ul data-sourcepos="35:5-35:41">\n<li data-sourcepos="35:5-35:41"><a href="https://kit.svelte.jp/" rel="nofollow noopener" target="_blank">SvelteKit</a></li>\n</ul>\n</li>\n<li data-sourcepos="36:1-38:0">UI components\n<ul data-sourcepos="37:5-38:0">\n<li data-sourcepos="37:5-38:0"><a href="https://flowbite-svelte.com/" rel="nofollow noopener" target="_blank">Flowbite-svlete</a></li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos="39:1-39:22">\n<span id="実装方法抜粋" class="fragment"></span><a href="#%E5%AE%9F%E8%A3%85%E6%96%B9%E6%B3%95%E6%8A%9C%E7%B2%8B"><i class="fa fa-link"></i></a>実装方法(抜粋)</h1>\n<p data-sourcepos="41:1-41:58"><font color="red">より良い方法がありそう</font></p>\n<p data-sourcepos="43:1-43:83"><code>classname</code>をストアに持ち、右側の変更を左側に伝えています。</p>\n<h2 data-sourcepos="45:1-45:12">\n<span id="ストア" class="fragment"></span><a href="#%E3%82%B9%E3%83%88%E3%82%A2"><i class="fa fa-link"></i></a>ストア</h2>\n<div class="code-frame" data-lang="typescript" data-sourcepos="47:1-52:3">\n<div class="code-lang"><span class="bold">src/store/classname.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">writable</span><span class="p">,</span> <span class="kd">type</span> <span class="nx">Writable</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">svelte/store</span><span class="dl">"</span>\n\n<span class="c1">// 適当にデフォルト値入れておくと利用者が使い方を連想しやすい(かも)</span>\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">divClass</span><span class="p">:</span> <span class="nx">Writable</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nf">writable</span><span class="p">(</span><span class="dl">\'</span><span class="s1">font-bold text-2xl text-green-500</span><span class="dl">\'</span><span class="p">)</span>\n</code></pre></div>\n</div>\n<h2 data-sourcepos="54:1-54:32">\n<span id="プレビュー画面左側" class="fragment"></span><a href="#%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E7%94%BB%E9%9D%A2%E5%B7%A6%E5%81%B4"><i class="fa fa-link"></i></a>プレビュー(画面左側)</h2>\n<p data-sourcepos="56:1-56:138"><a href="https://camo.qiitausercontent.com/c003f8dd3102347f149c77c969a6693bab894820/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f66393137333831322d646335392d366431622d623838652d3235376666386437366238322e706e67" target="_blank" rel="nofollow noopener"><img width="300" src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Ff9173812-dc59-6d1b-b88e-257ff8d76b82.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7094463d1f103f255334e2ee6a62a784" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/f9173812-dc59-6d1b-b88e-257ff8d76b82.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Ff9173812-dc59-6d1b-b88e-257ff8d76b82.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d4bc9ed923cfcca18d00d837d9372898 1x" loading="lazy"></a></p>\n<div class="code-frame" data-lang="vue" data-sourcepos="58:1-69:3">\n<div class="code-lang"><span class="bold">Preview.svelte</span></div>\n<div class="highlight"><pre><code>// divの部分のみ抜粋\n<span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">divClass</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../store/classname</span><span class="dl">"</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"ml-5 my-5"</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">{$divClass}</span><span class="nt">&gt;</span>\n    preview\n  <span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/div&gt;</span>\n</code></pre></div>\n</div>\n<h2 data-sourcepos="71:1-71:32">\n<span id="プロパティ画面右側" class="fragment"></span><a href="#%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E7%94%BB%E9%9D%A2%E5%8F%B3%E5%81%B4"><i class="fa fa-link"></i></a>プロパティ(画面右側)</h2>\n<p data-sourcepos="73:1-73:138"><a href="https://camo.qiitausercontent.com/f9acc2663525a8d67eefd3d32c1cfb066a9dc77d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31653136666636642d343364382d393830332d393065612d6639326533343630653133312e706e67" target="_blank" rel="nofollow noopener"><img width="300" src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1e16ff6d-43d8-9803-90ea-f92e3460e131.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=10b03c9937f7bdcaf94cb38a137f3105" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1e16ff6d-43d8-9803-90ea-f92e3460e131.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1e16ff6d-43d8-9803-90ea-f92e3460e131.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=bdf071fa92cb84f50f3c3daeb6656453 1x" loading="lazy"></a></p>\n<div class="code-frame" data-lang="vue" data-sourcepos="75:1-97:3">\n<div class="code-lang"><span class="bold">Property.svelte</span></div>\n<div class="highlight"><pre><code>// divの部分のみ抜粋\n<span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">Tabs</span><span class="p">,</span> <span class="nx">TabItem</span><span class="p">,</span> <span class="nx">Input</span><span class="p">,</span> <span class="nx">Tooltip</span><span class="p">,</span> <span class="nx">List</span><span class="p">,</span> <span class="nx">Li</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">flowbite-svelte</span><span class="dl">\'</span><span class="p">;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">divClass</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../store/classname</span><span class="dl">"</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n\n// 実際には87~94行目は別コンポーネントに切り出し、\'div\', \'button\', \'a\'で使いまわしています。\n<span class="nt">&lt;Tabs</span> <span class="na">style=</span><span class="s">"pill"</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;TabItem</span> <span class="na">open</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">slot=</span><span class="s">"title"</span><span class="nt">&gt;</span>div<span class="nt">&lt;/span&gt;</span>\n    <span class="nt">&lt;Input</span> <span class="na">bind:value=</span><span class="s">{$divClass}/</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;Tooltip&gt;</span>edit class name<span class="nt">&lt;/Tooltip&gt;</span>\n\n    <span class="nt">&lt;List</span> <span class="na">tag=</span><span class="s">"ul"</span> <span class="na">class=</span><span class="s">"space-y-1"</span><span class="nt">&gt;</span>\n      {#each $divClass.split(\' \') as classname}\n        <span class="nt">&lt;Li&gt;</span>{classname}<span class="nt">&lt;/Li&gt;</span>\n      {/each}\n    <span class="nt">&lt;/List&gt;</span>\n  <span class="nt">&lt;/TabItem&gt;</span>\n<span class="nt">&lt;/Tabs&gt;</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos="99:1-99:43">\n<span id="改善点徐々に直していきます" class="fragment"></span><a href="#%E6%94%B9%E5%96%84%E7%82%B9%E5%BE%90%E3%80%85%E3%81%AB%E7%9B%B4%E3%81%97%E3%81%A6%E3%81%84%E3%81%8D%E3%81%BE%E3%81%99"><i class="fa fa-link"></i></a>改善点(徐々に直していきます)</h1>\n<ul data-sourcepos="101:1-107:50">\n<li data-sourcepos="101:1-103:27">classを変えても一部のstyleが反映されないことがある\n<ul data-sourcepos="102:5-103:27">\n<li data-sourcepos="102:5-102:47">{#key}blockを使ったが、ダメそう</li>\n<li data-sourcepos="103:5-103:27">何か方法を探す</li>\n</ul>\n</li>\n<li data-sourcepos="104:1-105:68">display: flexなどのために子の要素を追加できるように\n<ul data-sourcepos="105:5-105:68">\n<li data-sourcepos="105:5-105:68">innnerHTMLに追加するか、componentsを再起的に使う</li>\n</ul>\n</li>\n<li data-sourcepos="106:1-107:50">div, button, aを用意しておくのではなく、element名も変えれるように\n<ul data-sourcepos="107:5-107:50">\n<li data-sourcepos="107:5-107:50">\n<code>&lt;svelte:element this={tag}&gt;</code>で出来そう</li>\n</ul>\n</li>\n</ul>\n',body:'# はじめに\n\n<font color="red">playgroundみたいなものを作ってみたかった</font>\n\n普段フロントエンド開発をしていて`tailwindcss`に触れる機会が多いので、\nclassを書き換えると反映されるようなサイトを作りました。\n\n大したものではないのでハードルは下げてくださいまし\n\n\n## 全体像\n\n![スクリーンショット 2023-02-12 15.04.25.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4e4463c8-cfc0-debe-d7e8-ed4ed5baa8bf.png)\n\n## 概要\n\n![スクリーンショット 2023-02-12 15.05.01.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1e16ff6d-43d8-9803-90ea-f92e3460e131.png)\n\nこちらのフォームで書き換えたものが\n\n![スクリーンショット 2023-02-12 15.06.15.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/f9173812-dc59-6d1b-b88e-257ff8d76b82.png)\n\nこちらに反映されるようになっております。\n\nhttps://maaaashi-tailwindcss-preview.mss-rep.com/\n\n\n# 開発環境\n\n* node\n    * v18.14.0\n* pnpm\n    * 7.26.3\n* Framework\n    * [SvelteKit](https://kit.svelte.jp/)\n* UI components\n    * [Flowbite-svlete](https://flowbite-svelte.com/)\n\n# 実装方法(抜粋)\n\n<font color="red">より良い方法がありそう</font>\n\n`classname`をストアに持ち、右側の変更を左側に伝えています。\n\n## ストア\n\n```typescript:src/store/classname.ts\nimport { writable, type Writable } from "svelte/store"\n\n// 適当にデフォルト値入れておくと利用者が使い方を連想しやすい(かも)\nexport const divClass: Writable<string> = writable(\'font-bold text-2xl text-green-500\')\n```\n\n## プレビュー(画面左側)\n\n<img width="300" src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/f9173812-dc59-6d1b-b88e-257ff8d76b82.png"></img>\n\n```vue:Preview.svelte\n// divの部分のみ抜粋\n<script lang="ts">\n  import { divClass } from "../store/classname";\n<\/script>\n\n<div class="ml-5 my-5">\n  <div class={$divClass}>\n    preview\n  </div>\n</div>\n```\n\n## プロパティ(画面右側)\n\n<img width="300" src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1e16ff6d-43d8-9803-90ea-f92e3460e131.png"></img>\n\n```vue:Property.svelte\n// divの部分のみ抜粋\n<script lang="ts">\n  import { Tabs, TabItem, Input, Tooltip, List, Li } from \'flowbite-svelte\';\n  import { divClass } from "../store/classname";\n<\/script>\n\n\n// 実際には87~94行目は別コンポーネントに切り出し、\'div\', \'button\', \'a\'で使いまわしています。\n<Tabs style="pill">\n  <TabItem open>\n    <span slot="title">div</span>\n    <Input bind:value={$divClass}/>\n    <Tooltip>edit class name</Tooltip>\n\n    <List tag="ul" class="space-y-1">\n      {#each $divClass.split(\' \') as classname}\n        <Li>{classname}</Li>\n      {/each}\n    </List>\n  </TabItem>\n</Tabs>\n```\n\n# 改善点(徐々に直していきます)\n\n* classを変えても一部のstyleが反映されないことがある\n    * {#key}blockを使ったが、ダメそう\n    * 何か方法を探す\n* display: flexなどのために子の要素を追加できるように\n    * innnerHTMLに追加するか、componentsを再起的に使う\n* div, button, aを用意しておくのではなく、element名も変えれるように\n    * `<svelte:element this={tag}>`で出来そう\n',coediting:!1,comments_count:0,created_at:"2023-02-12T15:29:53+09:00",group:null,id:"7a4f3a4a64dd39036b99",likes_count:4,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"TypeScript",versions:[]},{name:"tailwindcss",versions:[]},{name:"SvelteKit",versions:[]}],title:"tailwindcssを試せるサイトを作りました",updated_at:"2023-02-12T15:38:25+09:00",url:"https://qiita.com/maaaashi/items/7a4f3a4a64dd39036b99",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:712,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-6:43">普段はフロント側を<code>typescript</code>で書き、lambdaは<code>ruby</code>や<code>nodejs</code>で書いている私ですが、<br>\n<font color="red">そろそろバックエンドもtypescriptで書きたい！</font>と思い、<br>\n<code>sls create -t aws-nodejs-typescript</code>で<code>typescript</code>環境を作ってみた際、<br>\nCORSエラーにハマった時のメモ。</p>\n<h1 data-sourcepos="8:1-8:8">\n<span id="前提" class="fragment"></span><a href="#%E5%89%8D%E6%8F%90"><i class="fa fa-link"></i></a>前提</h1>\n<ul data-sourcepos="10:1-18:0">\n<li data-sourcepos="10:1-13:16">ServerlessFramework\n<ul data-sourcepos="11:5-13:16">\n<li data-sourcepos="11:5-11:52">Framework Core: 3.27.0 (local) 3.27.0 (global)</li>\n<li data-sourcepos="12:5-12:19">Plugin: 6.2.3</li>\n<li data-sourcepos="13:5-13:16">SDK: 4.3.2</li>\n</ul>\n</li>\n<li data-sourcepos="14:1-15:19">typescript\n<ul data-sourcepos="15:5-15:19">\n<li data-sourcepos="15:5-15:19">Version 4.9.5</li>\n</ul>\n</li>\n<li data-sourcepos="16:1-18:0">ts-node -v\n<ul data-sourcepos="17:5-18:0">\n<li data-sourcepos="17:5-18:0">v10.9.1</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos="19:1-19:14">\n<span id="構築手順" class="fragment"></span><a href="#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86"><i class="fa fa-link"></i></a>構築手順</h1>\n<ol data-sourcepos="21:1-33:0">\n<li data-sourcepos="21:1-27:0">\n<p data-sourcepos="21:4-21:33">テンプレートから作成</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="23:5-25:7"><div class="highlight"><pre><code><span class="nv">$ </span>sls create <span class="nt">-t</span> aws-nodejs-typescript <span class="nt">-p</span> hoge\n</code></pre></div></div>\n<p data-sourcepos="26:5-26:53">-pは省略可能(無い場合はcurrent directry</p>\n</li>\n<li data-sourcepos="28:1-33:0">\n<p data-sourcepos="28:4-28:15">デプロイ</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="30:5-32:7"><div class="highlight"><pre><code><span class="nv">$ </span>sls deploy\n</code></pre></div></div>\n</li>\n</ol>\n<p data-sourcepos="34:1-34:36">無事デプロイが完了すると</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="36:1-44:3"><div class="highlight"><pre><code>Deploying hoge to stage dev <span class="o">(</span>us-east-1<span class="o">)</span>\n\n✔ Service deployed to stack hoge-dev <span class="o">(</span>124s<span class="o">)</span>\n\nendpoint: POST - https://hogehoge.execute-api.us-east-1.amazonaws.com/dev/hello\nfunctions:\n  hello: hoge-dev-hello <span class="o">(</span>12 kB<span class="o">)</span>\n</code></pre></div></div>\n<p data-sourcepos="46:1-46:49">のように<code>endpoint</code>が表示されるはず。</p>\n<p data-sourcepos="48:1-48:119">試しにPOSTMANや、VScodeの拡張機能である、ThunderClinetで表示されたendpointへPOSTを送ってみる</p>\n<div class="code-frame" data-lang="" data-sourcepos="50:1-54:3">\n<div class="code-lang"><span class="bold">request</span></div>\n<div class="highlight"><pre><code>method: "POST"\nHeaders: { Content-type: application/json }\nBody: { "name": "hoge" }\n</code></pre></div>\n</div>\n<p data-sourcepos="56:1-56:18">すると、、、</p>\n<p data-sourcepos="58:1-58:163"><a href="https://camo.qiitausercontent.com/601086d2d5ca11fcd7eef36ef7a90be303ba0290/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f36316637613938382d613461332d343161612d323536322d3864383130346463346165362e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F61f7a988-a4a3-41aa-2562-8d8104dc4ae6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=de115604145a13ddff8925a8e6735603" alt="スクリーンショット 2023-02-07 0.40.14.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/61f7a988-a4a3-41aa-2562-8d8104dc4ae6.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F61f7a988-a4a3-41aa-2562-8d8104dc4ae6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f007c1076b8b40c2dc2aee327fe34407 1x" loading="lazy"></a></p>\n<p data-sourcepos="61:1-61:61">ちゃんと<code>Hello hoge, ....</code>とmessageが帰ってきた！</p>\n<p data-sourcepos="63:1-63:44">API Gateway + lambdaの構成は作れた！</p>\n<h1 data-sourcepos="65:1-65:14">\n<span id="事象発生" class="fragment"></span><a href="#%E4%BA%8B%E8%B1%A1%E7%99%BA%E7%94%9F"><i class="fa fa-link"></i></a>事象発生</h1>\n<p data-sourcepos="67:1-67:99">次にウェブサイトからjavascriptの<code>fetch</code>を使ってPOSTを送ってみたところ、、</p>\n<p data-sourcepos="69:1-69:163"><a href="https://camo.qiitausercontent.com/c7b9e8a01d8284e9b9e7cb9cedd6d01208552d86/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f66613866643032652d343034632d393530612d336534642d6564653430353562303739622e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Ffa8fd02e-404c-950a-3e4d-ede4055b079b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7bb6a4a3d525f8382fc71addb57d3752" alt="スクリーンショット 2023-02-07 0.45.02.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/fa8fd02e-404c-950a-3e4d-ede4055b079b.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Ffa8fd02e-404c-950a-3e4d-ede4055b079b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=38c0ff052c1fc08e636fdec09aeb29ca 1x" loading="lazy"></a></p>\n<p data-sourcepos="71:1-71:44"><font color="red">CORSエラー発生</font></p>\n<h1 data-sourcepos="74:1-74:8">\n<span id="解決" class="fragment"></span><a href="#%E8%A7%A3%E6%B1%BA"><i class="fa fa-link"></i></a>解決</h1>\n<p data-sourcepos="76:1-76:113"><code>./src/libs/api-gateway.ts</code>にあるレスポンス生成部分に<code>Access-Control-Allow-Origin</code>の設定を追加</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="78:1-88:3">\n<div class="code-lang"><span class="bold">./src/libs/api-gateway.ts</span></div>\n<div class="highlight"><pre><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">formatJSONResponse</span> <span class="o">=</span> <span class="p">(</span><span class="nx">response</span><span class="p">:</span> <span class="nb">Record</span><span class="o">&lt;</span><span class="kr">string</span><span class="p">,</span> <span class="nx">unknown</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="k">return</span> <span class="p">{</span>\n    <span class="na">statusCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>\n    <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>                              <span class="c1">// 追加</span>\n      <span class="dl">\'</span><span class="s1">Access-Control-Allow-Origin</span><span class="dl">\'</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">*</span><span class="dl">\'</span><span class="p">,</span>   <span class="c1">// 追加</span>\n    <span class="p">},</span>                                      <span class="c1">// 追加</span>\n    <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n',body:'# はじめに\n\n普段はフロント側を`typescript`で書き、lambdaは`ruby`や`nodejs`で書いている私ですが、\n<font color="red">そろそろバックエンドもtypescriptで書きたい！</font>と思い、\n`sls create -t aws-nodejs-typescript`で`typescript`環境を作ってみた際、\nCORSエラーにハマった時のメモ。\n\n# 前提\n\n* ServerlessFramework\n    * Framework Core: 3.27.0 (local) 3.27.0 (global)\n    * Plugin: 6.2.3\n    * SDK: 4.3.2\n* typescript\n    * Version 4.9.5\n* ts-node -v\n    * v10.9.1\n\n# 構築手順\n\n1. テンプレートから作成\n\n    ```zsh\n    $ sls create -t aws-nodejs-typescript -p hoge\n    ```\n    -pは省略可能(無い場合はcurrent directry\n\n1. デプロイ\n    \n    ```zsh\n    $ sls deploy\n    ```\n\n無事デプロイが完了すると\n\n```zsh\nDeploying hoge to stage dev (us-east-1)\n\n✔ Service deployed to stack hoge-dev (124s)\n\nendpoint: POST - https://hogehoge.execute-api.us-east-1.amazonaws.com/dev/hello\nfunctions:\n  hello: hoge-dev-hello (12 kB)\n```\n\nのように`endpoint`が表示されるはず。\n\n試しにPOSTMANや、VScodeの拡張機能である、ThunderClinetで表示されたendpointへPOSTを送ってみる\n\n```:request\nmethod: "POST"\nHeaders: { Content-type: application/json }\nBody: { "name": "hoge" }\n```\n\nすると、、、\n\n![スクリーンショット 2023-02-07 0.40.14.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/61f7a988-a4a3-41aa-2562-8d8104dc4ae6.png)\n\n\nちゃんと`Hello hoge, ....`とmessageが帰ってきた！\n\nAPI Gateway + lambdaの構成は作れた！\n\n# 事象発生\n\n次にウェブサイトからjavascriptの`fetch`を使ってPOSTを送ってみたところ、、\n\n![スクリーンショット 2023-02-07 0.45.02.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/fa8fd02e-404c-950a-3e4d-ede4055b079b.png)\n\n<font color="red">CORSエラー発生</font>\n\n\n# 解決\n\n`./src/libs/api-gateway.ts`にあるレスポンス生成部分に`Access-Control-Allow-Origin`の設定を追加\n\n```typescript:./src/libs/api-gateway.ts\nexport const formatJSONResponse = (response: Record<string, unknown>) => {\n  return {\n    statusCode: 200,\n    headers: {                              // 追加\n      \'Access-Control-Allow-Origin\': \'*\',   // 追加\n    },                                      // 追加\n    body: JSON.stringify(response)\n  }\n}\n```\n\n',coediting:!1,comments_count:0,created_at:"2023-02-07T00:54:07+09:00",group:null,id:"cb21474df4990dc0f246",likes_count:3,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"TypeScript",versions:[]},{name:"ServerlessFramework",versions:[]}],title:"【ServerlessFramework】template の API Gateway + lambda 構成で CORSにハマった",updated_at:"2023-02-07T00:54:07+09:00",url:"https://qiita.com/maaaashi/items/cb21474df4990dc0f246",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:472,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<a href="https://camo.qiitausercontent.com/c322f906669f0d6bef76d7c567362cc62faabcec/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f35353764386263662d306230302d353633632d353266632d6565663461366632333337332e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F557d8bcf-0b00-563c-52fc-eef4a6f23373.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2d426f3d126ed7e49fc0307357cf210a" width="300px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/557d8bcf-0b00-563c-52fc-eef4a6f23373.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F557d8bcf-0b00-563c-52fc-eef4a6f23373.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5a82b71b36b2ec0f6e89e99a9466f624 1x" loading="lazy"></a>\n<p data-sourcepos="5:1-6:66">👆画像のようなQiitaの記事をカードで表示するようなものを実装したところ、<br>\n<code>Safari</code>で👇のように潰れて表示されてしまった。</p>\n<a href="https://camo.qiitausercontent.com/f76704ffacc887e80842a369c7ec646ba460f30b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f33303634643466352d656535362d616435652d653134382d3164353935373131353461372e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F3064d4f5-ee56-ad5e-e148-1d59571154a7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9c3662fd9f134f0e1326e5d5427532fb" width="300px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/3064d4f5-ee56-ad5e-e148-1d59571154a7.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F3064d4f5-ee56-ad5e-e148-1d59571154a7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=36ead7d8a1c71cef3cd7ea988c06e304 1x" loading="lazy"></a>\n<p data-sourcepos="10:1-10:33">これを解消した時のメモ</p>\n<h1 data-sourcepos="12:1-12:8">\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h1>\n<ul data-sourcepos="14:1-16:0">\n<li data-sourcepos="14:1-16:0">Safari\n<ul data-sourcepos="15:5-16:0">\n<li data-sourcepos="15:5-16:0">16.1（18614.2.9.1.12）</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos="17:1-17:8">\n<span id="実装" class="fragment"></span><a href="#%E5%AE%9F%E8%A3%85"><i class="fa fa-link"></i></a>実装</h1>\n<div class="code-frame" data-lang="css" data-sourcepos="19:1-26:3"><div class="highlight"><pre><code><span class="nc">.content</span> <span class="p">{</span>\n  <span class="nl">overflow</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>\n  <span class="nl">display</span><span class="p">:</span> <span class="n">-webkit-box</span><span class="p">;</span>\n  <span class="nl">-webkit-box-orient</span><span class="p">:</span> <span class="n">vertical</span><span class="p">;</span>\n  <span class="nl">-webkit-line-clamp</span><span class="p">:</span> <span class="m">3</span><span class="p">;</span>\n<span class="p">}</span>\n</code></pre></div></div>\n<p data-sourcepos="28:1-28:116">この実装で<code>GoogleChrome</code>では3行制限ができたが、<code>Safari</code>では画像のように潰れてしまった</p>\n<h1 data-sourcepos="30:1-30:22">\n<span id="原因おそらく" class="fragment"></span><a href="#%E5%8E%9F%E5%9B%A0%E3%81%8A%E3%81%9D%E3%82%89%E3%81%8F"><i class="fa fa-link"></i></a>原因(おそらく)</h1>\n<p data-sourcepos="32:1-33:59"><code>Chrome</code>では上記の実装をするといい感じに指定行数の高さで、<code>min-height</code>を設定してくれるが、<br>\n<code>Safari</code>ではそれがないため、潰れてしまう。</p>\n<h1 data-sourcepos="35:1-35:8">\n<span id="解決" class="fragment"></span><a href="#%E8%A7%A3%E6%B1%BA"><i class="fa fa-link"></i></a>解決</h1>\n<p data-sourcepos="37:1-37:98">明示的に<code>min-height</code>を示すことで<code>Safari</code>でも潰れることなく表示されました</p>\n<div class="code-frame" data-lang="css" data-sourcepos="39:1-47:3"><div class="highlight"><pre><code><span class="nc">.content</span> <span class="p">{</span>\n  <span class="nl">overflow</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>\n  <span class="nl">display</span><span class="p">:</span> <span class="n">-webkit-box</span><span class="p">;</span>\n  <span class="nl">-webkit-box-orient</span><span class="p">:</span> <span class="n">vertical</span><span class="p">;</span>\n  <span class="nl">-webkit-line-clamp</span><span class="p">:</span> <span class="m">3</span><span class="p">;</span>\n  <span class="nl">min-height</span><span class="p">:</span> <span class="m">5em</span><span class="p">;</span>\n<span class="p">}</span>\n</code></pre></div></div>\n<a href="https://camo.qiitausercontent.com/f93ec84c9c209b43d6bdc1c3f1ca9221a62f86bc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f30653765653266382d616638332d643031652d616266342d3336336162653263626164352e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0e7ee2f8-af83-d01e-abf4-363abe2cbad5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=75039d96b10e2cd9501708bd8e032488" width="300px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0e7ee2f8-af83-d01e-abf4-363abe2cbad5.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0e7ee2f8-af83-d01e-abf4-363abe2cbad5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c4a6c111c84361e5e1addc133376024e 1x" loading="lazy"></a>\n',body:'# はじめに\n\n<img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/557d8bcf-0b00-563c-52fc-eef4a6f23373.png" width="300px" />\n\n👆画像のようなQiitaの記事をカードで表示するようなものを実装したところ、\n`Safari`で👇のように潰れて表示されてしまった。\n\n<img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/3064d4f5-ee56-ad5e-e148-1d59571154a7.png" width="300px" />\n\nこれを解消した時のメモ\n\n# 環境\n\n* Safari\n    * 16.1（18614.2.9.1.12）\n\n# 実装\n\n```css\n.content {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 3;\n}\n```\n\nこの実装で`GoogleChrome`では3行制限ができたが、`Safari`では画像のように潰れてしまった\n\n# 原因(おそらく)\n\n`Chrome`では上記の実装をするといい感じに指定行数の高さで、`min-height`を設定してくれるが、\n`Safari`ではそれがないため、潰れてしまう。\n\n# 解決\n\n明示的に`min-height`を示すことで`Safari`でも潰れることなく表示されました\n\n```css\n.content {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 3;\n  min-height: 5em;\n}\n```\n\n<img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0e7ee2f8-af83-d01e-abf4-363abe2cbad5.png" width="300px" />\n',coediting:!1,comments_count:0,created_at:"2023-02-05T12:46:16+09:00",group:null,id:"79556226fb8552378ffb",likes_count:2,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"CSS",versions:[]},{name:"Safari",versions:[]}],title:"safariでwebkit-line-clampによる行数制限が効かない",updated_at:"2023-02-05T20:16:42+09:00",url:"https://qiita.com/maaaashi/items/79556226fb8552378ffb",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:868,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-3:147">ServerlessFrameworkを用いて、ApiGatewayのWebsocket通信を利用したリアルタイムアウトTodoアプリを実装した時のメモ。</p>\n<h1 data-sourcepos="5:1-5:8">\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h1>\n<ul data-sourcepos="7:1-11:0">\n<li data-sourcepos="7:1-8:12">Svelte\n<ul data-sourcepos="8:5-8:12">\n<li data-sourcepos="8:5-8:12">3.54.0</li>\n</ul>\n</li>\n<li data-sourcepos="9:1-11:0">ServerlessFramework\n<ul data-sourcepos="10:5-11:0">\n<li data-sourcepos="10:5-11:0">3.27.0</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos="12:1-12:14">\n<span id="完成画面" class="fragment"></span><a href="#%E5%AE%8C%E6%88%90%E7%94%BB%E9%9D%A2"><i class="fa fa-link"></i></a>完成画面</h1>\n<p data-sourcepos="14:1-14:129"><a href="https://camo.qiitausercontent.com/26f6d35efb021c803d48918a060516ab16fd3adb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f61353062363934662d306530622d306230662d616138352d3532656662313832663733392e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa50b694f-0e0b-0b0f-aa85-52efb182f739.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c3f9beff178d79093af73bd62d525b3c" alt="realTimeTodo.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a50b694f-0e0b-0b0f-aa85-52efb182f739.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa50b694f-0e0b-0b0f-aa85-52efb182f739.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c32cf60b9acd90f83f2ef003297079b3 1x" loading="lazy"></a></p>\n<h1 data-sourcepos="16:1-16:20">\n<span id="環境について" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><i class="fa fa-link"></i></a>環境について</h1>\n<h2 data-sourcepos="18:1-18:12">\n<span id="構成図" class="fragment"></span><a href="#%E6%A7%8B%E6%88%90%E5%9B%B3"><i class="fa fa-link"></i></a>構成図</h2>\n<a href="https://camo.qiitausercontent.com/477b5bd593932e3392f0b450041110a3deee12f9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f30623839613066662d613535652d363734352d396535332d3632373435306662343633652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0b89a0ff-a55e-6745-9e53-627450fb463e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f106c8555ad941ea65c729d45e71216a" width="500px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0b89a0ff-a55e-6745-9e53-627450fb463e.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0b89a0ff-a55e-6745-9e53-627450fb463e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9cf86f3a183a9127d501a4ea7000bb85 1x" loading="lazy"></a>\n<h2 data-sourcepos="22:1-22:18">\n<span id="websocket説明" class="fragment"></span><a href="#websocket%E8%AA%AC%E6%98%8E"><i class="fa fa-link"></i></a>WebSocket説明</h2>\n<h3 data-sourcepos="24:1-24:111">\n<span id="1-connect--disconnect時にはdynamodbに用意したテーブルにユーザーの追加削除を行う" class="fragment"></span><a href="#1-connect--disconnect%E6%99%82%E3%81%AB%E3%81%AFdynamodb%E3%81%AB%E7%94%A8%E6%84%8F%E3%81%97%E3%81%9F%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%81%AB%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%81%AE%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4%E3%82%92%E8%A1%8C%E3%81%86"><i class="fa fa-link"></i></a>1. connect / disconnect時にはDynamoDBに用意したテーブルにユーザーの追加/削除を行う</h3>\n<a href="https://camo.qiitausercontent.com/137af63806a34d199fa1cde38befd8fd2b4f260a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f61386363323939652d643363332d623166332d613663302d3864623939613536323431372e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa8cc299e-d3c3-b1f3-a6c0-8db99a562417.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2962f06106f75e2dbd4ba1c786ce323f" width="500px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a8cc299e-d3c3-b1f3-a6c0-8db99a562417.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa8cc299e-d3c3-b1f3-a6c0-8db99a562417.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=03d2f9594f6bf8e1bb8ee073849237e3 1x" loading="lazy"></a>\n<h3 data-sourcepos="28:1-28:61">\n<span id="2-scandata時にはdyamodbからデータを取得する" class="fragment"></span><a href="#2-scandata%E6%99%82%E3%81%AB%E3%81%AFdyamodb%E3%81%8B%E3%82%89%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>2. scanData時にはDyamoDBからデータを取得する</h3>\n<a href="https://camo.qiitausercontent.com/cea917dca118a2949839be342ec5b691acade88c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f37396131376135362d346535302d663434332d373662642d6135353361663262613661662e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F79a17a56-4e50-f443-76bd-a553af2ba6af.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7f2b8ddfd0ad4da7553b8b62769b9e4c" width="500px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/79a17a56-4e50-f443-76bd-a553af2ba6af.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F79a17a56-4e50-f443-76bd-a553af2ba6af.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=bb084ba515281dc22553357957cfa52d 1x" loading="lazy"></a>\n<h3 data-sourcepos="32:1-32:105">\n<span id="3-adddata--deletedata時にはdynamodbに用意したデータテーブルに追加削除を行う" class="fragment"></span><a href="#3-adddata--deletedata%E6%99%82%E3%81%AB%E3%81%AFdynamodb%E3%81%AB%E7%94%A8%E6%84%8F%E3%81%97%E3%81%9F%E3%83%87%E3%83%BC%E3%82%BF%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%81%AB%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4%E3%82%92%E8%A1%8C%E3%81%86"><i class="fa fa-link"></i></a>3. addData / deleteData時にはDynamoDBに用意したデータテーブルに追加/削除を行う</h3>\n<ol data-sourcepos="34:1-36:0">\n<li data-sourcepos="34:1-34:41">lambdaでDataの追加/削除を行う</li>\n<li data-sourcepos="35:1-36:0">現在接続中のユーザー情報をDynamoDBから取得し、情報を送信する</li>\n</ol>\n<a href="https://camo.qiitausercontent.com/358841eb86e44857a5982cf9c97b4645f21bc2b9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f37643632316337322d633139612d616332652d353836312d6365663866316164633263302e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F7d621c72-c19a-ac2e-5861-cef8f1adc2c0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fd87f2519482216299fa0303dea32c0a" width="500px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/7d621c72-c19a-ac2e-5861-cef8f1adc2c0.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F7d621c72-c19a-ac2e-5861-cef8f1adc2c0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e288cfd8ad2103c821eb1126d87c918a 1x" loading="lazy"></a>\n<h1 data-sourcepos="39:1-39:30">\n<span id="serverlessyml--α-抜粋" class="fragment"></span><a href="#serverlessyml--%CE%B1-%E6%8A%9C%E7%B2%8B"><i class="fa fa-link"></i></a>serverless.yml + α (抜粋)</h1>\n<h2 data-sourcepos="41:1-41:18">\n<span id="s3--cloudfront" class="fragment"></span><a href="#s3--cloudfront"><i class="fa fa-link"></i></a>S3 + CloudFront</h2>\n<a href="https://camo.qiitausercontent.com/967f35e6a0a716b4e9cdfe015ade402484cab542/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f65376539313738632d666434322d313135302d393662612d3434633633343036386137612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe7e9178c-fd42-1150-96ba-44c634068a7a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e1473a8c645c0eabec1b6b430a1428d7" width="300px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e7e9178c-fd42-1150-96ba-44c634068a7a.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe7e9178c-fd42-1150-96ba-44c634068a7a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2abf281cd3d25062345a330950fc9922 1x" loading="lazy"></a>\n<details><summary>serverless.yaml</summary><div>\n<div class="code-frame" data-lang="yaml" data-sourcepos="47:1-130:3">\n<div class="code-lang"><span class="bold">serverless.yml</span></div>\n<div class="highlight"><pre><code><span class="na">service</span><span class="pi">:</span> <span class="c1"># 自由に</span>\n<span class="na">frameworkVersion</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">3\'</span>\n\n<span class="na">plugins</span><span class="pi">:</span>\n  <span class="pi">-</span> <span class="s">serverless-s3-sync</span>\n\n<span class="na">provider</span><span class="pi">:</span>\n  <span class="na">name</span><span class="pi">:</span> <span class="s">aws</span>\n  <span class="na">stage</span><span class="pi">:</span> <span class="s">dev</span>\n  <span class="na">region</span><span class="pi">:</span> <span class="c1"># 自由に</span>\n  <span class="na">profile</span><span class="pi">:</span> <span class="c1"># 自由に</span>\n\n<span class="na">custom</span><span class="pi">:</span>\n  <span class="na">stage</span><span class="pi">:</span> <span class="s">${opt:stage, self:provider.stage}</span>\n  <span class="na">s3Sync</span><span class="pi">:</span>\n    <span class="pi">-</span> <span class="na">bucketName</span><span class="pi">:</span> <span class="c1"># s3 syncを行うバケット名</span>\n      <span class="na">localDir</span><span class="pi">:</span> <span class="c1"># sync ディレクトリ</span>\n\n<span class="na">resources</span><span class="pi">:</span>\n  <span class="na">Resources</span><span class="pi">:</span>\n    <span class="c1"># S3</span>\n    <span class="na">AssetsBucket</span><span class="pi">:</span>\n      <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::S3::Bucket</span>\n      <span class="na">DeletionPolicy</span><span class="pi">:</span> <span class="s">Delete</span>\n      <span class="na">Properties</span><span class="pi">:</span>\n        <span class="na">BucketName</span><span class="pi">:</span> <span class="c1"># 自由に(custom.s3sync.bucketNameに合わせる)</span>\n        <span class="na">PublicAccessBlockConfiguration</span><span class="pi">:</span>\n          <span class="na">BlockPublicAcls</span><span class="pi">:</span> <span class="kc">true</span>\n          <span class="na">BlockPublicPolicy</span><span class="pi">:</span> <span class="kc">true</span>\n          <span class="na">IgnorePublicAcls</span><span class="pi">:</span> <span class="kc">true</span>\n          <span class="na">RestrictPublicBuckets</span><span class="pi">:</span> <span class="kc">true</span>\n        <span class="na">CorsConfiguration</span><span class="pi">:</span>\n          <span class="na">CorsRules</span><span class="pi">:</span>\n            <span class="pi">-</span> <span class="na">AllowedMethods</span><span class="pi">:</span>\n                <span class="pi">-</span> <span class="s">GET</span>\n                <span class="pi">-</span> <span class="s">HEAD</span>\n              <span class="na">AllowedOrigins</span><span class="pi">:</span>\n                <span class="pi">-</span> <span class="s1">\'</span><span class="s">*\'</span>\n    <span class="c1"># s3バケットポリシー</span>\n    <span class="c1"># 後述するCloudFrontOriginAccessIdentityを許可する</span>\n    <span class="na">AssetsBucketPolicy</span><span class="pi">:</span>\n      <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::S3::BucketPolicy</span>\n      <span class="na">Properties</span><span class="pi">:</span>\n        <span class="na">Bucket</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s">AssetsBucket</span>\n        <span class="na">PolicyDocument</span><span class="pi">:</span>\n          <span class="na">Statement</span><span class="pi">:</span>\n            <span class="pi">-</span> <span class="na">Action</span><span class="pi">:</span> <span class="s">s3:GetObject</span>\n              <span class="na">Effect</span><span class="pi">:</span> <span class="s">Allow</span>\n              <span class="na">Resource</span><span class="pi">:</span> <span class="kt">!Sub</span> <span class="s">arn:aws:s3:::${AssetsBucket}/*</span>\n              <span class="na">Principal</span><span class="pi">:</span>\n                <span class="na">AWS</span><span class="pi">:</span> <span class="kt">!Sub</span> <span class="s">arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}</span>\n    <span class="c1"># CloudFront</span>\n    <span class="na">AssetsDistribution</span><span class="pi">:</span>\n      <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::CloudFront::Distribution</span>\n      <span class="na">Properties</span><span class="pi">:</span>\n        <span class="na">DistributionConfig</span><span class="pi">:</span>\n          <span class="na">Origins</span><span class="pi">:</span>\n            <span class="pi">-</span> <span class="na">Id</span><span class="pi">:</span> <span class="s">S3Origin</span>\n              <span class="na">DomainName</span><span class="pi">:</span> <span class="kt">!GetAtt</span> <span class="s">AssetsBucket.DomainName</span>\n              <span class="na">S3OriginConfig</span><span class="pi">:</span>\n                <span class="na">OriginAccessIdentity</span><span class="pi">:</span> <span class="kt">!Sub</span> <span class="s">origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}</span>\n          <span class="na">Enabled</span><span class="pi">:</span> <span class="kc">true</span>\n          <span class="na">DefaultRootObject</span><span class="pi">:</span> <span class="s">index.html</span>\n          <span class="na">Comment</span><span class="pi">:</span> <span class="kt">!Sub</span> <span class="s">${AWS::StackName} distribution</span>\n          <span class="na">DefaultCacheBehavior</span><span class="pi">:</span>\n            <span class="na">TargetOriginId</span><span class="pi">:</span> <span class="s">S3Origin</span>\n            <span class="na">ForwardedValues</span><span class="pi">:</span>\n              <span class="na">QueryString</span><span class="pi">:</span> <span class="kc">false</span>\n            <span class="na">ViewerProtocolPolicy</span><span class="pi">:</span> <span class="s">redirect-to-https</span>\n            <span class="na">AllowedMethods</span><span class="pi">:</span>\n              <span class="pi">-</span> <span class="s">GET</span>\n              <span class="pi">-</span> <span class="s">HEAD</span>\n              <span class="pi">-</span> <span class="s">OPTIONS</span>\n              <span class="pi">-</span> <span class="s">PUT</span>\n              <span class="pi">-</span> <span class="s">POST</span>\n              <span class="pi">-</span> <span class="s">PATCH</span>\n              <span class="pi">-</span> <span class="s">DELETE</span>\n    <span class="na">CloudFrontOriginAccessIdentity</span><span class="pi">:</span>\n      <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::CloudFront::CloudFrontOriginAccessIdentity</span>\n      <span class="na">Properties</span><span class="pi">:</span>\n        <span class="na">CloudFrontOriginAccessIdentityConfig</span><span class="pi">:</span>\n          <span class="na">Comment</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s">AWS::StackName</span>\n</code></pre></div>\n</div>\n</div></details>\n<h2 data-sourcepos="134:1-134:34">\n<span id="api-gateway--lambda--dynamodb" class="fragment"></span><a href="#api-gateway--lambda--dynamodb"><i class="fa fa-link"></i></a>Api Gateway + lambda + DynamoDB</h2>\n<a href="https://camo.qiitausercontent.com/c1c0d69eb2ce43acfa27eee4c812c8c7612fa518/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f39613565623335642d366462342d343635372d613266632d6339306537316532323236622e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F9a5eb35d-6db4-4657-a2fc-c90e71e2226b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d1a624f0c795824d5b4840e77fbe26cc" width="300px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/9a5eb35d-6db4-4657-a2fc-c90e71e2226b.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F9a5eb35d-6db4-4657-a2fc-c90e71e2226b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7a572eef303bd7dc3a76b73dcde0cebe 1x" loading="lazy"></a>\n<details><summary>serverless.yaml</summary><div>\n<div class="code-frame" data-lang="yaml" data-sourcepos="140:1-196:3">\n<div class="code-lang"><span class="bold">serverless.yml</span></div>\n<div class="highlight"><pre><code><span class="na">service</span><span class="pi">:</span> <span class="c1"># 自由に</span>\n<span class="na">frameworkVersion</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">3\'</span>\n\n<span class="na">provider</span><span class="pi">:</span>\n  <span class="na">name</span><span class="pi">:</span> <span class="s">aws</span>\n  <span class="na">stage</span><span class="pi">:</span> <span class="s">dev</span>\n  <span class="na">runtime</span><span class="pi">:</span> <span class="c1"># 好きなものを</span>\n  <span class="na">region</span><span class="pi">:</span> <span class="c1"># 自由に</span>\n  <span class="na">profile</span><span class="pi">:</span> <span class="c1"># 自由に</span>\n  <span class="na">websocketsApiRouteSelectionExpression</span><span class="pi">:</span> <span class="s">$request.body.action</span>\n  <span class="na">iam</span><span class="pi">:</span>\n    <span class="na">role</span><span class="pi">:</span>\n      <span class="na">statements</span><span class="pi">:</span>\n        <span class="pi">-</span> <span class="na">Effect</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Allow"</span>\n          <span class="na">Action</span><span class="pi">:</span>\n            <span class="pi">-</span> <span class="s2">"</span><span class="s">dynamodb:*"</span>\n          <span class="na">Resource</span><span class="pi">:</span>\n            <span class="pi">-</span> <span class="s">arn:aws:dynamodb:ap-northeast-1:*:table/○○</span> <span class="c1"># ○○にはDynamoDBのテーブル名を</span>\n\n<span class="na">custom</span><span class="pi">:</span>\n  <span class="na">stage</span><span class="pi">:</span> <span class="s">${opt:stage, self:provider.stage}</span>\n\n<span class="na">functions</span><span class="pi">:</span>\n  <span class="c1"># 例としてconnectHandlerとscanDataHandler</span>\n  <span class="na">connectHandler</span><span class="pi">:</span>\n    <span class="na">handler</span><span class="pi">:</span> <span class="s">handler.connectHandler</span>\n    <span class="na">timeout</span><span class="pi">:</span> <span class="m">30</span>\n    <span class="na">events</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="na">websocket</span><span class="pi">:</span> <span class="s">$connect</span>\n  <span class="na">scanDataHandler</span><span class="pi">:</span>\n    <span class="na">handler</span><span class="pi">:</span> <span class="s">handler.scanDataHandler</span>\n    <span class="na">timeout</span><span class="pi">:</span> <span class="m">30</span>\n    <span class="na">events</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="na">websocket</span><span class="pi">:</span> <span class="s">scanData</span>\n\n<span class="na">resources</span><span class="pi">:</span>\n  <span class="na">Resources</span><span class="pi">:</span>\n    <span class="c1"># DynamoDB</span>\n    <span class="na">Dynamodb</span><span class="pi">:</span>\n      <span class="na">Type</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">AWS::DynamoDB::Table\'</span>\n      <span class="na">Properties</span><span class="pi">:</span>\n        <span class="na">TableName</span><span class="pi">:</span> <span class="c1"># 自由に</span>\n        <span class="na">AttributeDefinitions</span><span class="pi">:</span>\n          <span class="pi">-</span> <span class="na">AttributeName</span><span class="pi">:</span> <span class="s">id</span>   <span class="c1"># パーティションキー</span>\n            <span class="na">AttributeType</span><span class="pi">:</span> <span class="s">S</span>\n          <span class="pi">-</span> <span class="na">AttributeName</span><span class="pi">:</span> <span class="s">type</span> <span class="c1"># ソートキー</span>\n            <span class="na">AttributeType</span><span class="pi">:</span> <span class="s">S</span>\n        <span class="na">KeySchema</span><span class="pi">:</span>\n          <span class="pi">-</span> <span class="na">AttributeName</span><span class="pi">:</span> <span class="s">id</span>   <span class="c1"># パーティションキー</span>\n            <span class="na">KeyType</span><span class="pi">:</span> <span class="s">HASH</span>\n          <span class="pi">-</span> <span class="na">AttributeName</span><span class="pi">:</span> <span class="s">type</span> <span class="c1"># ソートキー</span>\n            <span class="na">KeyType</span><span class="pi">:</span> <span class="s">RANGE</span>\n        <span class="na">ProvisionedThroughput</span><span class="pi">:</span>\n          <span class="na">ReadCapacityUnits</span><span class="pi">:</span> <span class="m">1</span>\n          <span class="na">WriteCapacityUnits</span><span class="pi">:</span> <span class="m">1</span>\n</code></pre></div>\n</div>\n</div></details>\n<details><summary>handler.rb</summary><div>\n<div class="code-frame" data-lang="ruby" data-sourcepos="202:1-245:3">\n<div class="code-lang"><span class="bold">handler.rb</span></div>\n<div class="highlight"><pre><code><span class="nb">require</span> <span class="s1">\'json\'</span>\n<span class="nb">require</span> <span class="s1">\'aws-sdk\'</span>\n\n<span class="k">def</span> <span class="nf">dynamodb_client</span>\n  <span class="no">Aws</span><span class="o">::</span><span class="no">DynamoDB</span><span class="o">::</span><span class="no">Client</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">region: </span><span class="s1">\'ap-northeast-1\'</span><span class="p">)</span>\n<span class="k">end</span>\n\n<span class="k">def</span> <span class="nf">connectHandler</span><span class="p">(</span><span class="n">event</span><span class="p">:,</span> <span class="n">context</span><span class="p">:)</span>\n  <span class="k">begin</span>\n    <span class="n">table_item</span> <span class="o">=</span> <span class="p">{</span>\n      <span class="ss">table_name: </span><span class="err">○○</span><span class="p">,</span> <span class="c1"># 作成したテーブル名</span>\n      <span class="ss">item: </span><span class="p">{</span>\n        <span class="ss">id: </span><span class="n">event</span><span class="p">[</span><span class="s1">\'requestContext\'</span><span class="p">][</span><span class="s1">\'connectionId\'</span><span class="p">],</span> <span class="c1"># パーティションキー</span>\n        <span class="ss">type: </span><span class="s1">\'user\'</span>                                 <span class="c1"># ハッシュキー</span>\n      <span class="p">}</span>\n    <span class="p">}</span>\n\n    <span class="n">dynamodb_client</span><span class="p">.</span><span class="nf">put_item</span><span class="p">(</span><span class="n">table_item</span><span class="p">)</span>\n\n    <span class="p">{</span> <span class="s2">"statusCode"</span><span class="p">:</span> <span class="mi">200</span> <span class="p">}</span>\n  <span class="k">rescue</span> <span class="no">StandardError</span> <span class="o">=&gt;</span> <span class="n">e</span>\n    <span class="nb">puts</span> <span class="n">e</span>\n\n    <span class="p">{</span> <span class="s2">"statusCode"</span><span class="p">:</span> <span class="mi">500</span> <span class="p">}</span>\n  <span class="k">end</span>\n<span class="k">end</span>\n\n<span class="k">def</span> <span class="nf">scanDataHandler</span><span class="p">(</span><span class="n">event</span><span class="p">:,</span> <span class="n">context</span><span class="p">:)</span>\n  <span class="n">scanData</span> <span class="o">=</span> <span class="n">dynamodb_client</span><span class="p">.</span><span class="nf">scan</span><span class="p">(</span>\n    <span class="ss">table_name: </span><span class="err">○○</span> <span class="c1"># 作成したテーブル名</span>\n  <span class="p">)</span>\n  <span class="n">todos</span> <span class="o">=</span> <span class="n">scanData</span><span class="p">.</span><span class="nf">items</span><span class="p">.</span><span class="nf">select</span><span class="p">{</span> <span class="o">|</span><span class="n">data</span><span class="o">|</span> <span class="n">data</span><span class="p">[</span><span class="s2">"type"</span><span class="p">]</span> <span class="o">===</span> <span class="s1">\'todo\'</span> <span class="p">}</span>\n\n  <span class="n">api_gw</span> <span class="o">=</span> <span class="no">Aws</span><span class="o">::</span><span class="no">ApiGatewayManagementApi</span><span class="o">::</span><span class="no">Client</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>\n    <span class="ss">endpoint: </span><span class="s1">\'https://\'</span> <span class="o">+</span> <span class="n">event</span><span class="p">[</span><span class="s1">\'requestContext\'</span><span class="p">][</span><span class="s1">\'domainName\'</span><span class="p">]</span> <span class="o">+</span> <span class="s1">\'/\'</span> <span class="o">+</span> <span class="n">event</span><span class="p">[</span><span class="s1">\'requestContext\'</span><span class="p">][</span><span class="s1">\'stage\'</span><span class="p">]</span>\n  <span class="p">)</span>\n\n  <span class="n">api_gw</span><span class="p">(</span><span class="n">event</span><span class="p">).</span><span class="nf">post_to_connection</span><span class="p">(</span>\n    <span class="ss">connection_id: </span><span class="n">event</span><span class="p">[</span><span class="s1">\'requestContext\'</span><span class="p">][</span><span class="s1">\'connectionId\'</span><span class="p">],</span>\n    <span class="ss">data: </span><span class="p">{</span> <span class="ss">todos: </span><span class="n">todos</span> <span class="p">}.</span><span class="nf">to_json</span>\n  <span class="p">)</span>\n<span class="k">end</span>\n</code></pre></div>\n</div>\n</div></details>\n<h1 data-sourcepos="249:1-249:25">\n<span id="フロント側svelte" class="fragment"></span><a href="#%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4svelte"><i class="fa fa-link"></i></a>フロント側(Svelte)</h1>\n<div class="code-frame" data-lang="vue" data-sourcepos="251:1-283:3">\n<div class="code-lang"><span class="bold">+page.svelte</span></div>\n<div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">onMount</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">svelte</span><span class="dl">\'</span><span class="p">;</span>\n\n  <span class="kd">const</span> <span class="nx">connection</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">WebSocket</span><span class="p">(</span><span class="k">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">VITE_WEBSOCKET_URL</span><span class="p">)</span>\n\n  <span class="kd">const</span> <span class="nx">scanTodo</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="kd">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="p">{</span>\n      <span class="na">action</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">scanTodo</span><span class="dl">\'</span>\n    <span class="p">}</span>\n\n    <span class="nx">connection</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">(</span><span class="nx">message</span><span class="p">))</span>\n  <span class="p">}</span>\n\n  <span class="kr">interface</span> <span class="nx">Todo</span> <span class="p">{</span>\n    <span class="nl">id</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>\n    <span class="nl">type</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>\n    <span class="nl">content</span><span class="p">:</span> <span class="nx">any</span><span class="p">;</span>\n  <span class="p">}</span>\n\n  <span class="kd">let</span> <span class="nx">todos</span><span class="p">:</span> <span class="nx">Todo</span><span class="p">[];</span>\n\n  <span class="c1">// メッセージを受け取ったときの処理</span>\n  <span class="nx">connection</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="kd">const</span> <span class="na">json_todo</span><span class="p">:</span> <span class="nx">Todo</span><span class="p">[]</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span>\n    <span class="nx">todos</span> <span class="o">=</span> <span class="nx">json_todo</span>\n  <span class="p">}</span>\n\n  <span class="nf">onMount</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="nf">scanTodo</span><span class="p">()</span>\n  <span class="p">})</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos="285:1-285:11">\n<span id="最後に" class="fragment"></span><a href="#%E6%9C%80%E5%BE%8C%E3%81%AB"><i class="fa fa-link"></i></a>最後に</h1>\n<p data-sourcepos="287:1-287:80">GraphQLとAppSyncを使って同じような構成も作ってみたいです〜</p>\n',body:"# はじめに\n\nServerlessFrameworkを用いて、ApiGatewayのWebsocket通信を利用したリアルタイムアウトTodoアプリを実装した時のメモ。\n\n# 環境\n\n* Svelte\n    * 3.54.0\n* ServerlessFramework\n    * 3.27.0\n\n# 完成画面\n\n![realTimeTodo.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a50b694f-0e0b-0b0f-aa85-52efb182f739.gif)\n\n# 環境について\n\n## 構成図\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0b89a0ff-a55e-6745-9e53-627450fb463e.png\" width=\"500px\" />\n\n## WebSocket説明\n\n### 1. connect / disconnect時にはDynamoDBに用意したテーブルにユーザーの追加/削除を行う\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a8cc299e-d3c3-b1f3-a6c0-8db99a562417.png\" width=\"500px\" />\n\n### 2. scanData時にはDyamoDBからデータを取得する\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/79a17a56-4e50-f443-76bd-a553af2ba6af.png\" width=\"500px\" />\n\n### 3. addData / deleteData時にはDynamoDBに用意したデータテーブルに追加/削除を行う\n\n1. lambdaでDataの追加/削除を行う\n1. 現在接続中のユーザー情報をDynamoDBから取得し、情報を送信する\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/7d621c72-c19a-ac2e-5861-cef8f1adc2c0.png\" width=\"500px\" />\n\n# serverless.yml + α (抜粋)\n\n## S3 + CloudFront\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e7e9178c-fd42-1150-96ba-44c634068a7a.png\" width=\"300px\" />\n\n<details><summary>serverless.yaml</summary><div>\n\n```yaml:serverless.yml\nservice: # 自由に\nframeworkVersion: '3'\n\nplugins:\n  - serverless-s3-sync\n\nprovider:\n  name: aws\n  stage: dev\n  region: # 自由に\n  profile: # 自由に\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  s3Sync:\n    - bucketName: # s3 syncを行うバケット名\n      localDir: # sync ディレクトリ\n\nresources:\n  Resources:\n    # S3\n    AssetsBucket:\n      Type: AWS::S3::Bucket\n      DeletionPolicy: Delete\n      Properties:\n        BucketName: # 自由に(custom.s3sync.bucketNameに合わせる)\n        PublicAccessBlockConfiguration:\n          BlockPublicAcls: true\n          BlockPublicPolicy: true\n          IgnorePublicAcls: true\n          RestrictPublicBuckets: true\n        CorsConfiguration:\n          CorsRules:\n            - AllowedMethods:\n                - GET\n                - HEAD\n              AllowedOrigins:\n                - '*'\n    # s3バケットポリシー\n    # 後述するCloudFrontOriginAccessIdentityを許可する\n    AssetsBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: !Ref AssetsBucket\n        PolicyDocument:\n          Statement:\n            - Action: s3:GetObject\n              Effect: Allow\n              Resource: !Sub arn:aws:s3:::${AssetsBucket}/*\n              Principal:\n                AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}\n    # CloudFront\n    AssetsDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Origins:\n            - Id: S3Origin\n              DomainName: !GetAtt AssetsBucket.DomainName\n              S3OriginConfig:\n                OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}\n          Enabled: true\n          DefaultRootObject: index.html\n          Comment: !Sub ${AWS::StackName} distribution\n          DefaultCacheBehavior:\n            TargetOriginId: S3Origin\n            ForwardedValues:\n              QueryString: false\n            ViewerProtocolPolicy: redirect-to-https\n            AllowedMethods:\n              - GET\n              - HEAD\n              - OPTIONS\n              - PUT\n              - POST\n              - PATCH\n              - DELETE\n    CloudFrontOriginAccessIdentity:\n      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n      Properties:\n        CloudFrontOriginAccessIdentityConfig:\n          Comment: !Ref AWS::StackName\n```\n\n</div></details>\n\n## Api Gateway + lambda + DynamoDB\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/9a5eb35d-6db4-4657-a2fc-c90e71e2226b.png\" width=\"300px\" />\n\n<details><summary>serverless.yaml</summary><div>\n\n```yaml:serverless.yml\nservice: # 自由に\nframeworkVersion: '3'\n\nprovider:\n  name: aws\n  stage: dev\n  runtime: # 好きなものを\n  region: # 自由に\n  profile: # 自由に\n  websocketsApiRouteSelectionExpression: $request.body.action\n  iam:\n    role:\n      statements:\n        - Effect: \"Allow\"\n          Action:\n            - \"dynamodb:*\"\n          Resource:\n            - arn:aws:dynamodb:ap-northeast-1:*:table/○○ # ○○にはDynamoDBのテーブル名を\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n\nfunctions:\n  # 例としてconnectHandlerとscanDataHandler\n  connectHandler:\n    handler: handler.connectHandler\n    timeout: 30\n    events:\n      - websocket: $connect\n  scanDataHandler:\n    handler: handler.scanDataHandler\n    timeout: 30\n    events:\n      - websocket: scanData\n\nresources:\n  Resources:\n    # DynamoDB\n    Dynamodb:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: # 自由に\n        AttributeDefinitions:\n          - AttributeName: id   # パーティションキー\n            AttributeType: S\n          - AttributeName: type # ソートキー\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id   # パーティションキー\n            KeyType: HASH\n          - AttributeName: type # ソートキー\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n```\n\n</div></details>\n\n<details><summary>handler.rb</summary><div>\n\n```ruby:handler.rb\nrequire 'json'\nrequire 'aws-sdk'\n\ndef dynamodb_client\n  Aws::DynamoDB::Client.new(region: 'ap-northeast-1')\nend\n\ndef connectHandler(event:, context:)\n  begin\n    table_item = {\n      table_name: ○○, # 作成したテーブル名\n      item: {\n        id: event['requestContext']['connectionId'], # パーティションキー\n        type: 'user'                                 # ハッシュキー\n      }\n    }\n\n    dynamodb_client.put_item(table_item)\n\n    { \"statusCode\": 200 }\n  rescue StandardError => e\n    puts e\n\n    { \"statusCode\": 500 }\n  end\nend\n\ndef scanDataHandler(event:, context:)\n  scanData = dynamodb_client.scan(\n    table_name: ○○ # 作成したテーブル名\n  )\n  todos = scanData.items.select{ |data| data[\"type\"] === 'todo' }\n\n  api_gw = Aws::ApiGatewayManagementApi::Client.new(\n    endpoint: 'https://' + event['requestContext']['domainName'] + '/' + event['requestContext']['stage']\n  )\n\n  api_gw(event).post_to_connection(\n    connection_id: event['requestContext']['connectionId'],\n    data: { todos: todos }.to_json\n  )\nend\n```\n\n</div></details>\n\n# フロント側(Svelte)\n\n```vue:+page.svelte\n<script lang=\"ts\">\n  import { onMount } from 'svelte';\n\n  const connection = new WebSocket(import.meta.env.VITE_WEBSOCKET_URL)\n\n  const scanTodo = () => {\n    const message = {\n      action: 'scanTodo'\n    }\n\n    connection.send(JSON.stringify(message))\n  }\n\n  interface Todo {\n    id: string;\n    type: string;\n    content: any;\n  }\n\n  let todos: Todo[];\n\n  // メッセージを受け取ったときの処理\n  connection.onmessage = event => {\n    const json_todo: Todo[] = JSON.parse(event.data)\n    todos = json_todo\n  }\n\n  onMount(() => {\n    scanTodo()\n  })\n<\/script>\n```\n\n# 最後に\n\nGraphQLとAppSyncを使って同じような構成も作ってみたいです〜\n",coediting:!1,comments_count:0,created_at:"2023-02-02T18:36:12+09:00",group:null,id:"74933bf63ab56fee725c",likes_count:5,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"Ruby",versions:[]},{name:"JavaScript",versions:[]},{name:"ServerlessFramework",versions:[]},{name:"Svelte",versions:[]}],title:"【ServerlessFramework】API GatewayのWebSocket通信を利用してリアルタイムに変化するTodoアプリを作成した",updated_at:"2023-02-02T18:52:04+09:00",url:"https://qiita.com/maaaashi/items/74933bf63ab56fee725c",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:832,team_membership:null,organization_url_name:null},{rendered_body:'<h2 data-sourcepos="1:1-1:15">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h2>\n<p data-sourcepos="3:1-4:105">普段から<code>ServerlessFramework</code>を用いてデプロイしていますが、<br>\nその中で<code>!Ref</code>と<code>!Sub</code>の使い分けについて整理したのでこちらにもまとめます。</p>\n<h2 data-sourcepos="6:1-6:9">\n<span id="結論" class="fragment"></span><a href="#%E7%B5%90%E8%AB%96"><i class="fa fa-link"></i></a>結論</h2>\n<p data-sourcepos="8:1-8:48">表記の違いと、結合できるかどうか</p>\n<h2 data-sourcepos="10:1-10:18">\n<span id="1-表記違い" class="fragment"></span><a href="#1-%E8%A1%A8%E8%A8%98%E9%81%95%E3%81%84"><i class="fa fa-link"></i></a>1. 表記違い</h2>\n<div class="code-frame" data-lang="yml" data-sourcepos="12:1-18:3"><div class="highlight"><pre><code><span class="kt">!Ref</span> <span class="s">MyBucketName</span>\n<span class="c1"># ⇒ "hoge-bucket"</span>\n\n<span class="kt">!Sub</span> <span class="s">${MyBucketName}</span>\n<span class="c1"># ⇒ "hoge-bucket"</span>\n</code></pre></div></div>\n<p data-sourcepos="20:1-20:37"><code>Sub</code>は<code>${}</code>で囲む必要がある</p>\n<h2 data-sourcepos="22:1-22:33">\n<span id="2-結合できるかどうか" class="fragment"></span><a href="#2-%E7%B5%90%E5%90%88%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B"><i class="fa fa-link"></i></a>2. 結合できるかどうか</h2>\n<div class="code-frame" data-lang="yml" data-sourcepos="24:1-30:3"><div class="highlight"><pre><code><span class="kt">!Ref</span> <span class="s">MyBucketName-dev-assets</span>\n<span class="c1"># ⇒ error</span>\n\n<span class="kt">!Sub</span> <span class="s">${MyBucketName}-dev-assets</span>\n<span class="c1"># ⇒ "hoge-bucket-dev-assets"</span>\n</code></pre></div></div>\n<p data-sourcepos="32:1-32:65"><code>Ref</code>で結合をしたいときは<code>Join</code>を使う必要がある</p>\n<div class="code-frame" data-lang="yml" data-sourcepos="34:1-41:3"><div class="highlight"><pre><code><span class="kt">!Join</span>\n  <span class="pi">-</span> <span class="s1">\'</span><span class="s">-\'</span>\n  <span class="pi">-</span> <span class="kt">!Ref</span> <span class="s">MyBucketName</span>\n  <span class="pi">-</span> <span class="s">dev</span>\n  <span class="pi">-</span> <span class="s">assets</span>\n<span class="c1"># ⇒ "hoge-bucket-dev-assets"</span>\n</code></pre></div></div>\n<h2 data-sourcepos="43:1-43:12">\n<span id="3-結論" class="fragment"></span><a href="#3-%E7%B5%90%E8%AB%96"><i class="fa fa-link"></i></a>3. 結論</h2>\n<p data-sourcepos="45:1-46:47">単純に論理値変換で使うのであれば<code>${}</code>を忘れやすいため 、<code>Ref</code>を使い<br>\n結合とかしたいときは<code>Sub</code>を使う。</p>\n<p data-sourcepos="48:1-48:36">というのが良さそうです。</p>\n',body:'## はじめに\n\n普段から`ServerlessFramework`を用いてデプロイしていますが、\nその中で`!Ref`と`!Sub`の使い分けについて整理したのでこちらにもまとめます。\n\n## 結論\n\n表記の違いと、結合できるかどうか\n\n## 1. 表記違い\n\n~~~yml\n!Ref MyBucketName\n# ⇒ "hoge-bucket"\n\n!Sub ${MyBucketName}\n# ⇒ "hoge-bucket"\n~~~\n\n`Sub`は`${}`で囲む必要がある\n\n## 2. 結合できるかどうか\n\n~~~yml\n!Ref MyBucketName-dev-assets\n# ⇒ error\n\n!Sub ${MyBucketName}-dev-assets\n# ⇒ "hoge-bucket-dev-assets"\n~~~\n\n`Ref`で結合をしたいときは`Join`を使う必要がある\n\n~~~yml\n!Join\n  - \'-\'\n  - !Ref MyBucketName\n  - dev\n  - assets\n# ⇒ "hoge-bucket-dev-assets"\n~~~\n\n## 3. 結論\n\n単純に論理値変換で使うのであれば`${}`を忘れやすいため 、`Ref`を使い\n結合とかしたいときは`Sub`を使う。\n\nというのが良さそうです。\n',coediting:!1,comments_count:0,created_at:"2023-01-31T13:11:26+09:00",group:null,id:"e7d9461fec0cff332171",likes_count:2,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"CloudFormation",versions:[]},{name:"ServerlessFramework",versions:[]}],title:"【CloudFormation | Serverless Framework】RefとSubの使い分け",updated_at:"2023-01-31T13:11:26+09:00",url:"https://qiita.com/maaaashi/items/e7d9461fec0cff332171",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:285,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:125">Dockerでnodejsの環境をalpineベースで作成し、<br>\n<code>supabase-js</code>をインストールしようとしたところ以下エラーが発生したのを修正した時のメモ。</p>\n<h1 data-sourcepos="6:1-6:47">\n<span id="エラー時の状況原因解消方法" class="fragment"></span><a href="#%E3%82%A8%E3%83%A9%E3%83%BC%E6%99%82%E3%81%AE%E7%8A%B6%E6%B3%81%E5%8E%9F%E5%9B%A0%E8%A7%A3%E6%B6%88%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>エラー時の状況・原因・解消方法</h1>\n<h2 data-sourcepos="8:1-8:21">\n<span id="発現時の状況" class="fragment"></span><a href="#%E7%99%BA%E7%8F%BE%E6%99%82%E3%81%AE%E7%8A%B6%E6%B3%81"><i class="fa fa-link"></i></a>発現時の状況</h2>\n<div class="code-frame" data-lang="dockerfile" data-sourcepos="10:1-20:3">\n<div class="code-lang"><span class="bold">Dockerfile</span></div>\n<div class="highlight"><pre><code><span class="k">FROM</span><span class="s"> node:18.13-alpine3.16</span>\n\n<span class="k">RUN </span>apk update\n\n<span class="k">WORKDIR</span><span class="s"> /var/www/app</span>\n\n<span class="k">USER</span><span class="s"> node</span>\n\n<span class="k">CMD</span><span class="s"> ["yarn", "dev"]</span>\n</code></pre></div>\n</div>\n<div class="code-frame" data-lang="yaml" data-sourcepos="22:1-33:3">\n<div class="code-lang"><span class="bold">docker-compose.yml</span></div>\n<div class="highlight"><pre><code><span class="na">version</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">3\'</span>\n\n<span class="na">services</span><span class="pi">:</span>\n  <span class="na">app</span><span class="pi">:</span>\n    <span class="na">build</span><span class="pi">:</span> <span class="s">.</span>\n    <span class="na">ports</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s2">"</span><span class="s">8080:8080"</span>\n    <span class="na">volumes</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s2">"</span><span class="s">./front:/var/www/app"</span>\n    <span class="na">tty</span><span class="pi">:</span> <span class="kc">true</span>\n</code></pre></div>\n</div>\n<div class="code-frame" data-lang="bash" data-sourcepos="35:1-62:3"><div class="highlight"><pre><code><span class="nv">$ </span>docker-compose <span class="nb">exec </span>app sh\n/var/www/app <span class="nv">$ </span>yarn add @supabase/supabase-js\n\n・\n・\n・\ngyp ERR! find Python \ngyp ERR! find Python Python is not <span class="nb">set </span>from <span class="nb">command </span>line or npm configuration\ngyp ERR! find Python Python is not <span class="nb">set </span>from environment variable PYTHON\ngyp ERR! find Python checking <span class="k">if</span> <span class="s2">"python3"</span> can be used\ngyp ERR! find Python - <span class="s2">"python3"</span> is not <span class="k">in </span>PATH or produced an error\ngyp ERR! find Python checking <span class="k">if</span> <span class="s2">"python"</span> can be used\ngyp ERR! find Python - <span class="s2">"python"</span> is not <span class="k">in </span>PATH or produced an error\ngyp ERR! find Python \ngyp ERR! find Python <span class="k">**********************************************************</span>\ngyp ERR! find Python You need to <span class="nb">install </span>the latest version of Python.\ngyp ERR! find Python Node-gyp should be able to find and use Python. If not,\ngyp ERR! find Python you can try one of the following options:\ngyp ERR! find Python - Use the switch <span class="nt">--python</span><span class="o">=</span><span class="s2">"/path/to/pythonexecutable"</span>\ngyp ERR! find Python   <span class="o">(</span>accepted by both node-gyp and npm<span class="o">)</span>\ngyp ERR! find Python - Set the environment variable PYTHON\ngyp ERR! find Python - Set the npm configuration variable python:\ngyp ERR! find Python   npm config <span class="nb">set </span>python <span class="s2">"/path/to/pythonexecutable"</span>\ngyp ERR! find Python For more information consult the documentation at:\ngyp ERR! find Python https://github.com/nodejs/node-gyp#installation\ngyp ERR! find Python <span class="k">**********************************************************</span>\n</code></pre></div></div>\n<h2 data-sourcepos="64:1-64:36">\n<span id="エラーの原因解消方法" class="fragment"></span><a href="#%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AE%E5%8E%9F%E5%9B%A0%E8%A7%A3%E6%B6%88%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>エラーの原因・解消方法</h2>\n<ul data-sourcepos="66:1-68:0">\n<li data-sourcepos="66:1-66:54">\n<code>node-gyp</code>の依存関係で起こったエラー。</li>\n<li data-sourcepos="67:1-68:0">\n<code>node-gyp</code>とは、Node.jsのモジュールをコンパイルするコマンドラインツール。</li>\n</ul>\n<p data-sourcepos="69:1-69:141">公式の<a href="https://github.com/nodejs/node-gyp" rel="nofollow noopener" target="_blank">Github</a>を確認したところ、依存関係にはmakeやpythonが必要なようでした。</p>\n<p data-sourcepos="71:1-71:164"><a href="https://camo.qiitausercontent.com/f23dd1ae8f5e56f2bcf0ce11c07484b8f6ba49e2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f32643230343936312d653337302d376239302d633332372d3831613763626631643963652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F2d204961-e370-7b90-c327-81a7cbf1d9ce.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fdc0915a2f2de06898853fcafe4273af" alt="スクリーンショット 2023-01-21 17.10.54.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/2d204961-e370-7b90-c327-81a7cbf1d9ce.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F2d204961-e370-7b90-c327-81a7cbf1d9ce.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6beaad3088e251b4fe36965d20cca034 1x" loading="lazy"></a></p>\n<p data-sourcepos="73:1-73:139"><code>make</code> <code>gcc</code> <code>g++</code> <code>python</code>の4つの依存関係をインストールすることで依存関係のエラーは解消できそうです。</p>\n<h2 data-sourcepos="75:1-75:22">\n<span id="dockerfileの変更" class="fragment"></span><a href="#dockerfile%E3%81%AE%E5%A4%89%E6%9B%B4"><i class="fa fa-link"></i></a>Dockerfileの変更</h2>\n<div class="code-frame" data-lang="Dockerfile" data-sourcepos="77:1-90:3"><div class="highlight"><pre><code><span class="k">FROM</span><span class="s"> node:18.13-alpine3.16</span>\n\n<span class="c"># 変更</span>\n<span class="k">RUN </span>apk update <span class="o">&amp;&amp;</span> <span class="se">\\\n</span>    apk upgrade <span class="o">&amp;&amp;</span> <span class="se">\\\n</span>    apk add <span class="nt">--no-cache</span> make gcc g++ python3\n\n<span class="k">WORKDIR</span><span class="s"> /var/www/app</span>\n\n<span class="k">USER</span><span class="s"> node</span>\n\n<span class="k">CMD</span><span class="s"> ["yarn", "dev"]</span>\n</code></pre></div></div>\n<p data-sourcepos="92:1-92:51">変更後無事インストールできました！</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="94:1-106:3"><div class="highlight"><pre><code>/var/www/app <span class="nv">$ </span>yarn add @supabase/supabase-js\nyarn add v1.22.19\n\n・\n・\n・\n\n├─ whatwg-url@5.0.0\n└─ yaeti@0.0.6\nDone <span class="k">in </span>12.07s.\n/var/www/app <span class="nv">$ </span>\n</code></pre></div></div>\n',body:'# はじめに\n\nDockerでnodejsの環境をalpineベースで作成し、\n `supabase-js`をインストールしようとしたところ以下エラーが発生したのを修正した時のメモ。\n\n# エラー時の状況・原因・解消方法\n\n## 発現時の状況\n\n```dockerfile:Dockerfile\nFROM node:18.13-alpine3.16\n\nRUN apk update\n\nWORKDIR /var/www/app\n\nUSER node\n\nCMD ["yarn", "dev"]\n```\n\n```yaml:docker-compose.yml\nversion: \'3\'\n\nservices:\n  app:\n    build: .\n    ports:\n      - "8080:8080"\n    volumes:\n      - "./front:/var/www/app"\n    tty: true\n```\n\n```zsh\n$ docker-compose exec app sh\n/var/www/app $ yarn add @supabase/supabase-js\n\n・\n・\n・\ngyp ERR! find Python \ngyp ERR! find Python Python is not set from command line or npm configuration\ngyp ERR! find Python Python is not set from environment variable PYTHON\ngyp ERR! find Python checking if "python3" can be used\ngyp ERR! find Python - "python3" is not in PATH or produced an error\ngyp ERR! find Python checking if "python" can be used\ngyp ERR! find Python - "python" is not in PATH or produced an error\ngyp ERR! find Python \ngyp ERR! find Python **********************************************************\ngyp ERR! find Python You need to install the latest version of Python.\ngyp ERR! find Python Node-gyp should be able to find and use Python. If not,\ngyp ERR! find Python you can try one of the following options:\ngyp ERR! find Python - Use the switch --python="/path/to/pythonexecutable"\ngyp ERR! find Python   (accepted by both node-gyp and npm)\ngyp ERR! find Python - Set the environment variable PYTHON\ngyp ERR! find Python - Set the npm configuration variable python:\ngyp ERR! find Python   npm config set python "/path/to/pythonexecutable"\ngyp ERR! find Python For more information consult the documentation at:\ngyp ERR! find Python https://github.com/nodejs/node-gyp#installation\ngyp ERR! find Python **********************************************************\n```\n\n## エラーの原因・解消方法\n\n* `node-gyp`の依存関係で起こったエラー。\n* `node-gyp`とは、Node.jsのモジュールをコンパイルするコマンドラインツール。\n\n公式の[Github](https://github.com/nodejs/node-gyp)を確認したところ、依存関係にはmakeやpythonが必要なようでした。\n\n![スクリーンショット 2023-01-21 17.10.54.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/2d204961-e370-7b90-c327-81a7cbf1d9ce.png)\n\n`make` `gcc` `g++` `python`の4つの依存関係をインストールすることで依存関係のエラーは解消できそうです。\n\n## Dockerfileの変更\n\n```Dockerfile\nFROM node:18.13-alpine3.16\n\n# 変更\nRUN apk update && \\\n    apk upgrade && \\\n    apk add --no-cache make gcc g++ python3\n\nWORKDIR /var/www/app\n\nUSER node\n\nCMD ["yarn", "dev"]\n```\n\n変更後無事インストールできました！\n\n```zsh\n/var/www/app $ yarn add @supabase/supabase-js\nyarn add v1.22.19\n\n・\n・\n・\n\n├─ whatwg-url@5.0.0\n└─ yaeti@0.0.6\nDone in 12.07s.\n/var/www/app $ \n```\n',coediting:!1,comments_count:0,created_at:"2023-01-21T17:20:54+09:00",group:null,id:"36afba6787aea95f2f15",likes_count:1,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"Mac",versions:[]},{name:"Node.js",versions:[]},{name:"Docker",versions:[]},{name:"alpine",versions:[]},{name:"Supabase",versions:[]}],title:"Docker alpineベースの環境でnode-gypのエラーが出た",updated_at:"2023-01-21T17:20:54+09:00",url:"https://qiita.com/maaaashi/items/36afba6787aea95f2f15",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:1556,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-6:45">認証サーバーとして<code>keycloak</code>を使おうと思い、<br>\n<code>docker</code>でkeycloakを起動し、<br>\nアプリケーションを<code>Vite</code>で構築し、<br>\n「さあ認証だ！」というところで</p>\n<p data-sourcepos="8:1-8:170"><font color="red">Refused to frame \'<a href="http://localhost:8080/" class="autolink" rel="nofollow noopener" target="_blank">http://localhost:8080/</a>\' because an ancestor violates the following Content Security Policy directive: "frame-ancestors \'self\'".</font></p>\n<p data-sourcepos="10:1-10:122"><a href="https://camo.qiitausercontent.com/3654f45b4cb4311ee07c2a6f1813b9f1bb6e5e7a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31613064373035312d643530652d353238332d383835392d6366326631356432653837342e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1a0d7051-d50e-5283-8859-cf2f15d2e874.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e5426110814eada49f524ea40a335fe2" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1a0d7051-d50e-5283-8859-cf2f15d2e874.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1a0d7051-d50e-5283-8859-cf2f15d2e874.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9c44c878598b312ae3c4e1c408b7e4ec 1x" loading="lazy"></a></p>\n<p data-sourcepos="12:1-12:30">に悩まされた話です。</p>\n<h1 data-sourcepos="14:1-14:20">\n<span id="開発環境構築" class="fragment"></span><a href="#%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89"><i class="fa fa-link"></i></a>開発環境構築</h1>\n<h2 data-sourcepos="16:1-16:18">\n<span id="keycloak-docker" class="fragment"></span><a href="#keycloak-docker"><i class="fa fa-link"></i></a>keycloak docker</h2>\n<ol data-sourcepos="18:1-51:0">\n<li data-sourcepos="18:1-43:0">\n<p data-sourcepos="18:4-18:39">docker-compose.ymlに以下を記入</p>\n<div class="code-frame" data-lang="yaml" data-sourcepos="20:5-42:7">\n<div class="code-lang"><span class="bold">docker-compose.yml</span></div>\n<div class="highlight"><pre><code><span class="na">version</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">2\'</span>\n<span class="na">services</span><span class="pi">:</span>\n  <span class="na">postgresql</span><span class="pi">:</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">docker.io/bitnami/postgresql:11</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">ALLOW_EMPTY_PASSWORD=yes</span>\n      <span class="pi">-</span> <span class="s">POSTGRESQL_USERNAME=bn_keycloak</span>\n      <span class="pi">-</span> <span class="s">POSTGRESQL_DATABASE=bitnami_keycloak</span>\n    <span class="na">volumes</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s1">\'</span><span class="s">postgresql_data:/bitnami/postgresql\'</span>\n\n  <span class="na">keycloak</span><span class="pi">:</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">docker.io/bitnami/keycloak:19</span>\n    <span class="na">depends_on</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">postgresql</span>\n    <span class="na">ports</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s2">"</span><span class="s">8080:8080"</span>\n\n<span class="na">volumes</span><span class="pi">:</span>\n  <span class="na">postgresql_data</span><span class="pi">:</span>\n    <span class="na">driver</span><span class="pi">:</span> <span class="s">local</span>\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos="44:1-49:0">\n<p data-sourcepos="44:4-44:9">起動</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="46:5-48:7"><div class="highlight"><pre><code><span class="nv">$ </span>docker-compose up\n</code></pre></div></div>\n</li>\n<li data-sourcepos="50:1-51:0">\n<p data-sourcepos="50:4-50:116"><a href="http://localhost:8080" rel="nofollow noopener" target="_blank">http://localhost:8080</a>に移動し、以下を登録(keycloakの詳しい説明は割愛)</p>\n</li>\n</ol>\n<ul data-sourcepos="52:1-56:0">\n<li data-sourcepos="52:1-53:13">レルム\n<ul data-sourcepos="53:5-53:13">\n<li data-sourcepos="53:5-53:13">myrealm</li>\n</ul>\n</li>\n<li data-sourcepos="54:1-56:0">client_id\n<ul data-sourcepos="55:5-56:0">\n<li data-sourcepos="55:5-56:0">app-vue</li>\n</ul>\n</li>\n</ul>\n<h2 data-sourcepos="57:1-57:14">\n<span id="vite--vue3" class="fragment"></span><a href="#vite--vue3"><i class="fa fa-link"></i></a>Vite + Vue3</h2>\n<ul data-sourcepos="59:1-60:0">\n<li data-sourcepos="59:1-60:0">node v16.13.2</li>\n</ul>\n<ol data-sourcepos="61:1-94:0">\n<li data-sourcepos="61:1-72:0">\n<p data-sourcepos="61:4-61:18">以下を実行</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="63:5-71:7"><div class="highlight"><pre><code><span class="nv">$ </span>npm init vite@latest\n  バージョンの確認: y\n  アプリ名: <span class="o">(</span>お好きに<span class="o">)</span>\n  フレームワーク: Vue ⇒ TypeScript\n\n<span class="nv">$ </span><span class="nb">cd</span> <span class="o">(</span>アプリ名<span class="o">)</span>\n<span class="nv">$ </span>yarn\n</code></pre></div></div>\n</li>\n<li data-sourcepos="73:1-88:0">\n<p data-sourcepos="73:4-73:26">vite.config.tsの修正</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="75:5-87:7"><div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">defineConfig</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">vite</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="nx">vue</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@vitejs/plugin-vue</span><span class="dl">\'</span>\n\n<span class="c1">// https://vitejs.dev/config/</span>\n<span class="k">export</span> <span class="k">default</span> <span class="nf">defineConfig</span><span class="p">({</span>\n  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nf">vue</span><span class="p">()],</span>\n  <span class="na">server</span><span class="p">:</span> <span class="p">{</span>        <span class="c1">// 追加</span>\n    <span class="na">host</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>    <span class="c1">// 追加</span>\n    <span class="na">port</span><span class="p">:</span> <span class="mi">18080</span>    <span class="c1">// 追加</span>\n  <span class="p">}</span>                <span class="c1">// 追加</span>\n<span class="p">})</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="89:1-94:0">\n<p data-sourcepos="89:4-89:21">サーバー起動</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="91:5-93:7"><div class="highlight"><pre><code><span class="nv">$ </span>yarn dev\n</code></pre></div></div>\n</li>\n</ol>\n<h1 data-sourcepos="95:1-95:31">\n<span id="keycloak-jsの導入設定" class="fragment"></span><a href="#keycloak-js%E3%81%AE%E5%B0%8E%E5%85%A5%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>keycloak-jsの導入・設定</h1>\n<ol data-sourcepos="97:1-149:0">\n<li data-sourcepos="97:1-102:0">\n<p data-sourcepos="97:4-97:37"><code>keycloak-js</code>のインストール</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="99:5-101:7"><div class="highlight"><pre><code><span class="nv">$ </span>yarn add keycloak-js\n</code></pre></div></div>\n</li>\n<li data-sourcepos="103:1-111:0">\n<p data-sourcepos="103:4-103:16">.envの設定</p>\n<div class="code-frame" data-lang="env" data-sourcepos="105:5-109:7">\n<div class="code-lang"><span class="bold">.env</span></div>\n<div class="highlight"><pre><code>VITE_KEYCLOAK_URL="http://localhost:8080"\nVITE_KEYCLOAK_REALM="Myrealm"\nVITE_KEYCLOAK_CLIENT_ID="app-vue"\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos="112:1-147:0">\n<p data-sourcepos="112:4-112:30">設定ファイルの作成</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="114:5-146:7">\n<div class="code-lang"><span class="bold"> src/keycloak.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="nx">Keycloak</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">keycloak-js</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="kd">const</span> <span class="nx">initOptions</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">url</span><span class="p">:</span> <span class="k">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">VITE_KEYCLOAK_URL</span><span class="p">,</span>\n  <span class="na">realm</span><span class="p">:</span> <span class="k">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">VITE_KEYCLOAK_REALM</span><span class="p">,</span>\n  <span class="na">clientId</span><span class="p">:</span> <span class="k">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">VITE_KEYCLOAK_CLIENT_ID</span>\n<span class="p">}</span>\n\n<span class="kd">const</span> <span class="nx">keycloakInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Keycloak</span><span class="p">(</span><span class="nx">initOptions</span><span class="p">);</span>\n\n<span class="kr">interface</span> <span class="nx">CallbackOneParam</span><span class="o">&lt;</span><span class="nx">T1</span> <span class="o">=</span> <span class="k">void</span><span class="p">,</span> <span class="nx">T2</span> <span class="o">=</span> <span class="k">void</span><span class="o">&gt;</span> <span class="p">{</span>\n  <span class="p">(</span><span class="na">param1</span><span class="p">:</span> <span class="nx">T1</span><span class="p">):</span> <span class="nx">T2</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="kd">const</span> <span class="nx">Login</span> <span class="o">=</span> <span class="p">(</span><span class="nx">onAuthenticatedCallback</span><span class="p">:</span> <span class="nx">CallbackOneParam</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="nx">keycloakInstance</span>\n    <span class="p">.</span><span class="nf">init</span><span class="p">({</span> <span class="na">onLoad</span><span class="p">:</span> <span class="dl">"</span><span class="s2">login-required</span><span class="dl">"</span> <span class="p">})</span>\n    <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">authenticated</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">authenticated</span> <span class="p">?</span> <span class="nf">onAuthenticatedCallback</span><span class="p">()</span> <span class="p">:</span> <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">non authenticated</span><span class="dl">"</span><span class="p">);</span>\n    <span class="p">})</span>\n    <span class="p">.</span><span class="nf">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n      <span class="nx">console</span><span class="p">.</span><span class="nf">dir</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>\n      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`keycloak init exception: </span><span class="p">${</span><span class="nx">e</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>\n    <span class="p">});</span>\n<span class="p">};</span>\n\n<span class="kd">const</span> <span class="nx">KeyCloakService</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">CallLogin</span><span class="p">:</span> <span class="nx">Login</span><span class="p">,</span>\n<span class="p">};</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="nx">KeyCloakService</span><span class="p">;</span>\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos="148:1-149:0">\n<p data-sourcepos="148:4-148:76">main.tsを修正し、ログインしないと表示されないように</p>\n</li>\n</ol>\n<div class="code-frame" data-lang="typescript" data-sourcepos="150:1-164:3"><div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createApp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">vue</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">./App.vue</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">loadFonts</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">./plugins/webfontloader</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="nx">KeyCloakService</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">./KeycloakService</span><span class="dl">\'</span>\n\n<span class="nf">loadFonts</span><span class="p">()</span>\n\n<span class="kd">const</span> <span class="nx">renderApp</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="nf">createApp</span><span class="p">(</span><span class="nx">App</span><span class="p">)</span>\n    <span class="p">.</span><span class="nf">mount</span><span class="p">(</span><span class="dl">\'</span><span class="s1">#app</span><span class="dl">\'</span><span class="p">)</span>\n<span class="p">}</span>\n\n<span class="nx">KeyCloakService</span><span class="p">.</span><span class="nc">CallLogin</span><span class="p">(</span><span class="nx">renderApp</span><span class="p">)</span>\n</code></pre></div></div>\n<h2 data-sourcepos="166:1-166:30">\n<span id="ここでエラー発生" class="fragment"></span><a href="#%E3%81%93%E3%81%93%E3%81%A7%E3%82%A8%E3%83%A9%E3%83%BC%E7%99%BA%E7%94%9F"><i class="fa fa-link"></i></a>ここでエラー発生。</h2>\n<p data-sourcepos="168:1-168:122"><a href="https://camo.qiitausercontent.com/3654f45b4cb4311ee07c2a6f1813b9f1bb6e5e7a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31613064373035312d643530652d353238332d383835392d6366326631356432653837342e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1a0d7051-d50e-5283-8859-cf2f15d2e874.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e5426110814eada49f524ea40a335fe2" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1a0d7051-d50e-5283-8859-cf2f15d2e874.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1a0d7051-d50e-5283-8859-cf2f15d2e874.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9c44c878598b312ae3c4e1c408b7e4ec 1x" loading="lazy"></a></p>\n<p data-sourcepos="170:1-170:144"><code>vite.config.ts</code>を修正し、Content Security Policyの設定をしてみましたが、うまくいかず途方に暮れていたところ、</p>\n<p data-sourcepos="172:1-172:122"><a href="https://camo.qiitausercontent.com/6991d7755d6a1ab8a8eae0fcd62d3df6a67e00ba/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f62376663646332632d366462352d646161312d646363372d6665643230643035643537372e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fb7fcdc2c-6db5-daa1-dcc7-fed20d05d577.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bd0f46a45389c0cd075999a870014a5d" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/b7fcdc2c-6db5-daa1-dcc7-fed20d05d577.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fb7fcdc2c-6db5-daa1-dcc7-fed20d05d577.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=936bf4fc3fd89917e0562b0ab694260c 1x" loading="lazy"></a></p>\n<p data-sourcepos="174:1-174:122"><a href="https://camo.qiitausercontent.com/845e2723f0228605722befa0ba8740fe793db5c6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31663262313330392d353134322d323363362d636635612d6432343565343334313334332e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1f2b1309-5142-23c6-cf5a-d245e4341343.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c3dabdc42659461a95f84fe78664da3d" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1f2b1309-5142-23c6-cf5a-d245e4341343.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1f2b1309-5142-23c6-cf5a-d245e4341343.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2f3fa47210c990fe1f164d30d736bd1b 1x" loading="lazy"></a></p>\n<p data-sourcepos="176:1-176:61"><font color="red">あれ？小文字じゃん。。。</font></p>\n<p data-sourcepos="178:1-178:128">ということでkeycloakではレルム名で大文字小文字を間違えると上記エラーが発生するようです。</p>\n<p data-sourcepos="180:1-180:60">沼にはまらないように気を付けましょう～！</p>\n',body:"# はじめに\n\n認証サーバーとして`keycloak`を使おうと思い、\n`docker`でkeycloakを起動し、\nアプリケーションを`Vite`で構築し、\n「さあ認証だ！」というところで\n\n<font color=\"red\">Refused to frame 'http://localhost:8080/' because an ancestor violates the following Content Security Policy directive: \"frame-ancestors 'self'\".</font>\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1a0d7051-d50e-5283-8859-cf2f15d2e874.png)\n\nに悩まされた話です。\n\n# 開発環境構築\n\n## keycloak docker\n\n1. docker-compose.ymlに以下を記入\n\n    ```yaml:docker-compose.yml\n    version: '2'\n    services:\n      postgresql:\n        image: docker.io/bitnami/postgresql:11\n        environment:\n          - ALLOW_EMPTY_PASSWORD=yes\n          - POSTGRESQL_USERNAME=bn_keycloak\n          - POSTGRESQL_DATABASE=bitnami_keycloak\n        volumes:\n          - 'postgresql_data:/bitnami/postgresql'\n    \n      keycloak:\n        image: docker.io/bitnami/keycloak:19\n        depends_on:\n          - postgresql\n        ports:\n          - \"8080:8080\"\n    \n    volumes:\n      postgresql_data:\n        driver: local\n    ```\n\n1. 起動\n\n    ```bash\n    $ docker-compose up\n    ```\n\n1. [http://localhost:8080](http://localhost:8080)に移動し、以下を登録(keycloakの詳しい説明は割愛)\n\n* レルム\n    * myrealm\n* client_id\n    * app-vue\n\n## Vite + Vue3\n\n* node v16.13.2\n\n1. 以下を実行\n    \n    ```bash\n    $ npm init vite@latest\n      バージョンの確認: y\n      アプリ名: (お好きに)\n      フレームワーク: Vue ⇒ TypeScript\n    \n    $ cd (アプリ名)\n    $ yarn\n    ```\n\n1. vite.config.tsの修正\n\n    ```typescript\n    import { defineConfig } from 'vite'\n    import vue from '@vitejs/plugin-vue'\n    \n    // https://vitejs.dev/config/\n    export default defineConfig({\n      plugins: [vue()],\n      server: {        // 追加\n        host: true,    // 追加\n        port: 18080    // 追加\n      }                // 追加\n    })\n    ```\n\n1. サーバー起動\n\n    ```bash\n    $ yarn dev\n    ```\n\n# keycloak-jsの導入・設定\n\n1. `keycloak-js`のインストール\n\n    ```bash\n    $ yarn add keycloak-js\n    ```\n\n1. .envの設定\n    \n    ```env:.env\n    VITE_KEYCLOAK_URL=\"http://localhost:8080\"\n    VITE_KEYCLOAK_REALM=\"Myrealm\"\n    VITE_KEYCLOAK_CLIENT_ID=\"app-vue\"\n    ```\n\n\n1. 設定ファイルの作成\n\n    ```typescript: src/keycloak.ts\n    import Keycloak from \"keycloak-js\";\n    \n    const initOptions = {\n      url: import.meta.env.VITE_KEYCLOAK_URL,\n      realm: import.meta.env.VITE_KEYCLOAK_REALM,\n      clientId: import.meta.env.VITE_KEYCLOAK_CLIENT_ID\n    }\n    \n    const keycloakInstance = new Keycloak(initOptions);\n    \n    interface CallbackOneParam<T1 = void, T2 = void> {\n      (param1: T1): T2;\n    }\n    \n    const Login = (onAuthenticatedCallback: CallbackOneParam) => {\n      keycloakInstance\n        .init({ onLoad: \"login-required\" })\n        .then(function (authenticated) {\n          authenticated ? onAuthenticatedCallback() : alert(\"non authenticated\");\n        })\n        .catch((e) => {\n          console.dir(e);\n          console.log(`keycloak init exception: ${e}`);\n        });\n    };\n    \n    const KeyCloakService = {\n      CallLogin: Login,\n    };\n    \n    export default KeyCloakService;\n    ```\n\n1. main.tsを修正し、ログインしないと表示されないように\n\n```typescript\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport { loadFonts } from './plugins/webfontloader'\nimport KeyCloakService from './KeycloakService'\n\nloadFonts()\n\nconst renderApp = () => {\n  createApp(App)\n    .mount('#app')\n}\n\nKeyCloakService.CallLogin(renderApp)\n```\n\n## ここでエラー発生。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1a0d7051-d50e-5283-8859-cf2f15d2e874.png)\n\n`vite.config.ts`を修正し、Content Security Policyの設定をしてみましたが、うまくいかず途方に暮れていたところ、\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/b7fcdc2c-6db5-daa1-dcc7-fed20d05d577.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1f2b1309-5142-23c6-cf5a-d245e4341343.png)\n\n<font color=\"red\">あれ？小文字じゃん。。。</font>\n\nということでkeycloakではレルム名で大文字小文字を間違えると上記エラーが発生するようです。\n\n沼にはまらないように気を付けましょう～！\n",coediting:!1,comments_count:0,created_at:"2023-01-05T14:45:55+09:00",group:null,id:"b99e123129735deb5576",likes_count:1,private:!1,reactions_count:0,stocks_count:1,tags:[{name:"JavaScript",versions:[]},{name:"Vue.js",versions:[]},{name:"Keycloak",versions:[]}],title:"keycloak-js Content Security Policyにはまった話",updated_at:"2023-01-05T15:37:04+09:00",url:"https://qiita.com/maaaashi/items/b99e123129735deb5576",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:1119,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-3:127"><code>vue</code>や<code>react</code>、<code>svelte</code>でコンポーネントを呼び出す際、相対パスで<code>import</code>を記述していませんか？</p>\n<p data-sourcepos="5:1-6:105">そうしていると、コンポーネントの整理をしている中で動かない箇所が出てきます。<br>\n1つ1つチェックするのは非常に手間なので、<code>Alias</code>を設定して楽をしましょう～</p>\n<h1 data-sourcepos="8:1-8:20">\n<span id="srcをに設定" class="fragment"></span><a href="#src%E3%82%92%E3%81%AB%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>./srcを@に設定</h1>\n<div class="code-frame" data-lang="typescript" data-sourcepos="10:1-24:3">\n<div class="code-lang"><span class="bold"> vite.config.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">defineConfig</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">vite</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="nx">vue</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@vitejs/plugin-vue</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="nx">path</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">path</span><span class="dl">\'</span>                     <span class="c1">// ・・・・追加</span>\n\n<span class="c1">// https://vitejs.dev/config/</span>\n<span class="k">export</span> <span class="k">default</span> <span class="nf">defineConfig</span><span class="p">({</span>\n  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nf">vue</span><span class="p">()],</span>\n  <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>                                <span class="c1">// ・・・・追加</span>\n    <span class="na">alias</span><span class="p">:</span> <span class="p">{</span>                                <span class="c1">// ・・・・追加</span>\n      <span class="dl">\'</span><span class="s1">@</span><span class="dl">\'</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">./src</span><span class="dl">\'</span><span class="p">)</span> <span class="c1">// ・・・・追加</span>\n    <span class="p">}</span>                                       <span class="c1">// ・・・・追加</span>\n  <span class="p">}</span>\n<span class="p">})</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="26:1-27:33">これでもアプリケーションは動くが、<code>TypeScript</code>のチェックが通らないので、<br>\n<code>tsconfig.json</code>も修正する。</p>\n<p data-sourcepos="29:1-29:122"><a href="https://camo.qiitausercontent.com/8f6d311b3c2270d4851eae34c7f6dc5fd0ebfa3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f63623731343264322d353038662d626234662d356436382d6235333638636437383935392e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fcb7142d2-508f-bb4f-5d68-b5368cd78959.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=20b6651f0e8fe60899a8b2dad78e66af" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/cb7142d2-508f-bb4f-5d68-b5368cd78959.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fcb7142d2-508f-bb4f-5d68-b5368cd78959.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=413611c709685b9a527d9b584b7a9615 1x" loading="lazy"></a></p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="32:1-48:3">\n<div class="code-lang"><span class="bold"> tsconfig.json</span></div>\n<div class="highlight"><pre><code><span class="p">{</span>\n  <span class="dl">"</span><span class="s2">compilerOptions</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>\n    <span class="dl">"</span><span class="s2">target</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ESNext</span><span class="dl">"</span><span class="p">,</span>\n    <span class="err">・</span> <span class="c1">// </span>\n    <span class="err">・</span> <span class="c1">// 省略</span>\n    <span class="err">・</span> <span class="c1">// </span>\n    <span class="dl">"</span><span class="s2">baseUrl</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">./src</span><span class="dl">"</span><span class="p">,</span>  <span class="c1">// ・・・・追加</span>\n    <span class="dl">"</span><span class="s2">paths</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>           <span class="c1">// ・・・・追加</span>\n      <span class="dl">"</span><span class="s2">@/*</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>           <span class="c1">// ・・・・追加</span>\n        <span class="dl">"</span><span class="s2">./*</span><span class="dl">"</span>            <span class="c1">// ・・・・追加</span>\n      <span class="p">]</span>                  <span class="c1">// ・・・・追加</span>\n    <span class="p">}</span>                    <span class="c1">// ・・・・追加</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n\n</code></pre></div>\n</div>\n<p data-sourcepos="50:1-50:122"><a href="https://camo.qiitausercontent.com/daf6f81d8c699f396e1f11197e98798c8c4dd06c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31326537336539612d653331392d636537352d666262322d6236396433396633633530642e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F12e73e9a-e319-ce75-fbb2-b69d39f3c50d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bc222806ff3049401fc131b51b1f79db" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/12e73e9a-e319-ce75-fbb2-b69d39f3c50d.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F12e73e9a-e319-ce75-fbb2-b69d39f3c50d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=fc606f0a51d4d27ba0facd7c9fc6f521 1x" loading="lazy"></a></p>\n<p data-sourcepos="53:1-53:2">OK</p>\n',body:'# はじめに\n\n`vue`や`react`、`svelte`でコンポーネントを呼び出す際、相対パスで`import`を記述していませんか？\n\nそうしていると、コンポーネントの整理をしている中で動かない箇所が出てきます。\n1つ1つチェックするのは非常に手間なので、`Alias`を設定して楽をしましょう～\n\n# ./srcを@に設定\n\n```typescript: vite.config.ts\nimport { defineConfig } from \'vite\'\nimport vue from \'@vitejs/plugin-vue\'\nimport path from \'path\'                     // ・・・・追加\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue()],\n  resolve: {                                // ・・・・追加\n    alias: {                                // ・・・・追加\n      \'@\': path.resolve(__dirname, \'./src\') // ・・・・追加\n    }                                       // ・・・・追加\n  }\n})\n```\n\nこれでもアプリケーションは動くが、`TypeScript`のチェックが通らないので、\n`tsconfig.json`も修正する。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/cb7142d2-508f-bb4f-5d68-b5368cd78959.png)\n\n\n```typescript: tsconfig.json\n{\n  "compilerOptions": {\n    "target": "ESNext",\n    ・ // \n    ・ // 省略\n    ・ // \n    "baseUrl": "./src",  // ・・・・追加\n    "paths": {           // ・・・・追加\n      "@/*": [           // ・・・・追加\n        "./*"            // ・・・・追加\n      ]                  // ・・・・追加\n    }                    // ・・・・追加\n  }\n}\n\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/12e73e9a-e319-ce75-fbb2-b69d39f3c50d.png)\n\n\nOK\n',coediting:!1,comments_count:0,created_at:"2023-01-04T15:48:36+09:00",group:null,id:"1899b3f6c78b536a5de1",likes_count:2,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"TypeScript",versions:[]},{name:"Vue.js",versions:[]},{name:"vite",versions:[]}],title:"Vite + Vue3 + TypeScriptでAlias pathを設定する方法",updated_at:"2023-01-04T15:48:36+09:00",url:"https://qiita.com/maaaashi/items/1899b3f6c78b536a5de1",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:1902,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:44">組織図のようなものを作成できるツールを探していたところ、<br>\n<a href="https://vueflow.dev/" rel="nofollow noopener" target="_blank">Vue Flow</a>を発見。</p>\n<p data-sourcepos="6:1-6:122"><a href="https://camo.qiitausercontent.com/f558a6476d82976b2b1513910c51e661b93f099e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f62663132336362652d343266302d363166362d643037332d6635366265653737663836662e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fbf123cbe-42f0-61f6-d073-f56bee77f86f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fe9b7aa2e50cffc8246719d3e76223c1" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/bf123cbe-42f0-61f6-d073-f56bee77f86f.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fbf123cbe-42f0-61f6-d073-f56bee77f86f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b35b4c2f0ef7d3ba0fa033138caec40d 1x" loading="lazy"></a></p>\n<p data-sourcepos="8:1-8:30">早速使ってみました。</p>\n<h1 data-sourcepos="10:1-10:8">\n<span id="導入" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5"><i class="fa fa-link"></i></a>導入</h1>\n<p data-sourcepos="12:1-12:86">vue-flowの本体と、各コンポーネントを必要に応じてインストール</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="14:1-19:3"><div class="highlight"><pre><code>// vue-flow本体\nyarn add @vue-flow/core\n// 各コンポーネント\nyarn add @vue-flow/background @vue-flow/controls @vue-flow/core @vue-flow/minimap @vue-flow/node-toolbar\n</code></pre></div></div>\n<h1 data-sourcepos="21:1-21:8">\n<span id="用語" class="fragment"></span><a href="#%E7%94%A8%E8%AA%9E"><i class="fa fa-link"></i></a>用語</h1>\n<h2 data-sourcepos="23:1-23:13">\n<span id="nodeとは" class="fragment"></span><a href="#node%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>Nodeとは</h2>\n<p data-sourcepos="25:1-26:122">こいつのこと。<br>\n<a href="https://camo.qiitausercontent.com/2583f83ada8d5a5b0928f50ec6283a961d9e0f55/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f37343932643731332d336161322d303962652d343262662d3937323137393261303131622e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F7492d713-3aa2-09be-42bf-9721792a011b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2ed05235b7be21ba7896ec9b262b1c42" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/7492d713-3aa2-09be-42bf-9721792a011b.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F7492d713-3aa2-09be-42bf-9721792a011b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f1af6ff3dda9ce363aa74e245250a0e5 1x" loading="lazy"></a></p>\n<p data-sourcepos="28:1-28:64">typeを指定でき、<code>input</code>及び<code>output</code>を指定できる。</p>\n<h3 data-sourcepos="30:1-30:17">\n<span id="type-input" class="fragment"></span><a href="#type-input"><i class="fa fa-link"></i></a><code>type: input</code>\n</h3>\n<p data-sourcepos="32:1-32:122"><a href="https://camo.qiitausercontent.com/3e9b31a6f1a0fbab02422aae8aa433ada283679c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f35386436616639652d666335392d326537612d313762622d3061356161373863623234382e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F58d6af9e-fc59-2e7a-17bb-0a5aa78cb248.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=45d426b9c4c6c68e2351eecb15b454bc" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/58d6af9e-fc59-2e7a-17bb-0a5aa78cb248.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F58d6af9e-fc59-2e7a-17bb-0a5aa78cb248.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=037738baec580ac7f29622b7a10a3fca 1x" loading="lazy"></a></p>\n<p data-sourcepos="34:1-35:36">このように下方向にだけ接続できる。<br>\nスタートで使うイメージ。</p>\n<h3 data-sourcepos="37:1-37:18">\n<span id="type-output" class="fragment"></span><a href="#type-output"><i class="fa fa-link"></i></a><code>type: output</code>\n</h3>\n<p data-sourcepos="39:1-39:122"><a href="https://camo.qiitausercontent.com/d165dc788a804f27d7a38f048bb1ae45d1326239/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f38393434376636622d613464312d663764632d326166382d3935353035386530653239612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F89447f6b-a4d1-f7dc-2af8-955058e0e29a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5e9c4d0ad0abe757b7d9bedcab2d6979" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/89447f6b-a4d1-f7dc-2af8-955058e0e29a.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F89447f6b-a4d1-f7dc-2af8-955058e0e29a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a19271b7cd08b318aebbef3bd5b5de17 1x" loading="lazy"></a></p>\n<p data-sourcepos="41:1-42:33">inputの反対で、上方向にだけ接続できる。<br>\nゴールで使うイメージ。</p>\n<p data-sourcepos="44:1-44:64">また、<code>label</code>で指定すると、文字が入れられる。</p>\n<p data-sourcepos="46:1-46:122"><a href="https://camo.qiitausercontent.com/d9cb3e026e4c93ff2e82d3e028e7a0299c9b928e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f61313232363034632d663639342d363932662d623861352d6236383864336131393463352e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa122604c-f694-692f-b8a5-b688d3a194c5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5066f6a138430156f38a841d29d2c1b2" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a122604c-f694-692f-b8a5-b688d3a194c5.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa122604c-f694-692f-b8a5-b688d3a194c5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=503dcf726a837406760b81441bb08322 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="49:1-49:13">\n<span id="edgeとは" class="fragment"></span><a href="#edge%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>Edgeとは</h2>\n<p data-sourcepos="51:1-51:122"><a href="https://camo.qiitausercontent.com/25e4a63180e4f22d743f48e274af3b9db47347af/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f65326563386163652d376263322d383937362d613161312d3737373137343933363965342e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe2ec8ace-7bc2-8976-a1a1-7771749369e4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=89dcba5c6fe208dffb94f7c42a800f2d" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e2ec8ace-7bc2-8976-a1a1-7771749369e4.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe2ec8ace-7bc2-8976-a1a1-7771749369e4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=412999fa122d5b8238e47445ddee799e 1x" loading="lazy"></a></p>\n<p data-sourcepos="53:1-53:21">こいつのこと。</p>\n<p data-sourcepos="55:1-55:124"><a href="https://camo.qiitausercontent.com/420f6653c2ac56e5178c33321788db39e87ef00d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f61373263383630312d646433362d303739342d316162622d6637353332353439316261622e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa72c8601-dd36-0794-1abb-f75325491bab.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3ee5f9986e77d3a4854c93ee67981ca3" alt="animate.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a72c8601-dd36-0794-1abb-f75325491bab.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa72c8601-dd36-0794-1abb-f75325491bab.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9e0fb6711993e38cdcef6cc8c3298359 1x" loading="lazy"></a></p>\n<p data-sourcepos="57:1-57:58"><code>animated: true</code>でアニメーションを付けたり、</p>\n<p data-sourcepos="59:1-59:70"><code>markerEnd: ○○</code>で終点を変えたりすることができる。</p>\n<p data-sourcepos="61:1-61:64">また、<code>label</code>で指定すると、文字が入れられる。</p>\n<p data-sourcepos="63:1-63:122"><a href="https://camo.qiitausercontent.com/64eb9b7633ab73156eb51375b059414c9dd910d7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f36313263376437342d303632392d333866372d396133662d3766663232616263616337652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F612c7d74-0629-38f7-9a3f-7ff22abcac7e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9ad02ce21ceaf199170ff77531758013" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/612c7d74-0629-38f7-9a3f-7ff22abcac7e.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F612c7d74-0629-38f7-9a3f-7ff22abcac7e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=79778568f1ae596044ee2f7265356b0e 1x" loading="lazy"></a></p>\n<h1 data-sourcepos="65:1-65:11">\n<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h1>\n<p data-sourcepos="67:1-67:114"><code>VueFlow</code>コンポーネントに<code>node</code>や<code>edge</code>情報が入ったオブジェクトを渡してあげるだけ。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="70:1-89:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">setup</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">VueFlow</span>  <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@vue-flow/core</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">ref</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">vue</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="dl">\'</span><span class="s1">@vue-flow/core/dist/style.css</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="dl">\'</span><span class="s1">@vue-flow/core/dist/theme-default.css</span><span class="dl">\'</span>\n\n<span class="kd">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nf">ref</span><span class="p">([</span>\n  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">1</span><span class="dl">\'</span><span class="p">,</span> <span class="na">type</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">input</span><span class="dl">\'</span><span class="p">,</span> <span class="na">label</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">Node 1</span><span class="dl">\'</span><span class="p">,</span> <span class="na">position</span><span class="p">:</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">250</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">5</span> <span class="p">}</span> <span class="p">},</span>\n  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">2</span><span class="dl">\'</span><span class="p">,</span> <span class="na">label</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">Node 2</span><span class="dl">\'</span><span class="p">,</span> <span class="na">position</span><span class="p">:</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">100</span> <span class="p">},</span> <span class="p">},</span>\n  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">3</span><span class="dl">\'</span><span class="p">,</span> <span class="na">label</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">Node 3</span><span class="dl">\'</span><span class="p">,</span> <span class="na">position</span><span class="p">:</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">400</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">100</span> <span class="p">}</span> <span class="p">},</span>\n  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">4</span><span class="dl">\'</span><span class="p">,</span> <span class="na">type</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">output</span><span class="dl">\'</span><span class="p">,</span> <span class="na">label</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">Node 4</span><span class="dl">\'</span><span class="p">,</span> <span class="na">position</span><span class="p">:</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">400</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">200</span> <span class="p">}</span> <span class="p">},</span>\n  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">e1-3</span><span class="dl">\'</span><span class="p">,</span> <span class="na">source</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">1</span><span class="dl">\'</span><span class="p">,</span> <span class="na">target</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">3</span><span class="dl">\'</span> <span class="p">},</span>\n  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">e1-2</span><span class="dl">\'</span><span class="p">,</span> <span class="na">source</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">1</span><span class="dl">\'</span><span class="p">,</span> <span class="na">target</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">2</span><span class="dl">\'</span><span class="p">,</span> <span class="na">animated</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>\n<span class="p">])</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n<span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;VueFlow</span> <span class="na">v-model=</span><span class="s">"elements"</span> <span class="nt">/&gt;</span>\n<span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="91:1-91:121"><a href="https://camo.qiitausercontent.com/7bbcf23f4f30b96a86b310225cb536c3865965e1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f38656664633932342d326538372d656134342d353761332d3763363230373162343138332e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F8efdc924-2e87-ea44-57a3-7c62071b4183.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=31e85fa48089595542351df1083940e8" alt="flow.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/8efdc924-2e87-ea44-57a3-7c62071b4183.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F8efdc924-2e87-ea44-57a3-7c62071b4183.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8da0010f5aa698dd335341ff33c2c080 1x" loading="lazy"></a></p>\n<p data-sourcepos="93:1-93:28">参考) 公式<code>BasicExample</code></p>\n<p data-sourcepos="96:1-97:45">紹介したNodeの<code>type</code>や、Edgeの<code>animated</code>以外にも様々なPropsが用意されているので、<br>\nいろいろなことができそうですね</p>\n',body:"# はじめに\n\n組織図のようなものを作成できるツールを探していたところ、\n[Vue Flow](https://vueflow.dev/)を発見。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/bf123cbe-42f0-61f6-d073-f56bee77f86f.png)\n\n早速使ってみました。\n\n# 導入\n\nvue-flowの本体と、各コンポーネントを必要に応じてインストール\n\n```bash\n// vue-flow本体\nyarn add @vue-flow/core\n// 各コンポーネント\nyarn add @vue-flow/background @vue-flow/controls @vue-flow/core @vue-flow/minimap @vue-flow/node-toolbar\n```\n\n# 用語\n\n## Nodeとは\n\nこいつのこと。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/7492d713-3aa2-09be-42bf-9721792a011b.png)\n\ntypeを指定でき、`input`及び`output`を指定できる。\n\n### `type: input`\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/58d6af9e-fc59-2e7a-17bb-0a5aa78cb248.png)\n\nこのように下方向にだけ接続できる。\nスタートで使うイメージ。\n\n### `type: output`\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/89447f6b-a4d1-f7dc-2af8-955058e0e29a.png)\n\ninputの反対で、上方向にだけ接続できる。\nゴールで使うイメージ。\n\nまた、`label`で指定すると、文字が入れられる。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a122604c-f694-692f-b8a5-b688d3a194c5.png)\n\n\n## Edgeとは\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e2ec8ace-7bc2-8976-a1a1-7771749369e4.png)\n\nこいつのこと。\n\n![animate.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a72c8601-dd36-0794-1abb-f75325491bab.gif)\n\n`animated: true`でアニメーションを付けたり、\n\n`markerEnd: ○○`で終点を変えたりすることができる。\n\nまた、`label`で指定すると、文字が入れられる。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/612c7d74-0629-38f7-9a3f-7ff22abcac7e.png)\n\n# 使い方\n\n`VueFlow`コンポーネントに`node`や`edge`情報が入ったオブジェクトを渡してあげるだけ。\n\n\n```vue\n<script setup lang=\"ts\">\nimport { VueFlow  } from '@vue-flow/core'\nimport { ref } from 'vue'\nimport '@vue-flow/core/dist/style.css'\nimport '@vue-flow/core/dist/theme-default.css'\n\nconst elements = ref([\n  { id: '1', type: 'input', label: 'Node 1', position: { x: 250, y: 5 } },\n  { id: '2', label: 'Node 2', position: { x: 100, y: 100 }, },\n  { id: '3', label: 'Node 3', position: { x: 400, y: 100 } },\n  { id: '4', type: 'output', label: 'Node 4', position: { x: 400, y: 200 } },\n  { id: 'e1-3', source: '1', target: '3' },\n  { id: 'e1-2', source: '1', target: '2', animated: true },\n])\n<\/script>\n<template>\n  <VueFlow v-model=\"elements\" />\n</template>\n```\n\n![flow.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/8efdc924-2e87-ea44-57a3-7c62071b4183.gif)\n\n参考) 公式`BasicExample`\n\n\n紹介したNodeの`type`や、Edgeの`animated`以外にも様々なPropsが用意されているので、\nいろいろなことができそうですね\n\n",coediting:!1,comments_count:0,created_at:"2022-12-23T15:54:11+09:00",group:null,id:"f5ca03ee41380a2a64b1",likes_count:1,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Vue.js",versions:[]}],title:"Vue Flow触ってみた",updated_at:"2023-01-06T10:43:22+09:00",url:"https://qiita.com/maaaashi/items/f5ca03ee41380a2a64b1",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:1015,team_membership:null,organization_url_name:null},{rendered_body:'<h2 data-sourcepos="1:1-1:15">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h2>\n<p data-sourcepos="3:1-3:227">SvelteKitで作成したSSR(サーバーサイドレンダリング)のアプリケーションをVercelではなく、AWS上にデプロイしたく、試行錯誤した時の記録をここにメモとして投稿します。</p>\n<h2 data-sourcepos="5:1-5:36">\n<span id="1-ssrの仕組みを調べた" class="fragment"></span><a href="#1-ssr%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF%E3%82%92%E8%AA%BF%E3%81%B9%E3%81%9F"><i class="fa fa-link"></i></a>1. SSRの仕組みを調べた。</h2>\n<p data-sourcepos="7:1-7:146">SSR(サーバーサイドレンダリング)とは、サーバー再度でレンダリング(HTMLを生成)し、レスポンスを返すこと。</p>\n<p data-sourcepos="9:1-9:99">AWSでやる場合はlambdaに処理を持たせて、API Gateway経由でHTMLを表示させる。</p>\n<h2 data-sourcepos="11:1-11:45">\n<span id="2-sveltekitのデプロイ方法を探る" class="fragment"></span><a href="#2-sveltekit%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E6%96%B9%E6%B3%95%E3%82%92%E6%8E%A2%E3%82%8B"><i class="fa fa-link"></i></a>2. SvelteKitのデプロイ方法を探る</h2>\n<p data-sourcepos="13:1-14:141">nextjsやnuxtjsと同じようにbuildの形をいい感じに変えることができ、<br>\n標準では<code>@sveltejs/adapter-auto</code>というアダプターによりデプロイ用のアウトプットファイルを生成している。</p>\n<p data-sourcepos="16:1-16:40">標準の@sveltejs/adapter-autoでは、</p>\n<ul data-sourcepos="18:1-21:0">\n<li data-sourcepos="18:1-18:18">Cloudflare Pages</li>\n<li data-sourcepos="19:1-19:9">Netlify</li>\n<li data-sourcepos="20:1-21:0">Vercel</li>\n</ul>\n<p data-sourcepos="22:1-22:27">にはデプロイ可能。</p>\n<p data-sourcepos="24:1-24:69">AWSにデプロイするためにはどうしたらいいんだ～～</p>\n<h2 data-sourcepos="26:1-26:39">\n<span id="3-一回諦めてspaに妥協した" class="fragment"></span><a href="#3-%E4%B8%80%E5%9B%9E%E8%AB%A6%E3%82%81%E3%81%A6spa%E3%81%AB%E5%A6%A5%E5%8D%94%E3%81%97%E3%81%9F"><i class="fa fa-link"></i></a>3. 一回諦めてSPAに妥協した</h2>\n<p data-sourcepos="28:1-28:128">SPA用のアダプターとして、\'@sveltejs/adapter-static\'というものがあったので、そちらで試してみる。</p>\n<h3 data-sourcepos="30:1-30:26">\n<span id="yarnインストール" class="fragment"></span><a href="#yarn%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>yarnインストール</h3>\n<div class="code-frame" data-lang="text" data-sourcepos="32:1-34:3"><div class="highlight"><pre><code>yarn add \'@sveltejs/adapter-static\'\n</code></pre></div></div>\n<h3 data-sourcepos="37:1-37:28">\n<span id="アダプターを設定" class="fragment"></span><a href="#%E3%82%A2%E3%83%80%E3%83%97%E3%82%BF%E3%83%BC%E3%82%92%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>アダプターを設定</h3>\n<div class="code-frame" data-lang="typescript" data-sourcepos="39:1-41:3">\n<div class="code-lang"><span class="bold">svelte.config.js</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">adapter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@sveltejs/adapter-static</span><span class="dl">\'</span>\n</code></pre></div>\n</div>\n<h3 data-sourcepos="43:1-43:15">\n<span id="build実行" class="fragment"></span><a href="#build%E5%AE%9F%E8%A1%8C"><i class="fa fa-link"></i></a>build実行</h3>\n<div class="code-frame" data-lang="bash" data-sourcepos="45:1-47:3"><div class="highlight"><pre><code>yarn build\n</code></pre></div></div>\n<p data-sourcepos="49:1-49:70"><font color="red">何かよく分からないエラー再び...</font></p>\n<p data-sourcepos="51:1-51:39">prerenderがなんとかかんとか...</p>\n<h2 data-sourcepos="53:1-53:62">\n<span id="4-prerenderをlayouttsでtrueにすればよいらしい" class="fragment"></span><a href="#4-prerender%E3%82%92layoutts%E3%81%A7true%E3%81%AB%E3%81%99%E3%82%8C%E3%81%B0%E3%82%88%E3%81%84%E3%82%89%E3%81%97%E3%81%84"><i class="fa fa-link"></i></a>4. prerenderを+layout.tsでtrueにすればよいらしい</h2>\n<p data-sourcepos="55:1-55:81"><font color="red">[id].svelteではprerenderできないというエラー</font></p>\n<p data-sourcepos="57:1-57:109">prerenderをtrueにすると、事前にレンダリングをしておくことができるというもの。</p>\n<p data-sourcepos="59:1-60:79">確かに[id]のようなページでは事前にレンダリングしておくことはできないですね...<br>\n(やる方法もありそうでしたが、よくわかりませんでした..)</p>\n<h3 data-sourcepos="62:1-62:67">\n<span id="spaでデプロイするのは諦めてssrに戻ります" class="fragment"></span><a href="#spa%E3%81%A7%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%99%E3%82%8B%E3%81%AE%E3%81%AF%E8%AB%A6%E3%82%81%E3%81%A6ssr%E3%81%AB%E6%88%BB%E3%82%8A%E3%81%BE%E3%81%99"><i class="fa fa-link"></i></a>SPAでデプロイするのは諦めて、SSRに戻ります。</h3>\n<h2 data-sourcepos="64:1-64:39">\n<span id="aws用のアダプターを発見" class="fragment"></span><a href="#aws%E7%94%A8%E3%81%AE%E3%82%A2%E3%83%80%E3%83%97%E3%82%BF%E3%83%BC%E3%82%92%E7%99%BA%E8%A6%8B"><i class="fa fa-link"></i></a>AWS用のアダプターを発見！</h2>\n<p data-sourcepos="66:1-67:30"><a href="https://github.com/MikeBild/sveltekit-adapter-aws" rel="nofollow noopener" target="_blank">https://github.com/MikeBild/sveltekit-adapter-aws</a><br>\nこちらを使ってみる。</p>\n<ol data-sourcepos="70:1-72:0">\n<li data-sourcepos="70:1-70:33">yarn add sveltekit-adapter-aws</li>\n<li data-sourcepos="71:1-72:0">svelte.config.js編集</li>\n</ol>\n<div class="code-frame" data-lang="text" data-sourcepos="73:1-81:3"><div class="highlight"><pre><code>// svelte.config.js\nimport { adapter } from \'sveltekit-adapter-aws\'\n・・・省略\n    adapter: adapter({\n      autoDeploy: true,\n    }),\n・・・省略\n</code></pre></div></div>\n<p data-sourcepos="83:1-83:72">ビルドの後に自動でデプロイされるようにしました。</p>\n<p data-sourcepos="85:1-85:15">結果。。。</p>\n<h3 data-sourcepos="87:1-87:58">\n<span id="cloudfrontでnameエラー" class="fragment"></span><a href="#cloudfront%E3%81%A7name%E3%82%A8%E3%83%A9%E3%83%BC"><i class="fa fa-link"></i></a><font color="red">CloudFrontでnameエラー。</font>\n</h3>\n<p data-sourcepos="89:1-89:78">400エラーで何かの名前に使えない文字があるらしい。。。</p>\n<h3 data-sourcepos="91:1-91:38">\n<span id="なぜ" class="fragment"></span><a href="#%E3%81%AA%E3%81%9C"><i class="fa fa-link"></i></a><font color="red">なぜ...</font>\n</h3>\n<p data-sourcepos="94:1-94:43">この後しばらく放置しました...w</p>\n<h2 data-sourcepos="97:1-97:34">\n<span id="原因--修正--成功" class="fragment"></span><a href="#%E5%8E%9F%E5%9B%A0--%E4%BF%AE%E6%AD%A3--%E6%88%90%E5%8A%9F"><i class="fa fa-link"></i></a>原因 ⇒ 修正 ⇒ 成功！</h2>\n<p data-sourcepos="99:1-99:111">失敗しているCloudFormationのテンプレートを確認すると、CloudFrontの箇所に違和感が...</p>\n<div class="code-frame" data-lang="text" data-sourcepos="101:1-105:3"><div class="highlight"><pre><code>・・・省略\n      \'??.png\'\n・・・省略\n</code></pre></div></div>\n<h2 data-sourcepos="107:1-107:27">\n<span id="んなんだこれは" class="fragment"></span><a href="#%E3%82%93%E3%81%AA%E3%82%93%E3%81%A0%E3%81%93%E3%82%8C%E3%81%AF"><i class="fa fa-link"></i></a>ん？なんだこれは</h2>\n<p data-sourcepos="109:1-109:39">ソースコードを確認すると、</p>\n<div class="code-frame" data-lang="text" data-sourcepos="111:1-114:3"><div class="highlight"><pre><code>|- static\n  |- ロゴ.png\n</code></pre></div></div>\n<p data-sourcepos="116:1-116:55"><font color="red">これかもしれない...！</font></p>\n<p data-sourcepos="118:1-118:109">ということで<code>ロゴ.png</code>を<code>logo.png</code>に変更したところ無事デプロイ完了！ヤッター！</p>\n',body:"## はじめに\n\nSvelteKitで作成したSSR(サーバーサイドレンダリング)のアプリケーションをVercelではなく、AWS上にデプロイしたく、試行錯誤した時の記録をここにメモとして投稿します。\n\n## 1. SSRの仕組みを調べた。\n\nSSR(サーバーサイドレンダリング)とは、サーバー再度でレンダリング(HTMLを生成)し、レスポンスを返すこと。\n\nAWSでやる場合はlambdaに処理を持たせて、API Gateway経由でHTMLを表示させる。\n\n## 2. SvelteKitのデプロイ方法を探る\n\nnextjsやnuxtjsと同じようにbuildの形をいい感じに変えることができ、  \n標準では`@sveltejs/adapter-auto`というアダプターによりデプロイ用のアウトプットファイルを生成している。\n\n標準の@sveltejs/adapter-autoでは、\n\n* Cloudflare Pages\n* Netlify\n* Vercel\n\nにはデプロイ可能。\n\nAWSにデプロイするためにはどうしたらいいんだ～～\n\n## 3. 一回諦めてSPAに妥協した\n\nSPA用のアダプターとして、'@sveltejs/adapter-static'というものがあったので、そちらで試してみる。\n\n### yarnインストール\n\n```\nyarn add '@sveltejs/adapter-static'\n```\n\n\n### アダプターを設定\n   \n```typescript:svelte.config.js\nimport { adapter } from '@sveltejs/adapter-static'\n```\n\n### build実行\n\n```bash\nyarn build\n```\n\n<font color=\"red\">何かよく分からないエラー再び...</font>\n\nprerenderがなんとかかんとか...\n\n## 4. prerenderを+layout.tsでtrueにすればよいらしい\n\n<font color=\"red\">[id].svelteではprerenderできないというエラー</font>\n\nprerenderをtrueにすると、事前にレンダリングをしておくことができるというもの。\n\n確かに[id]のようなページでは事前にレンダリングしておくことはできないですね...\n(やる方法もありそうでしたが、よくわかりませんでした..)\n\n### SPAでデプロイするのは諦めて、SSRに戻ります。\n\n## AWS用のアダプターを発見！\n\n[https://github.com/MikeBild/sveltekit-adapter-aws](https://github.com/MikeBild/sveltekit-adapter-aws)\nこちらを使ってみる。\n\n\n1. yarn add sveltekit-adapter-aws\n2. svelte.config.js編集\n\n```\n// svelte.config.js\nimport { adapter } from 'sveltekit-adapter-aws'\n・・・省略\n    adapter: adapter({\n      autoDeploy: true,\n    }),\n・・・省略\n```\n\nビルドの後に自動でデプロイされるようにしました。\n\n結果。。。\n\n### <font color=\"red\">CloudFrontでnameエラー。</font>\n\n400エラーで何かの名前に使えない文字があるらしい。。。\n\n### <font color=\"red\">なぜ...</font>\n\n\nこの後しばらく放置しました...w\n\n\n## 原因 ⇒ 修正 ⇒ 成功！\n\n失敗しているCloudFormationのテンプレートを確認すると、CloudFrontの箇所に違和感が...\n\n```\n・・・省略\n      '??.png'\n・・・省略\n```\n\n## ん？なんだこれは\n\nソースコードを確認すると、\n\n```\n|- static\n  |- ロゴ.png\n```\n\n<font color=\"red\">これかもしれない...！</font>\n\nということで`ロゴ.png`を`logo.png`に変更したところ無事デプロイ完了！ヤッター！\n\n",coediting:!1,comments_count:0,created_at:"2022-12-23T14:57:10+09:00",group:null,id:"87a9d3e2f156662083bc",likes_count:1,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Svelte",versions:[]},{name:"SvelteKit",versions:[]}],title:"SvelteKitのSSRをAWS上にデプロイ",updated_at:"2022-12-25T11:08:19+09:00",url:"https://qiita.com/maaaashi/items/87a9d3e2f156662083bc",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:948,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-3:60">部署の新人からよくこんな話を聞きました。</p>\n<ul data-sourcepos="5:1-8:0">\n<li data-sourcepos="5:1-5:92">\n<code>TypeScript</code>って難しそうで環境作る時には<code>JavaScript</code>を選んじゃいます</li>\n<li data-sourcepos="6:1-6:26">型って何ですか？</li>\n<li data-sourcepos="7:1-8:0">\n<code>JavaScript</code>と何が違うんですか？</li>\n</ul>\n<p data-sourcepos="9:1-11:54"><code>TypeScript</code>は絶対に使っていきたいので、<br>\n部署の新人向けにTypeScript勉強会を開催しました。<br>\nその時のメモをこちらにも公開します。</p>\n<p data-sourcepos="13:1-13:93">同じような悩みを抱えた方の負担が少しでも解消されれば幸いです。</p>\n<p data-sourcepos="15:1-15:119"><font color="red">※私もTypeScriptの勉強を始めてまだ日が浅いので色々ご容赦ください...</font></p>\n<p data-sourcepos="17:1-17:51">前回の記事の続きとなっております。</p>\n<p data-sourcepos="19:1-19:57"><iframe id="qiita-embed-content__f48995cd286e6767efe1046ec2c8f43e" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__f48995cd286e6767efe1046ec2c8f43e" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fprivate%2Fe6191ed4294b625c7e9c" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<h2 data-sourcepos="21:1-21:37">\n<span id="なんでtypescriptを使うの" class="fragment"></span><a href="#%E3%81%AA%E3%82%93%E3%81%A7typescript%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AE"><i class="fa fa-link"></i></a>なんでTypeScriptを使うの？</h2>\n<p data-sourcepos="23:1-23:49">大きく分けて3つの利点があります。</p>\n<ol data-sourcepos="25:1-28:0">\n<li data-sourcepos="25:1-25:18">静的型付け</li>\n<li data-sourcepos="26:1-26:12">型推論</li>\n<li data-sourcepos="27:1-28:0">Null 安全性</li>\n</ol>\n<h3 data-sourcepos="29:1-29:40">\n<span id="1-静的型付けってなぁに" class="fragment"></span><a href="#1-%E9%9D%99%E7%9A%84%E5%9E%8B%E4%BB%98%E3%81%91%E3%81%A3%E3%81%A6%E3%81%AA%E3%81%81%E3%81%AB"><i class="fa fa-link"></i></a>1. 静的型付けってなぁに？</h3>\n<p data-sourcepos="31:1-31:79">実はJavaScriptにも動的型付けといって型は存在しています。</p>\n<p data-sourcepos="33:1-33:63">次を実行してnodeJSの環境に入って試してみよう</p>\n<div class="code-frame" data-lang="text" data-sourcepos="35:1-38:3"><div class="highlight"><pre><code>$ docker run -it node:19-alpine3.16 sh\n/ # node\n</code></pre></div></div>\n<div class="code-frame" data-lang="bash" data-sourcepos="40:1-50:3"><div class="highlight"><pre><code><span class="o">&gt;</span> <span class="nb">let </span>hoge <span class="o">=</span> <span class="s1">\'あいうえお\'</span>\n<span class="o">&gt;</span> undefined\n<span class="o">&gt;</span> typeof hoge\n<span class="s1">\'string\'</span>\n<span class="o">&gt;</span> hoge <span class="o">=</span> 123\n123\n<span class="o">&gt;</span> typeof hoge\n<span class="s1">\'number\'</span>\n<span class="o">&gt;</span> .exit\n</code></pre></div></div>\n<p data-sourcepos="52:1-52:91">stringで定義したhogeが、123を代入するとnumberの型に変化していますね</p>\n<p data-sourcepos="54:1-54:55">次に同じことをTypeScriptでやってみます。</p>\n<p data-sourcepos="56:1-56:93"><a href="https://www.typescriptlang.org/play" rel="nofollow noopener" target="_blank">TypeScript Playground</a>を使って試してみます。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="58:1-62:3"><div class="highlight"><pre><code><span class="kd">let</span> <span class="nx">hoge</span><span class="p">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">あいうえお</span><span class="dl">"</span>\n\n<span class="nx">hoge</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>\n</code></pre></div></div>\n<p data-sourcepos="64:1-64:122"><a href="https://camo.qiitausercontent.com/38cb64dfd08bd25f0dfda9b8d6aba51745b2365a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f37316332393031382d336563342d636132652d363462352d6165326133366138316561652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F71c29018-3ec4-ca2e-64b5-ae2a36a81eae.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4806d2b59694e5b8b8902d2def336c52" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/71c29018-3ec4-ca2e-64b5-ae2a36a81eae.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F71c29018-3ec4-ca2e-64b5-ae2a36a81eae.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e5cd2f64a217fbedce43b7edbf423830 1x" loading="lazy"></a></p>\n<p data-sourcepos="66:1-68:81">文字列に対して数字を入れようとしたのでエラーになりましたね！<br>\nこれが静的型付けです。<br>\nこの型付けによって予期しない代入を防ぐことができます。</p>\n<p data-sourcepos="71:1-71:49">型の付け方には大きく2つあります。</p>\n<ul data-sourcepos="73:1-100:0">\n<li data-sourcepos="73:1-95:29">プリミティブ型\n<ul data-sourcepos="74:5-95:29">\n<li data-sourcepos="74:5-77:27">Boolean\n<ul data-sourcepos="75:9-77:27">\n<li data-sourcepos="75:9-75:23">true or false</li>\n<li data-sourcepos="76:9-76:43">真偽値を扱うデータ型。</li>\n<li data-sourcepos="77:9-77:27">型名は boolean</li>\n</ul>\n</li>\n<li data-sourcepos="78:5-80:26">Number型\n<ul data-sourcepos="79:9-80:26">\n<li data-sourcepos="79:9-79:49">数値を扱うためのデータ型。</li>\n<li data-sourcepos="80:9-80:26">型名は number</li>\n</ul>\n</li>\n<li data-sourcepos="81:5-83:26">BigInt型\n<ul data-sourcepos="82:9-83:26">\n<li data-sourcepos="82:9-82:90">number型では表現できない大きな数値（ 253 以上）を扱う型。</li>\n<li data-sourcepos="83:9-83:26">型名は bigint</li>\n</ul>\n</li>\n<li data-sourcepos="84:5-86:26">String型\n<ul data-sourcepos="85:9-86:26">\n<li data-sourcepos="85:9-85:52">文字列を扱うためのデータ型。</li>\n<li data-sourcepos="86:9-86:26">型名は string</li>\n</ul>\n</li>\n<li data-sourcepos="87:5-89:26">Symbol型\n<ul data-sourcepos="88:9-89:26">\n<li data-sourcepos="88:9-88:85">「シンボル値」という固有の識別子を表現する値の型。</li>\n<li data-sourcepos="89:9-89:26">型名は symbol</li>\n</ul>\n</li>\n<li data-sourcepos="90:5-92:24">Null型\n<ul data-sourcepos="91:9-92:24">\n<li data-sourcepos="91:9-91:76">何のデータも含まれない状態を明示的に表す値。</li>\n<li data-sourcepos="92:9-92:24">型名は null</li>\n</ul>\n</li>\n<li data-sourcepos="93:5-95:29">Undefined型\n<ul data-sourcepos="94:9-95:29">\n<li data-sourcepos="94:9-94:55">「未定義」であることを表す値。</li>\n<li data-sourcepos="95:9-95:29">型名は undefined</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos="96:1-100:0">リテラル型\n<ul data-sourcepos="97:5-100:0">\n<li data-sourcepos="97:5-97:51">「文字通りの」という意味です。</li>\n<li data-sourcepos="98:5-98:66">特定のものだけを指定するときに使います。</li>\n<li data-sourcepos="99:5-100:0">次の例でイメージしてください。</li>\n</ul>\n</li>\n</ul>\n<div class="code-frame" data-lang="typescript" data-sourcepos="101:1-107:3"><div class="highlight"><pre><code><span class="c1">// リテラル型</span>\n<span class="c1">// ポチしか入らない変数</span>\n<span class="kd">let</span> <span class="nx">my_dog</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">Pochi</span><span class="dl">\'</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">Pochi</span><span class="dl">\'</span><span class="p">;</span>\n<span class="c1">// 犬か猫しか入らない</span>\n<span class="kd">let</span> <span class="nx">my_pet</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">dog</span><span class="dl">\'</span> <span class="o">|</span> <span class="dl">\'</span><span class="s1">cat</span><span class="dl">\'</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">dog</span><span class="dl">\'</span><span class="p">;</span>\n</code></pre></div></div>\n<p data-sourcepos="109:1-109:99">また、エイリアスとインターフェースというものも使うことができます。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="111:1-137:3"><div class="highlight"><pre><code><span class="c1">// エイリアス</span>\n<span class="kd">type</span> <span class="nx">TypeHoge</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>\n  <span class="na">age</span><span class="p">:</span> <span class="kr">number</span>\n<span class="p">}</span>\n\n<span class="kd">let</span> <span class="nx">user_1</span><span class="p">:</span> <span class="nx">TypeHoge</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">木村太郎</span><span class="dl">\'</span><span class="p">,</span>\n  <span class="na">age</span><span class="p">:</span> <span class="mi">50</span>\n<span class="p">};</span>\n\n<span class="c1">// インターフェース</span>\n<span class="kr">interface</span> <span class="nx">InterfaceHoge</span> <span class="p">{</span>\n  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="c1">// インターフェースは再代入が可能</span>\n<span class="kr">interface</span> <span class="nx">InterfaceHoge</span> <span class="p">{</span>\n  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="kd">let</span> <span class="nx">user_2</span><span class="p">:</span> <span class="nx">InterfaceHoge</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">木村太郎</span><span class="dl">\'</span><span class="p">,</span>\n  <span class="na">age</span><span class="p">:</span> <span class="mi">50</span>\n<span class="p">};</span>\n</code></pre></div></div>\n<h3 data-sourcepos="138:1-138:34">\n<span id="2-型推論ってなぁに" class="fragment"></span><a href="#2-%E5%9E%8B%E6%8E%A8%E8%AB%96%E3%81%A3%E3%81%A6%E3%81%AA%E3%81%81%E3%81%AB"><i class="fa fa-link"></i></a>2. 型推論ってなぁに？</h3>\n<p data-sourcepos="140:1-141:100">とても簡単です。<br>\nわざわざ型を書かなくてもTypeScriptがいい感じに推論してくれる機能です。</p>\n<p data-sourcepos="143:1-143:27">例を見てみましょう</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="145:1-148:3"><div class="highlight"><pre><code><span class="kd">let</span> <span class="nx">hoge</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>\n<span class="nx">hoge</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">テスト</span><span class="dl">\'</span><span class="p">;</span>\n</code></pre></div></div>\n<p data-sourcepos="150:1-150:122"><a href="https://camo.qiitausercontent.com/5360359455ebd18c9cd051139cccd7ea735ace65/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f30303166376266632d323366352d646539342d353030622d3138306439376165393361632e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F001f7bfc-23f5-de94-500b-180d97ae93ac.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=94fcb5e4e03391a41eb5ed6271228402" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/001f7bfc-23f5-de94-500b-180d97ae93ac.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F001f7bfc-23f5-de94-500b-180d97ae93ac.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=82738062f025ce561946a19c0189db62 1x" loading="lazy"></a></p>\n<p data-sourcepos="152:1-154:30">hogeには2+2としか指定していませんが、きちんとnumber型と認識し、テストという文字列が代入されるのをブロックしていますね<br>\nTypeScriptで書く上で、全てに型を書く必要はなく、このようにTypeScriptがいい感じに推論してくれる。<br>\nこれが型の推論です。</p>\n<h3 data-sourcepos="156:1-156:20">\n<span id="3-null安全性" class="fragment"></span><a href="#3-null%E5%AE%89%E5%85%A8%E6%80%A7"><i class="fa fa-link"></i></a>3. null安全性</h3>\n<p data-sourcepos="158:1-159:54">プログラミングをしていて一番多いバグは<code>NULL</code>アクセスと言われています。<br>\nRubyなら<code>nil</code>に対する<code>NoMethodError</code>ですね。</p>\n<p data-sourcepos="161:1-161:148">TypeScriptはこの<code>NULL</code>アクセスエラーになる可能性があるのであればコンパイルの段階でチェックしてくれます。</p>\n<p data-sourcepos="163:1-164:122"><a href="https://camo.qiitausercontent.com/04f74e4e7065f6df31cfc9d519e464434fed1272/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f39633838303066332d393634642d663235352d353461372d6636336332666238373732382e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F9c8800f3-964d-f255-54a7-f63c2fb87728.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0959feb4157459567208c8cab80b7fb7" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/9c8800f3-964d-f255-54a7-f63c2fb87728.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F9c8800f3-964d-f255-54a7-f63c2fb87728.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=cfb9b3e160f05e77670c2c2828298aad 1x" loading="lazy"></a><br>\n<a href="https://camo.qiitausercontent.com/ca036328e79ac554e7fb09b81f8e6032d3af8a4b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31393634353238632d393665392d666166382d663834362d6466633936643064306266392e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1964528c-96e9-faf8-f846-dfc96d0d0bf9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=74b55c02ed955d1368c879d4e1e2ee60" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1964528c-96e9-faf8-f846-dfc96d0d0bf9.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1964528c-96e9-faf8-f846-dfc96d0d0bf9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5ff26a3864b62ffb074f3364bb70a0bf 1x" loading="lazy"></a></p>\n<p data-sourcepos="166:1-166:93">VScodeを使っていれば、リアルタイムにこのように指摘してくれます。</p>\n<p data-sourcepos="168:1-168:114">VimやEmacsではなかなか難しいと思うので、TypeScriptを書くならばVScodeを使いましょう。</p>\n',body:"# はじめに\n\n部署の新人からよくこんな話を聞きました。\n\n* `TypeScript`って難しそうで環境作る時には`JavaScript`を選んじゃいます\n* 型って何ですか？\n* `JavaScript`と何が違うんですか？\n\n`TypeScript`は絶対に使っていきたいので、\n部署の新人向けにTypeScript勉強会を開催しました。\nその時のメモをこちらにも公開します。\n\n同じような悩みを抱えた方の負担が少しでも解消されれば幸いです。\n\n<font color=\"red\">※私もTypeScriptの勉強を始めてまだ日が浅いので色々ご容赦ください...</font>\n\n前回の記事の続きとなっております。\n\nhttps://qiita.com/doyaseizin/private/e6191ed4294b625c7e9c\n\n## なんでTypeScriptを使うの？\n\n大きく分けて3つの利点があります。\n\n1. 静的型付け\n1. 型推論\n1. Null 安全性\n\n### 1. 静的型付けってなぁに？\n\n実はJavaScriptにも動的型付けといって型は存在しています。\n\n次を実行してnodeJSの環境に入って試してみよう\n\n```\n$ docker run -it node:19-alpine3.16 sh\n/ # node\n```\n\n```bash\n> let hoge = 'あいうえお'\n> undefined\n> typeof hoge\n'string'\n> hoge = 123\n123\n> typeof hoge\n'number'\n> .exit\n```\n\nstringで定義したhogeが、123を代入するとnumberの型に変化していますね\n\n次に同じことをTypeScriptでやってみます。\n\n[TypeScript Playground](https://www.typescriptlang.org/play)を使って試してみます。\n\n```typescript\nlet hoge: string = \"あいうえお\"\n\nhoge = 123;\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/71c29018-3ec4-ca2e-64b5-ae2a36a81eae.png)\n\n文字列に対して数字を入れようとしたのでエラーになりましたね！\nこれが静的型付けです。\nこの型付けによって予期しない代入を防ぐことができます。\n\n\n型の付け方には大きく2つあります。\n\n* プリミティブ型\n    * Boolean\n        * true or false\n        * 真偽値を扱うデータ型。\n        * 型名は boolean\n    * Number型\n        * 数値を扱うためのデータ型。\n        * 型名は number\n    * BigInt型\n        * number型では表現できない大きな数値（ 253 以上）を扱う型。\n        * 型名は bigint\n    * String型\n        * 文字列を扱うためのデータ型。\n        * 型名は string\n    * Symbol型\n        * 「シンボル値」という固有の識別子を表現する値の型。\n        * 型名は symbol\n    * Null型\n        * 何のデータも含まれない状態を明示的に表す値。\n        * 型名は null\n    * Undefined型\n        * 「未定義」であることを表す値。\n        * 型名は undefined\n* リテラル型\n    * 「文字通りの」という意味です。\n    * 特定のものだけを指定するときに使います。\n    * 次の例でイメージしてください。\n\n```typescript\n// リテラル型\n// ポチしか入らない変数\nlet my_dog: 'Pochi' = 'Pochi';\n// 犬か猫しか入らない\nlet my_pet: 'dog' | 'cat' = 'dog';\n```\n\nまた、エイリアスとインターフェースというものも使うことができます。\n\n```typescript\n// エイリアス\ntype TypeHoge = {\n  name: string,\n  age: number\n}\n\nlet user_1: TypeHoge = {\n  name: '木村太郎',\n  age: 50\n};\n\n// インターフェース\ninterface InterfaceHoge {\n  age: number;\n}\n\n// インターフェースは再代入が可能\ninterface InterfaceHoge {\n  name: string;\n}\n\nlet user_2: InterfaceHoge = {\n  name: '木村太郎',\n  age: 50\n};\n```\n### 2. 型推論ってなぁに？\n\nとても簡単です。\nわざわざ型を書かなくてもTypeScriptがいい感じに推論してくれる機能です。\n\n例を見てみましょう\n\n```typescript\nlet hoge = 2 + 2;\nhoge = 'テスト';\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/001f7bfc-23f5-de94-500b-180d97ae93ac.png)\n\nhogeには2+2としか指定していませんが、きちんとnumber型と認識し、テストという文字列が代入されるのをブロックしていますね\nTypeScriptで書く上で、全てに型を書く必要はなく、このようにTypeScriptがいい感じに推論してくれる。\nこれが型の推論です。\n\n### 3. null安全性\n\nプログラミングをしていて一番多いバグは`NULL`アクセスと言われています。\nRubyなら`nil`に対する`NoMethodError`ですね。\n\nTypeScriptはこの`NULL`アクセスエラーになる可能性があるのであればコンパイルの段階でチェックしてくれます。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/9c8800f3-964d-f255-54a7-f63c2fb87728.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1964528c-96e9-faf8-f846-dfc96d0d0bf9.png)\n\nVScodeを使っていれば、リアルタイムにこのように指摘してくれます。\n\nVimやEmacsではなかなか難しいと思うので、TypeScriptを書くならばVScodeを使いましょう。\n\n",coediting:!1,comments_count:0,created_at:"2022-12-23T14:10:44+09:00",group:null,id:"f124b1359bf188e17a3c",likes_count:1,private:!1,reactions_count:0,stocks_count:1,tags:[{name:"JavaScript",versions:[]},{name:"TypeScript",versions:[]}],title:"TypeScriptを知ろう。 ー 2. TypeScriptの利点",updated_at:"2022-12-23T14:10:44+09:00",url:"https://qiita.com/maaaashi/items/f124b1359bf188e17a3c",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:707,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-3:60">部署の新人からよくこんな話を聞きました。</p>\n<ul data-sourcepos="5:1-8:0">\n<li data-sourcepos="5:1-5:92">\n<code>TypeScript</code>って難しそうで環境作る時には<code>JavaScript</code>を選んじゃいます</li>\n<li data-sourcepos="6:1-6:26">型って何ですか？</li>\n<li data-sourcepos="7:1-8:0">\n<code>JavaScript</code>と何が違うんですか？</li>\n</ul>\n<p data-sourcepos="9:1-11:54"><code>TypeScript</code>は絶対に使っていきたいので、<br>\n部署の新人向けにTypeScript勉強会を開催しました。<br>\nその時のメモをこちらにも公開します。</p>\n<p data-sourcepos="13:1-13:93">同じような悩みを抱えた方の負担が少しでも解消されれば幸いです。</p>\n<p data-sourcepos="15:1-15:119"><font color="red">※私もTypeScriptの勉強を始めてまだ日が浅いので色々ご容赦ください...</font></p>\n<h1 data-sourcepos="17:1-17:30">\n<span id="typescriptってなぁに" class="fragment"></span><a href="#typescript%E3%81%A3%E3%81%A6%E3%81%AA%E3%81%81%E3%81%AB"><i class="fa fa-link"></i></a>TypeScriptってなぁに？</h1>\n<p data-sourcepos="19:1-19:67"><code>TypeScript</code>はいわゆる、<code>AltJS</code>と呼ばれる言語です。</p>\n<h2 data-sourcepos="21:1-21:17">\n<span id="altjsって" class="fragment"></span><a href="#altjs%E3%81%A3%E3%81%A6"><i class="fa fa-link"></i></a>AltJSって？</h2>\n<p data-sourcepos="23:1-23:92"><code>AltJS</code>とは、コンパイルするとJavaScriptになる言語のことを言います。</p>\n<p data-sourcepos="25:1-25:126">コンパイルとは、簡単に言うと、ソースコードを解析し、読み取れる形に変換することです。</p>\n<p data-sourcepos="27:1-27:122"><a href="https://camo.qiitausercontent.com/f0076bb7fc79d2c5b174bef830efdd1c15872c5b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f33623861633738652d316131392d326564312d343434392d3464313530353061343761632e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F3b8ac78e-1a19-2ed1-4449-4d15050a47ac.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d7fbcf6cdbd198a7e0255742577f8769" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/3b8ac78e-1a19-2ed1-4449-4d15050a47ac.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F3b8ac78e-1a19-2ed1-4449-4d15050a47ac.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=677aeed07665ce7c7b0d1195afb22636 1x" loading="lazy"></a></p>\n<p data-sourcepos="29:1-29:147"><code>TypeScript</code>にはコンパイルする機能も付いていて、どの規格の<code>JavaScript</code>に変換するか設定することも可能です。</p>\n<p data-sourcepos="31:1-31:63"><code>JavaScript</code>の規格のことを<code>ECMASCript</code>といいます。</p>\n<h2 data-sourcepos="33:1-33:22">\n<span id="ecmascriptって" class="fragment"></span><a href="#ecmascript%E3%81%A3%E3%81%A6"><i class="fa fa-link"></i></a>ECMAScriptって？</h2>\n<p data-sourcepos="35:1-36:117">少し歴史も交えて説明すると、、<br>\n<code>JavaScript</code>はブラウザによる互換性が低く、各ブラウザ間での決まりごとが必要でした。</p>\n<p data-sourcepos="38:1-38:122"><a href="https://camo.qiitausercontent.com/10425cccf404dea0b13538e1328a044520cff254/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f36623964646137372d396665392d633433312d323434342d3034633730336534373832392e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F6b9dda77-9fe9-c431-2444-04c703e47829.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=877fcae75525dce222952c5bcbeb4675" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/6b9dda77-9fe9-c431-2444-04c703e47829.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F6b9dda77-9fe9-c431-2444-04c703e47829.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a903f5cd2f8c36cb5edde06ebb1a5916 1x" loading="lazy"></a></p>\n<p data-sourcepos="40:1-40:63">その決まりごとのことを<code>ECMAScript</code>といいます。</p>\n<p data-sourcepos="42:1-42:122"><a href="https://camo.qiitausercontent.com/0152ab890b60a8a5668503afc7d4ebc8ac9d8069/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f30653839303463332d323531662d623032322d633834332d6363313030303630653330362e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0e8904c3-251f-b022-c843-cc100060e306.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7169d0e4a11c93ae3c58b2ef5cd7a493" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0e8904c3-251f-b022-c843-cc100060e306.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0e8904c3-251f-b022-c843-cc100060e306.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=526dc1bbe13e6d75610c6540ce0272c1 1x" loading="lazy"></a></p>\n<p data-sourcepos="44:1-44:93">これにより、各ブラウザの互換性が生まれるようになったんですね。</p>\n<p data-sourcepos="47:1-48:122">そして、<code>ECMAScript</code>はEditionと呼ばれるバージョンが存在し、ブラウザごとに対応Editionが異なります。<br>\n作成したアプリが対応しているEditionをターゲットとし、TypeScriptでコンパイルすると、、、</p>\n<blockquote data-sourcepos="50:1-50:56">\n<p data-sourcepos="50:3-50:56">「○○ブラウザで動かないんだけど！」</p>\n</blockquote>\n<p data-sourcepos="52:1-52:39">ということが起きないです。</p>\n<blockquote data-sourcepos="54:1-54:90">\n<p data-sourcepos="54:3-54:90">例) IEはES3までしか対応していないから、ES3にコンパイルしよう！</p>\n</blockquote>\n<p data-sourcepos="56:1-56:123">ブラウザがどの<code>ECMAScript</code>のバージョンに対応しているかは、以下から確認してください～！</p>\n<p data-sourcepos="58:1-58:81"><a href="https://kangax.github.io/compat-table/es5/" rel="nofollow noopener" target="_blank">ECMAScript ブラウザサポート</a></p>\n<h2 data-sourcepos="60:1-60:70">\n<span id="何となく分かったけどなんでtypescriptを使うの" class="fragment"></span><a href="#%E4%BD%95%E3%81%A8%E3%81%AA%E3%81%8F%E5%88%86%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%91%E3%81%A9%E3%81%AA%E3%82%93%E3%81%A7typescript%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AE"><i class="fa fa-link"></i></a>何となく分かったけど、なんでTypeScriptを使うの？</h2>\n<p data-sourcepos="62:1-62:49">大きく分けて3つの利点があります。</p>\n<ol data-sourcepos="64:1-67:0">\n<li data-sourcepos="64:1-64:18">静的型付け</li>\n<li data-sourcepos="65:1-65:12">型推論</li>\n<li data-sourcepos="66:1-67:0">Null 安全性</li>\n</ol>\n<p data-sourcepos="68:1-68:51">次回は利点について書いていきます。</p>\n',body:'# はじめに\n\n部署の新人からよくこんな話を聞きました。\n\n* `TypeScript`って難しそうで環境作る時には`JavaScript`を選んじゃいます\n* 型って何ですか？\n* `JavaScript`と何が違うんですか？\n\n`TypeScript`は絶対に使っていきたいので、\n部署の新人向けにTypeScript勉強会を開催しました。\nその時のメモをこちらにも公開します。\n\n同じような悩みを抱えた方の負担が少しでも解消されれば幸いです。\n\n<font color="red">※私もTypeScriptの勉強を始めてまだ日が浅いので色々ご容赦ください...</font>\n\n# TypeScriptってなぁに？\n\n`TypeScript`はいわゆる、`AltJS`と呼ばれる言語です。\n\n## AltJSって？\n\n`AltJS`とは、コンパイルするとJavaScriptになる言語のことを言います。\n\nコンパイルとは、簡単に言うと、ソースコードを解析し、読み取れる形に変換することです。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/3b8ac78e-1a19-2ed1-4449-4d15050a47ac.png)\n\n`TypeScript`にはコンパイルする機能も付いていて、どの規格の`JavaScript`に変換するか設定することも可能です。\n\n`JavaScript`の規格のことを`ECMASCript`といいます。\n\n## ECMAScriptって？\n\n少し歴史も交えて説明すると、、\n`JavaScript`はブラウザによる互換性が低く、各ブラウザ間での決まりごとが必要でした。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/6b9dda77-9fe9-c431-2444-04c703e47829.png)\n\nその決まりごとのことを`ECMAScript`といいます。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0e8904c3-251f-b022-c843-cc100060e306.png)\n\nこれにより、各ブラウザの互換性が生まれるようになったんですね。\n\n\nそして、`ECMAScript`はEditionと呼ばれるバージョンが存在し、ブラウザごとに対応Editionが異なります。\n作成したアプリが対応しているEditionをターゲットとし、TypeScriptでコンパイルすると、、、\n\n> 「○○ブラウザで動かないんだけど！」\n\nということが起きないです。\n\n> 例) IEはES3までしか対応していないから、ES3にコンパイルしよう！\n\nブラウザがどの`ECMAScript`のバージョンに対応しているかは、以下から確認してください～！\n\n[ECMAScript ブラウザサポート](https://kangax.github.io/compat-table/es5/)\n\n## 何となく分かったけど、なんでTypeScriptを使うの？\n\n大きく分けて3つの利点があります。\n\n1. 静的型付け\n1. 型推論\n1. Null 安全性\n\n次回は利点について書いていきます。\n',coediting:!1,comments_count:0,created_at:"2022-12-21T16:37:10+09:00",group:null,id:"e6191ed4294b625c7e9c",likes_count:1,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"TypeScript",versions:[]}],title:"TypeScriptを知ろう。 - 1. TypeScriptってなぁに？",updated_at:"2022-12-22T08:54:00+09:00",url:"https://qiita.com/maaaashi/items/e6191ed4294b625c7e9c",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:698,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:93">Nuxt3で.envを使う方法がいろいろな記事に書いてあり、<br>\nどれが本当に動くのか分からなくなったため、メモとして残します。</p>\n<h1 data-sourcepos="6:1-6:13">\n<span id="nuxt3導入" class="fragment"></span><a href="#nuxt3%E5%B0%8E%E5%85%A5"><i class="fa fa-link"></i></a>Nuxt3導入</h1>\n<p data-sourcepos="8:1-8:30">ここでは省略します。</p>\n<h1 data-sourcepos="11:1-11:21">\n<span id="envの反映方法" class="fragment"></span><a href="#env%E3%81%AE%E5%8F%8D%E6%98%A0%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>.envの反映方法</h1>\n<h3 data-sourcepos="14:1-14:62">\n<span id="1-envをルートディレクトリに作成します" class="fragment"></span><a href="#1-env%E3%82%92%E3%83%AB%E3%83%BC%E3%83%88%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E4%BD%9C%E6%88%90%E3%81%97%E3%81%BE%E3%81%99"><i class="fa fa-link"></i></a>1. .envをルートディレクトリに作成します。</h3>\n<p data-sourcepos="16:1-16:89">ルートディレクトリとは<code>package.json</code>とかがあるディレクトリですね</p>\n<div class="code-frame" data-lang="env" data-sourcepos="18:1-20:3">\n<div class="code-lang"><span class="bold">.env</span></div>\n<div class="highlight"><pre><code>TEST=\'これはテストです。\'\n</code></pre></div>\n</div>\n<h3 data-sourcepos="22:1-22:30">\n<span id="2-nuxtconfigtsを修正" class="fragment"></span><a href="#2-nuxtconfigts%E3%82%92%E4%BF%AE%E6%AD%A3"><i class="fa fa-link"></i></a>2. nuxt.config.tsを修正</h3>\n<p data-sourcepos="24:1-24:33"><code>runtimeConfig</code>を使用する。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="26:1-34:3"><div class="highlight"><pre><code><span class="k">export</span> <span class="k">default</span> <span class="nf">defineNuxtConfig</span><span class="p">({</span>\n  <span class="na">runtimeConfig</span><span class="p">:</span> <span class="p">{</span>\n    <span class="na">public</span><span class="p">:</span> <span class="p">{</span>\n      <span class="na">test</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">TEST</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n<span class="p">})</span>\n</code></pre></div></div>\n<h3 data-sourcepos="36:1-36:22">\n<span id="3-呼び出す" class="fragment"></span><a href="#3-%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99"><i class="fa fa-link"></i></a>3. 呼び出す。</h3>\n<p data-sourcepos="38:1-38:115"><code>useRuntimeConfig</code>を使用すると、<code>nuxt.config.ts</code>で設定した変数を呼び出すことができます。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="40:1-48:3">\n<div class="code-lang"><span class="bold">index.vue</span></div>\n<div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">setup</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="nf">useRuntimeConfig</span><span class="p">();</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>\n  <span class="si">{{</span> <span class="nx">config</span><span class="p">.</span><span class="kr">public</span><span class="p">.</span><span class="nx">test</span> <span class="si">}}</span>\n<span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="50:1-50:122"><a href="https://camo.qiitausercontent.com/caca8738301273ca306ccd3bb41a750ebd7236db/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f66643633376434622d346437652d313137342d333764322d3636626366316331623432652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Ffd637d4b-4d7e-1174-37d2-66bcf1c1b42e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=29df0b184d9bd6d02eb63858cc262052" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/fd637d4b-4d7e-1174-37d2-66bcf1c1b42e.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Ffd637d4b-4d7e-1174-37d2-66bcf1c1b42e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3b7d67ac60e0e70c131ac879783ee3fc 1x" loading="lazy"></a></p>\n<p data-sourcepos="52:1-52:36">ちゃんと呼び出せました。</p>\n',body:"# はじめに\n\nNuxt3で.envを使う方法がいろいろな記事に書いてあり、\nどれが本当に動くのか分からなくなったため、メモとして残します。\n\n# Nuxt3導入\n\nここでは省略します。\n\n\n# .envの反映方法\n\n\n### 1. .envをルートディレクトリに作成します。\n\nルートディレクトリとは`package.json`とかがあるディレクトリですね\n\n```env:.env\nTEST='これはテストです。'\n```\n\n### 2. nuxt.config.tsを修正\n\n`runtimeConfig`を使用する。\n\n```typescript\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    public: {\n      test: process.env.TEST\n    }\n  }\n})\n```\n\n### 3. 呼び出す。\n\n`useRuntimeConfig`を使用すると、`nuxt.config.ts`で設定した変数を呼び出すことができます。\n\n```vue:index.vue\n<script setup lang=\"ts\">\n  const config = useRuntimeConfig();\n<\/script>\n\n<template>\n  {{ config.public.test }}\n</template>\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/fd637d4b-4d7e-1174-37d2-66bcf1c1b42e.png)\n\nちゃんと呼び出せました。\n\n",coediting:!1,comments_count:0,created_at:"2022-12-20T17:53:05+09:00",group:null,id:"94b6b9517eb26f63a92c",likes_count:2,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Nuxt",versions:[]},{name:"Nuxt3",versions:[]}],title:"Nuxt3で.envを使用する方法",updated_at:"2022-12-21T07:03:39+09:00",url:"https://qiita.com/maaaashi/items/94b6b9517eb26f63a92c",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:1753,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-3:81"><code>SvelteKit</code>を使って<code>markdown</code>記事を作成したのでその時のメモ。</p>\n<p data-sourcepos="5:1-5:122"><a href="https://camo.qiitausercontent.com/83ae0e6cf77762af916be2099f8200b34cb31531/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f61393034346535632d313265342d636661662d663462302d3531633466636264383532652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa9044e5c-12e4-cfaf-f4b0-51c4fcbd852e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=699b644b213a3b28a6368b2a83a2cf93" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a9044e5c-12e4-cfaf-f4b0-51c4fcbd852e.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa9044e5c-12e4-cfaf-f4b0-51c4fcbd852e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=821fa64b44aee05e38e1de4765507f6e 1x" loading="lazy"></a></p>\n<h1 data-sourcepos="7:1-7:20">\n<span id="0-使ったもの" class="fragment"></span><a href="#0-%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>0. 使ったもの</h1>\n<ul data-sourcepos="9:1-14:0">\n<li data-sourcepos="9:1-14:0">Vite + SvelteKit + Typescript\n<ul data-sourcepos="10:5-14:0">\n<li data-sourcepos="10:5-10:21">Flowbite-svelte</li>\n<li data-sourcepos="11:5-11:18">tailwind css</li>\n<li data-sourcepos="12:5-14:0">svelte-markdown</li>\n</ul>\n</li>\n</ul>\n<p data-sourcepos="15:1-16:54">UIコンポーネントには<a href="https://flowbite-svelte.com/" rel="nofollow noopener" target="_blank">Flowbite-svelte</a>を利用しました。<br>\n導入方法は前の記事で公開しています。</p>\n<p data-sourcepos="18:1-18:55"><iframe id="qiita-embed-content__1c8a4129c38954122d8b2155a7459b65" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__1c8a4129c38954122d8b2155a7459b65" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2F6e7e8571cc6c3d7ad2e8" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<h1 data-sourcepos="20:1-20:41">\n<span id="1-svelte-markdownのインストール" class="fragment"></span><a href="#1-svelte-markdown%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>1. svelte-markdownのインストール</h1>\n<div class="code-frame" data-lang="bash" data-sourcepos="22:1-24:3"><div class="highlight"><pre><code><span class="nv">$ </span>npm i <span class="nt">-S</span> svelte-markdown\n</code></pre></div></div>\n<h1 data-sourcepos="26:1-26:35">\n<span id="2-まず試しに使ってみる" class="fragment"></span><a href="#2-%E3%81%BE%E3%81%9A%E8%A9%A6%E3%81%97%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>2. まず試しに使ってみる</h1>\n<p data-sourcepos="28:1-28:12">公式より</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="30:1-52:3">\n<div class="code-lang"><span class="bold">+page.svelte</span></div>\n<div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="nx">SvelteMarkdown</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">svelte-markdown</span><span class="dl">\'</span>\n  <span class="kd">const</span> <span class="nx">source</span> <span class="o">=</span> <span class="s2">`\n  # This is a header\n\n  This is a paragraph.\n\n  * This is a list\n  * With two items\n      1. And a sublist\n      2. That is ordered\n          * With another\n          * Sublist inside\n\n  | And this is | A table |\n  |-------------|---------|\n  | With two    | columns |\n`</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;SvelteMarkdown</span> <span class="err">{</span><span class="na">source</span><span class="err">}</span> <span class="nt">/&gt;</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="54:1-54:122"><a href="https://camo.qiitausercontent.com/fa519ef38ccea3bc2b0bba4ddf65c60965b1d903/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31363838376464612d396166652d643032312d363033662d3666303962316230383931332e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F16887dda-9afe-d021-603f-6f09b1b08913.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2b7dcc4a6305d5f4ca937a4389ba34cd" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/16887dda-9afe-d021-603f-6f09b1b08913.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F16887dda-9afe-d021-603f-6f09b1b08913.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ee6ea20b4bc440d7b637897dd86bcead 1x" loading="lazy"></a></p>\n<p data-sourcepos="57:1-57:49">cssはいい感じに調整してください👍</p>\n<p data-sourcepos="59:1-59:66">参考として最後に自分の設定を載せておきます。</p>\n<h1 data-sourcepos="62:1-62:55">\n<span id="3-editとpreviewで記事作成フォームっぽく" class="fragment"></span><a href="#3-edit%E3%81%A8preview%E3%81%A7%E8%A8%98%E4%BA%8B%E4%BD%9C%E6%88%90%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%A3%E3%81%BD%E3%81%8F"><i class="fa fa-link"></i></a>3. EditとPreviewで記事作成フォームっぽく</h1>\n<p data-sourcepos="64:1-65:125">完成形<br>\n<a href="https://camo.qiitausercontent.com/a25c2b529af3d7eaa114f5038f830bf9bffdaf08/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f33356363333335332d643831352d336635302d653733622d3535363833346364316532352e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F35cc3353-d815-3f50-e73b-556834cd1e25.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5dd2bea52cc00e24f6b23590a11253c6" alt="markdown.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/35cc3353-d815-3f50-e73b-556834cd1e25.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F35cc3353-d815-3f50-e73b-556834cd1e25.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ee3b4c81bc815aab4a8c31794a2a8d7f 1x" loading="lazy"></a></p>\n<div class="code-frame" data-lang="vue" data-sourcepos="67:1-76:3">\n<div class="code-lang"><span class="bold">+page.svelte</span></div>\n<div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="nx">Markdown</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">$lib/MarkdownForm.svelte</span><span class="dl">\'</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="dl">\'\'</span><span class="p">;</span>\n\n  <span class="c1">// valueを使った処理</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;Markdown</span> <span class="na">value=</span><span class="s">{value}/</span><span class="nt">&gt;</span>\n</code></pre></div>\n</div>\n<div class="code-frame" data-lang="vue" data-sourcepos="78:1-105:3">\n<div class="code-lang"><span class="bold">MarkdownForm.svelte</span></div>\n<div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">TabItem</span><span class="p">,</span> <span class="nx">Tabs</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">flowbite-svelte</span><span class="dl">"</span><span class="p">;</span>\n  <span class="k">import</span> <span class="nx">SvelteMarkdown</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">svelte-markdown</span><span class="dl">"</span><span class="p">;</span>\n\n  <span class="k">export</span> <span class="kd">let</span> <span class="nx">value</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;Tabs</span> <span class="na">style=</span><span class="s">"full"</span> <span class="na">defaultClass=</span><span class="s">"flex rounded-lg divide-x divide-gray-200 shadow dark:divide-gray-700"</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;TabItem</span> <span class="na">class=</span><span class="s">"w-full"</span> <span class="na">open</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">slot=</span><span class="s">"title"</span><span class="nt">&gt;</span>Markdown<span class="nt">&lt;/span&gt;</span>\n    <span class="nt">&lt;textarea</span>\n      <span class="na">class=</span><span class="s">"w-full rounded-lg bg-gray-50 dark:bg-gray-700 text-gray-900 dark:placeholder-gray-400 dark:text-white  border border-gray-200 dark:border-gray-600 text-area p-2.5 text-sm focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-500 dark:focus:border-blue-500"</span>\n      <span class="na">bind:value=</span><span class="s">{value}</span>\n    <span class="nt">/&gt;</span>\n  <span class="nt">&lt;/TabItem&gt;</span>\n  <span class="nt">&lt;TabItem</span> <span class="na">class=</span><span class="s">"w-full"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">slot=</span><span class="s">"title"</span><span class="nt">&gt;</span>Preview<span class="nt">&lt;/span&gt;</span>\n    <span class="nt">&lt;SvelteMarkdown</span> <span class="na">source=</span><span class="s">{value}/</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;/TabItem&gt;</span>\n<span class="nt">&lt;/Tabs&gt;</span>\n\n<span class="nt">&lt;</span><span class="k">style</span><span class="nt">&gt;</span>\n  <span class="nt">textarea</span> <span class="p">{</span>\n    <span class="nl">height</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>\n  <span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">style</span><span class="nt">&gt;</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="107:1-107:154"><code>Flowbite-svelte</code>のタブを使って、入力の<code>textarea</code>と、<code>SvelteMarkdown</code>のプレビュー画面を切り替えられるようにしました。</p>\n<h1 data-sourcepos="110:1-110:14">\n<span id="4-参考css" class="fragment"></span><a href="#4-%E5%8F%82%E8%80%83css"><i class="fa fa-link"></i></a>4. 参考CSS</h1>\n<div class="code-frame" data-lang="" data-sourcepos="112:1-168:3">\n<div class="code-lang"><span class="bold">style.css</span></div>\n<div class="highlight"><pre><code>h1 {\n  @apply dark:text-white text-4xl font-bold my-5;\n  border-bottom: solid;\n}\n\ntable {\n  @apply dark:text-white;\n  display: block;\n  overflow: auto;\n  margin: 1.5em 0;\n  border-collapse: collapse;\n}\n\ntable thead {\n  @apply dark:text-white;\n  border-left: 1px solid #ddd;\n}\n\ntr {\n  @apply dark:text-white;\n  border-left: 1px solid #ddd;\n}\ntr:nth-child(odd) {\n  @apply dark:text-white;\n  background-color: #eee;\n}\n\ntr:nth-child(even) {\n  @apply dark:text-white;\n  background-color: #fff;\n}\n\nth {\n  @apply dark:text-white;\n  font-weight: bold;\n  background-color: #fff;\n  border-top: 1px solid #ddd;\n  border-bottom: 1px solid #ccc;\n  border-right: 1px solid #ccc;\n  padding: 8px 10px;\n}\n\ntd {\n  @apply dark:text-white;\n  text-align: left;\n  border-bottom: 1px solid #ccc;\n  border-right: 1px solid #ccc;\n  padding: 8px 10px;\n  max-width: 600px;\n}\nol {\n  @apply dark:text-white;\n  list-style-type: decimal;\n  padding-left: 20px;\n}\n</code></pre></div>\n</div>\n',body:'# はじめに\n\n`SvelteKit`を使って`markdown`記事を作成したのでその時のメモ。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a9044e5c-12e4-cfaf-f4b0-51c4fcbd852e.png)\n\n# 0. 使ったもの\n\n* Vite + SvelteKit + Typescript\n    * Flowbite-svelte\n    * tailwind css\n    * svelte-markdown\n\n\nUIコンポーネントには[Flowbite-svelte](https://flowbite-svelte.com/)を利用しました。\n導入方法は前の記事で公開しています。\n\nhttps://qiita.com/doyaseizin/items/6e7e8571cc6c3d7ad2e8\n\n# 1. svelte-markdownのインストール\n\n```bash\n$ npm i -S svelte-markdown\n```\n\n# 2. まず試しに使ってみる\n\n公式より\n\n```vue:+page.svelte\n<script>\n  import SvelteMarkdown from \'svelte-markdown\'\n  const source = `\n  # This is a header\n\n  This is a paragraph.\n\n  * This is a list\n  * With two items\n      1. And a sublist\n      2. That is ordered\n          * With another\n          * Sublist inside\n\n  | And this is | A table |\n  |-------------|---------|\n  | With two    | columns |\n`\n<\/script>\n\n<SvelteMarkdown {source} />\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/16887dda-9afe-d021-603f-6f09b1b08913.png)\n\n\ncssはいい感じに調整してください👍\n\n参考として最後に自分の設定を載せておきます。\n\n\n# 3. EditとPreviewで記事作成フォームっぽく\n\n完成形\n![markdown.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/35cc3353-d815-3f50-e73b-556834cd1e25.gif)\n\n```vue:+page.svelte\n<script>\n  import Markdown from \'$lib/MarkdownForm.svelte\';\n  let value = \'\';\n\n  // valueを使った処理\n<\/script>\n\n<Markdown value={value}/>\n```\n\n```vue:MarkdownForm.svelte\n<script lang="ts">\n  import { TabItem, Tabs } from "flowbite-svelte";\n  import SvelteMarkdown from "svelte-markdown";\n\n  export let value: string;\n<\/script>\n\n<Tabs style="full" defaultClass="flex rounded-lg divide-x divide-gray-200 shadow dark:divide-gray-700">\n  <TabItem class="w-full" open>\n    <span slot="title">Markdown</span>\n    <textarea\n      class="w-full rounded-lg bg-gray-50 dark:bg-gray-700 text-gray-900 dark:placeholder-gray-400 dark:text-white  border border-gray-200 dark:border-gray-600 text-area p-2.5 text-sm focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-500 dark:focus:border-blue-500"\n      bind:value={value}\n    />\n  </TabItem>\n  <TabItem class="w-full">\n    <span slot="title">Preview</span>\n    <SvelteMarkdown source={value}/>\n  </TabItem>\n</Tabs>\n\n<style>\n  textarea {\n    height: 200px;\n  }\n</style>\n```\n\n`Flowbite-svelte`のタブを使って、入力の`textarea`と、`SvelteMarkdown`のプレビュー画面を切り替えられるようにしました。\n\n\n# 4. 参考CSS\n\n```:style.css\nh1 {\n  @apply dark:text-white text-4xl font-bold my-5;\n  border-bottom: solid;\n}\n\ntable {\n  @apply dark:text-white;\n  display: block;\n  overflow: auto;\n  margin: 1.5em 0;\n  border-collapse: collapse;\n}\n\ntable thead {\n  @apply dark:text-white;\n  border-left: 1px solid #ddd;\n}\n\ntr {\n  @apply dark:text-white;\n  border-left: 1px solid #ddd;\n}\ntr:nth-child(odd) {\n  @apply dark:text-white;\n  background-color: #eee;\n}\n\ntr:nth-child(even) {\n  @apply dark:text-white;\n  background-color: #fff;\n}\n\nth {\n  @apply dark:text-white;\n  font-weight: bold;\n  background-color: #fff;\n  border-top: 1px solid #ddd;\n  border-bottom: 1px solid #ccc;\n  border-right: 1px solid #ccc;\n  padding: 8px 10px;\n}\n\ntd {\n  @apply dark:text-white;\n  text-align: left;\n  border-bottom: 1px solid #ccc;\n  border-right: 1px solid #ccc;\n  padding: 8px 10px;\n  max-width: 600px;\n}\nol {\n  @apply dark:text-white;\n  list-style-type: decimal;\n  padding-left: 20px;\n}\n```\n',coediting:!1,comments_count:2,created_at:"2022-12-19T18:55:08+09:00",group:null,id:"285bf2922d7f1d2c2dd0",likes_count:2,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Svelte",versions:[]},{name:"SvelteKit",versions:[]}],title:"SvelteKitでmarkdownの記事を作成",updated_at:"2022-12-20T12:36:23+09:00",url:"https://qiita.com/maaaashi/items/285bf2922d7f1d2c2dd0",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:779,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:111">認証サーバーとして、KeyCloakを使い始めたのですが、<br>\nネットに書いてある通りにやっても日本語化ができず、半ばあきらめていました。</p>\n<p data-sourcepos="6:1-6:150">ちょっとした落とし穴でしたが、他にも困っている方がいるかもしれないと思い記事にさせていただきました。</p>\n<h1 data-sourcepos="9:1-9:33">\n<span id="docker-composeでkeycloak構築" class="fragment"></span><a href="#docker-compose%E3%81%A7keycloak%E6%A7%8B%E7%AF%89"><i class="fa fa-link"></i></a>docker-composeでkeycloak構築</h1>\n<p data-sourcepos="11:1-12:83">docker-compose.ymlファイルを作成し、以下をコピペ。<br>\nただし、※の部分は自由に変更すること。(変えなくても動く)</p>\n<div class="code-frame" data-lang="yaml" data-sourcepos="14:1-45:3"><div class="highlight"><pre><code><span class="na">version</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">3\'</span>\n\n<span class="na">volumes</span><span class="pi">:</span>\n  <span class="na">mysql_data</span><span class="pi">:</span>\n      <span class="na">driver</span><span class="pi">:</span> <span class="s">local</span>\n\n<span class="na">services</span><span class="pi">:</span>\n  <span class="na">mysql</span><span class="pi">:</span>\n      <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:5.7</span>\n      <span class="na">volumes</span><span class="pi">:</span>\n        <span class="pi">-</span> <span class="s">mysql_data:/var/lib/mysql</span>\n      <span class="na">environment</span><span class="pi">:</span>\n        <span class="na">MYSQL_ROOT_PASSWORD</span><span class="pi">:</span> <span class="s">root   ※</span>\n        <span class="na">MYSQL_DATABASE</span><span class="pi">:</span> <span class="s">keycloak    ※</span>\n        <span class="na">MYSQL_USER</span><span class="pi">:</span> <span class="s">keycloak        ※</span>\n        <span class="na">MYSQL_PASSWORD</span><span class="pi">:</span> <span class="s">password    ※</span>\n  <span class="na">keycloak</span><span class="pi">:</span>\n      <span class="na">image</span><span class="pi">:</span> <span class="s">quay.io/keycloak/keycloak:legacy</span>\n      <span class="na">environment</span><span class="pi">:</span>\n        <span class="na">DB_VENDOR</span><span class="pi">:</span> <span class="s">MYSQL</span>\n        <span class="na">DB_ADDR</span><span class="pi">:</span> <span class="s">mysql</span>\n        <span class="na">DB_DATABASE</span><span class="pi">:</span> <span class="s">keycloak        ※ ↑のMYSQL_DATABASEに合わせる</span>\n        <span class="na">DB_USER</span><span class="pi">:</span> <span class="s">keycloak            ※ ↑のMYSQL_USERに合わせる</span>\n        <span class="na">DB_PASSWORD</span><span class="pi">:</span> <span class="s">password        ※ ↑のMYSQL_PASSWORDに合わせる</span>\n        <span class="na">KEYCLOAK_USER</span><span class="pi">:</span> <span class="s">admin         ※</span>\n        <span class="na">KEYCLOAK_PASSWORD</span><span class="pi">:</span> <span class="s">password  ※</span>\n      <span class="na">ports</span><span class="pi">:</span>\n        <span class="pi">-</span> <span class="s">8080:8080  ※</span>\n      <span class="na">depends_on</span><span class="pi">:</span>\n        <span class="pi">-</span> <span class="s">mysql</span>\n</code></pre></div></div>\n<div class="code-frame" data-lang="bash" data-sourcepos="47:1-49:3">\n<div class="code-lang"><span class="bold">bash</span></div>\n<div class="highlight"><pre><code><span class="nv">$ </span>docker-compose up <span class="nt">--build</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos="51:1-51:14">\n<span id="日本語化" class="fragment"></span><a href="#%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%8C%96"><i class="fa fa-link"></i></a>日本語化</h1>\n<ol data-sourcepos="53:1-78:0">\n<li data-sourcepos="53:1-53:98">\n<p data-sourcepos="53:4-53:98"><a href="http://localhost:8080" rel="nofollow noopener" target="_blank">localhost:8080</a>にアクセス(ポートは自分で決めたものに)</p>\n</li>\n<li data-sourcepos="54:1-57:0">\n<p data-sourcepos="54:4-54:34">Administration Consoleを選択</p>\n<p data-sourcepos="56:5-56:126"><a href="https://camo.qiitausercontent.com/560e1b659313106807233720098af4db7e9598d4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31303562616161302d623664332d333137302d356164612d6630323230333239393966652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F105baaa0-b6d3-3170-5ada-f022032999fe.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e87edd00066edf40fb8e96e000de50d3" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/105baaa0-b6d3-3170-5ada-f022032999fe.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F105baaa0-b6d3-3170-5ada-f022032999fe.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a80b23b7fcf7379834d72a78f777e0d1 1x" loading="lazy"></a></p>\n</li>\n<li data-sourcepos="58:1-61:0">\n<p data-sourcepos="58:4-58:90">docker-compose.ymlファイルで設定したユーザー名とパスワードで入る</p>\n<p data-sourcepos="60:5-60:126"><a href="https://camo.qiitausercontent.com/660e72c1fca49165e3207ea7588414d4df204095/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f66363036336137392d313961362d623630652d356363332d3762663966303538636539662e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Ff6063a79-19a6-b60e-5cc3-7bf9f058ce9f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=de6855cfe6e6ed2cb5ce2056f903fbab" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/f6063a79-19a6-b60e-5cc3-7bf9f058ce9f.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Ff6063a79-19a6-b60e-5cc3-7bf9f058ce9f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c93aa8b14b3585df62f1e9f2465b0ca0 1x" loading="lazy"></a></p>\n</li>\n<li data-sourcepos="62:1-65:0">\n<p data-sourcepos="62:4-62:54"><code>Master</code>レルムのまま<code>Realm Settings</code>を開く</p>\n<p data-sourcepos="64:5-64:126"><a href="https://camo.qiitausercontent.com/cb7907ccd41286d15d7f58cf88afd8a387821d94/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f34303661656432312d393634382d633331312d616366332d3033613930383539656263662e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F406aed21-9648-c311-acf3-03a90859ebcf.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f4242dc6490fe54996c9791d7f2ade6a" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/406aed21-9648-c311-acf3-03a90859ebcf.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F406aed21-9648-c311-acf3-03a90859ebcf.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8f75facd419b2c13c6b6344788e6bf97 1x" loading="lazy"></a></p>\n</li>\n<li data-sourcepos="66:1-69:0">\n<p data-sourcepos="66:4-66:106"><code>Themes</code>タブより、<code>Internationalization Enabled</code>をオンにし、<code>Default Locale</code>を<code>ja</code>にする</p>\n<p data-sourcepos="68:5-68:126"><a href="https://camo.qiitausercontent.com/2b58a804d582ddbb165a34776f270cd4dfc74a4e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f63386234376432312d666232352d363638652d326637362d3664353930303735333264382e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fc8b47d21-fb25-668e-2f76-6d59007532d8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=97e236498d7c687c8a5f9101afa5a9db" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/c8b47d21-fb25-668e-2f76-6d59007532d8.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fc8b47d21-fb25-668e-2f76-6d59007532d8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=25b6c42d3a54b18411c9f375a342a118 1x" loading="lazy"></a></p>\n</li>\n<li data-sourcepos="70:1-71:0">\n<p data-sourcepos="70:4-70:34">saveをしたら設定完了。</p>\n</li>\n<li data-sourcepos="72:1-78:0">\n<p data-sourcepos="72:4-72:97">一度右上のメニューから<code>Manage account</code>に移動すると日本語化されている</p>\n<p data-sourcepos="74:5-74:126"><a href="https://camo.qiitausercontent.com/9e28bec99db24f2e4117f61b29aeffc5d35c3677/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f35373236623865332d666337392d363762342d346438342d3039653061653235623237612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F5726b8e3-fc79-67b4-4d84-09e0ae25b27a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=486e2f9c862351bd4b9c0396c681ae74" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/5726b8e3-fc79-67b4-4d84-09e0ae25b27a.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F5726b8e3-fc79-67b4-4d84-09e0ae25b27a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ee92fa7fe819ec525bbe30e2b79ad802 1x" loading="lazy"></a></p>\n<p data-sourcepos="76:5-76:126"><a href="https://camo.qiitausercontent.com/b7576eb34b8995048c05a8e6aab7acffac9b02dd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f34313737643130372d666365652d353166312d666462352d3838373865633837353266662e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4177d107-fcee-51f1-fdb5-8878ec8752ff.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=69e4effbda582fe56fd93e16bc03a374" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4177d107-fcee-51f1-fdb5-8878ec8752ff.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4177d107-fcee-51f1-fdb5-8878ec8752ff.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7f42e7d9a64fac7727e25d90ae72a492 1x" loading="lazy"></a></p>\n</li>\n</ol>\n<h1 data-sourcepos="79:1-79:14">\n<span id="落とし穴" class="fragment"></span><a href="#%E8%90%BD%E3%81%A8%E3%81%97%E7%A9%B4"><i class="fa fa-link"></i></a>落とし穴</h1>\n<p data-sourcepos="81:1-82:132">自分の場合は先にレルムを作成し、そのレルムで設定を変更していました。<br>\nマスターの設定が優先されるのか、Masterレルムの言語設定を変えないと反映されない仕様でした。</p>\n<p data-sourcepos="85:1-85:108">意外と気が付けなかったので他にも落とし穴にはまっている人がいたらご参考に</p>\n',body:"# はじめに\n\n認証サーバーとして、KeyCloakを使い始めたのですが、\nネットに書いてある通りにやっても日本語化ができず、半ばあきらめていました。\n\nちょっとした落とし穴でしたが、他にも困っている方がいるかもしれないと思い記事にさせていただきました。\n\n\n# docker-composeでkeycloak構築\n\ndocker-compose.ymlファイルを作成し、以下をコピペ。\nただし、※の部分は自由に変更すること。(変えなくても動く)\n\n```yaml\nversion: '3'\n\nvolumes:\n  mysql_data:\n      driver: local\n\nservices:\n  mysql:\n      image: mysql:5.7\n      volumes:\n        - mysql_data:/var/lib/mysql\n      environment:\n        MYSQL_ROOT_PASSWORD: root   ※\n        MYSQL_DATABASE: keycloak    ※\n        MYSQL_USER: keycloak        ※\n        MYSQL_PASSWORD: password    ※\n  keycloak:\n      image: quay.io/keycloak/keycloak:legacy\n      environment:\n        DB_VENDOR: MYSQL\n        DB_ADDR: mysql\n        DB_DATABASE: keycloak        ※ ↑のMYSQL_DATABASEに合わせる\n        DB_USER: keycloak            ※ ↑のMYSQL_USERに合わせる\n        DB_PASSWORD: password        ※ ↑のMYSQL_PASSWORDに合わせる\n        KEYCLOAK_USER: admin         ※\n        KEYCLOAK_PASSWORD: password  ※\n      ports:\n        - 8080:8080  ※\n      depends_on:\n        - mysql\n```\n\n```bash:bash\n$ docker-compose up --build\n```\n\n# 日本語化\n\n1. [localhost:8080](http://localhost:8080)にアクセス(ポートは自分で決めたものに)\n1. Administration Consoleを選択\n\n    ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/105baaa0-b6d3-3170-5ada-f022032999fe.png)\n\n1. docker-compose.ymlファイルで設定したユーザー名とパスワードで入る\n\n    ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/f6063a79-19a6-b60e-5cc3-7bf9f058ce9f.png)\n\n1. `Master`レルムのまま`Realm Settings`を開く\n\n    ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/406aed21-9648-c311-acf3-03a90859ebcf.png)\n\n1. `Themes`タブより、`Internationalization Enabled`をオンにし、`Default Locale`を`ja`にする\n\n    ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/c8b47d21-fb25-668e-2f76-6d59007532d8.png)\n\n1. saveをしたら設定完了。\n\n1. 一度右上のメニューから`Manage account`に移動すると日本語化されている\n\n    ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/5726b8e3-fc79-67b4-4d84-09e0ae25b27a.png)\n    \n    ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4177d107-fcee-51f1-fdb5-8878ec8752ff.png)\n    \n\n# 落とし穴\n\n自分の場合は先にレルムを作成し、そのレルムで設定を変更していました。\nマスターの設定が優先されるのか、Masterレルムの言語設定を変えないと反映されない仕様でした。\n\n\n意外と気が付けなかったので他にも落とし穴にはまっている人がいたらご参考に\n",coediting:!1,comments_count:0,created_at:"2022-12-19T16:14:45+09:00",group:null,id:"7d39a05f0c7f22e103e2",likes_count:2,private:!1,reactions_count:0,stocks_count:1,tags:[{name:"Keycloak",versions:[]}],title:"KeyCloakマネジメントコンソール画面を日本語化するのに苦戦した話",updated_at:"2022-12-19T16:14:45+09:00",url:"https://qiita.com/maaaashi/items/7d39a05f0c7f22e103e2",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:1081,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:127">SvelteKitにはいくつか特殊なHTML要素が用意されています。<br>\n今回はその中でも<code>&lt;svelte:window&gt;</code> <code>&lt;svelte:head&gt;</code> <code>&lt;svelte:body&gt;</code>に焦点をあてて解説したいと思います。</p>\n<h1 data-sourcepos="6:1-6:19">\n<span id="sveltewindow" class="fragment"></span><a href="#sveltewindow"><i class="fa fa-link"></i></a><code>&lt;svelte:window&gt;</code>\n</h1>\n<p data-sourcepos="8:1-9:86"><code>&lt;button&gt;</code>タグに<code>on:click</code>などのイベントリスナーを追加できるように、<br>\n<code>window</code>に対してもイベントリスナーを追加することができます。</p>\n<p data-sourcepos="11:1-11:84">例えば<code>keydown</code>リスナーを追加し、押したkeyを表示してみます。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="13:1-22:3">\n<div class="code-lang"><span class="bold">+page.svelte</span></div>\n<div class="highlight"><pre><code>\n<span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="dl">\'\'</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;svelte:window</span> <span class="na">on:keydown=</span><span class="s">{(event)</span> <span class="err">=</span><span class="nt">&gt;</span> key = event.key}&gt;<span class="nt">&lt;/svelte:window&gt;</span>\n\n<span class="nt">&lt;h1&gt;</span>あなたが押したのは { key } ですね！<span class="nt">&lt;/h1&gt;</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="24:1-24:123"><a href="https://camo.qiitausercontent.com/ddf4c855dc0e59614c348a6a9b39f85af4d35fce/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f39323030356135342d343538372d356637652d663635312d3330663231336535323961342e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F92005a54-4587-5f7e-f651-30f213e529a4.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=980483006a6712e0bea821816e98f7dc" alt="window.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/92005a54-4587-5f7e-f651-30f213e529a4.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F92005a54-4587-5f7e-f651-30f213e529a4.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8bf2d7a96d5e538b49bc82b67c6c24a6 1x" loading="lazy"></a></p>\n<h1 data-sourcepos="26:1-26:17">\n<span id="sveltehead" class="fragment"></span><a href="#sveltehead"><i class="fa fa-link"></i></a><code>&lt;svelte:head&gt;</code>\n</h1>\n<p data-sourcepos="28:1-28:89"><code>&lt;svelte:head&gt;</code>を使うと、<code>&lt;head&gt;</code>内に要素を挿入することができます。</p>\n<p data-sourcepos="30:1-30:60">ページによってタイトルを変更してみます。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="32:1-36:3">\n<div class="code-lang"><span class="bold">/hogehoge/+page.svelte</span></div>\n<div class="highlight"><pre><code><span class="nt">&lt;svelte:head&gt;</span>\n  <span class="nt">&lt;title&gt;</span>hogehoge<span class="nt">&lt;/title&gt;</span>\n<span class="nt">&lt;/svelte:head&gt;</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="38:1-38:122"><a href="https://camo.qiitausercontent.com/3fea5da2f11b8bb114fdaf67e20afb2b556e0215/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f37373564336332362d666236362d326233312d376637612d3932343532313866353234372e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F775d3c26-fb66-2b31-7f7a-9245218f5247.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=36b47a948541102008df2a92eb44e91a" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/775d3c26-fb66-2b31-7f7a-9245218f5247.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F775d3c26-fb66-2b31-7f7a-9245218f5247.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9413917f766496074a4ece63f0b02285 1x" loading="lazy"></a></p>\n<div class="code-frame" data-lang="vue" data-sourcepos="40:1-44:3">\n<div class="code-lang"><span class="bold">/fugafuga/+page.svelte</span></div>\n<div class="highlight"><pre><code><span class="nt">&lt;svelte:head&gt;</span>\n  <span class="nt">&lt;title&gt;</span>fugafuga<span class="nt">&lt;/title&gt;</span>\n<span class="nt">&lt;/svelte:head&gt;</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="46:1-46:122"><a href="https://camo.qiitausercontent.com/e0717610402459499d02cdaa146cec1dea402ef3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f63353963313730632d613034662d343135302d383366382d3139373530376139396666312e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fc59c170c-a04f-4150-83f8-197507a99ff1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=96b2fc0c374bdd98bbba86a29af082bb" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/c59c170c-a04f-4150-83f8-197507a99ff1.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fc59c170c-a04f-4150-83f8-197507a99ff1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=74bf09c07f1b0d610a2f056ab0958847 1x" loading="lazy"></a></p>\n<p data-sourcepos="48:1-48:36">ちゃんと変わりましたね！</p>\n<h1 data-sourcepos="50:1-50:17">\n<span id="sveltebody" class="fragment"></span><a href="#sveltebody"><i class="fa fa-link"></i></a><code>&lt;svelte:body&gt;</code>\n</h1>\n<p data-sourcepos="52:1-53:84"><code>&lt;svelte:body&gt;</code>も<code>&lt;svelte:window&gt;</code>と同じような使い方ができます。<br>\n<code>body</code>に対してイベントリスナーを設定したいときに便利です。</p>\n<p data-sourcepos="55:1-55:78">例えば、ダブルクリックをした時の処理を入れてみます。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="57:1-59:3"><div class="highlight"><pre><code><span class="nt">&lt;svelte:body</span> <span class="na">on:dblclick=</span><span class="s">{()</span> <span class="err">=</span><span class="nt">&gt;</span> alert(\'ダブルクリックしましたね\')}/&gt;\n</code></pre></div></div>\n<p data-sourcepos="61:1-61:122"><a href="https://camo.qiitausercontent.com/ecde3cd7794adffacf2f2f1bf5cb33d28d2ca0e0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f39616336623431612d613564382d383530652d343763322d3235303263393332366134622e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F9ac6b41a-a5d8-850e-47c2-2502c9326a4b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=db89e10b2380f596f60f6b3e5e83836e" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/9ac6b41a-a5d8-850e-47c2-2502c9326a4b.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F9ac6b41a-a5d8-850e-47c2-2502c9326a4b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9b9da49d99383453166917850c75624d 1x" loading="lazy"></a></p>\n<p data-sourcepos="63:1-63:36">ちゃんと表示されました。</p>\n<p data-sourcepos="65:1-65:78">このように特殊なエレメントも用意されているんですね～</p>\n',body:"# はじめに\n\nSvelteKitにはいくつか特殊なHTML要素が用意されています。\n今回はその中でも`<svelte:window>` `<svelte:head>` `<svelte:body>`に焦点をあてて解説したいと思います。\n\n# `<svelte:window>`\n\n`<button>`タグに`on:click`などのイベントリスナーを追加できるように、\n`window`に対してもイベントリスナーを追加することができます。\n\n例えば`keydown`リスナーを追加し、押したkeyを表示してみます。\n\n```vue:+page.svelte\n\n<script lang=\"ts\">\n  let key = '';\n<\/script>\n\n<svelte:window on:keydown={(event) => key = event.key}></svelte:window>\n\n<h1>あなたが押したのは { key } ですね！</h1>\n```\n\n![window.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/92005a54-4587-5f7e-f651-30f213e529a4.gif)\n\n# `<svelte:head>`\n\n`<svelte:head>`を使うと、`<head>`内に要素を挿入することができます。\n\nページによってタイトルを変更してみます。\n\n```vue:/hogehoge/+page.svelte\n<svelte:head>\n  <title>hogehoge</title>\n</svelte:head>\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/775d3c26-fb66-2b31-7f7a-9245218f5247.png)\n\n```vue:/fugafuga/+page.svelte\n<svelte:head>\n  <title>fugafuga</title>\n</svelte:head>\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/c59c170c-a04f-4150-83f8-197507a99ff1.png)\n\nちゃんと変わりましたね！\n\n# `<svelte:body>`\n\n`<svelte:body>`も`<svelte:window>`と同じような使い方ができます。\n`body`に対してイベントリスナーを設定したいときに便利です。\n\n例えば、ダブルクリックをした時の処理を入れてみます。\n\n```vue\n<svelte:body on:dblclick={() => alert('ダブルクリックしましたね')}/>\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/9ac6b41a-a5d8-850e-47c2-2502c9326a4b.png)\n\nちゃんと表示されました。\n\nこのように特殊なエレメントも用意されているんですね～\n",coediting:!1,comments_count:0,created_at:"2022-12-17T21:15:10+09:00",group:null,id:"68cae04114c242951299",likes_count:2,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Svelte",versions:[]},{name:"SvelteKit",versions:[]}],title:"<svelte:window> <svelte:head> <svelte:body>について",updated_at:"2022-12-18T07:03:49+09:00",url:"https://qiita.com/maaaashi/items/68cae04114c242951299",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:1010,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-3:60">部署の新人からよくこんな話を聞きました。</p>\n<ul data-sourcepos="5:1-8:0">\n<li data-sourcepos="5:1-5:138">\n<code>Vite</code>+<code>Vue3</code>まではとある記事で導入できたが、違う記事で<code>Vuetify</code>の導入をしたらうまくいかない。。。</li>\n<li data-sourcepos="6:1-6:63">\n<code>vite.config.ts</code>とか、<code>tsconfig.json</code>って何ですか？</li>\n<li data-sourcepos="7:1-8:0">\n<code>node_modules</code>ってところで大量にgitの差分が出ます...</li>\n</ul>\n<p data-sourcepos="9:1-11:54">これはフロントエンドの技術力の底上げをしなければ、、！と思い、<br>\n部署の新人向けに<code>Vite</code>+<code>Vue3</code>+<code>Vuetify</code>の構築ハンズオン勉強会を開催しました。<br>\nその時のメモをこちらにも公開します。</p>\n<p data-sourcepos="13:1-13:93">同じような悩みを抱えた方の負担が少しでも解消されれば幸いです。</p>\n<h2 data-sourcepos="15:1-15:9">\n<span id="前提" class="fragment"></span><a href="#%E5%89%8D%E6%8F%90"><i class="fa fa-link"></i></a>前提</h2>\n<p data-sourcepos="17:1-17:49">Docker, docker-composeが入っていること。</p>\n<h2 data-sourcepos="19:1-19:26">\n<span id="vite--vue3環境構築" class="fragment"></span><a href="#vite--vue3%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89"><i class="fa fa-link"></i></a>Vite + Vue3環境構築</h2>\n<ol data-sourcepos="21:1-121:0">\n<li data-sourcepos="21:1-28:0">\n<p data-sourcepos="21:4-21:45">構築したいディレクトリに移動</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="23:5-27:7"><div class="highlight"><pre><code><span class="nv">$ </span><span class="nb">cd</span> /作業/パス/\n\n<span class="c"># 私は /var/www/hands-on/vue3にしました。</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="29:1-37:0">\n<p data-sourcepos="29:4-29:42">Dockerfile, docker-compose.ymlの作成</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="31:5-36:7"><div class="highlight"><pre><code><span class="c"># sudoつけないでね！</span>\n\n<span class="nv">$ </span><span class="nb">touch </span>Dockerfile\n<span class="nv">$ </span><span class="nb">touch </span>docker-compose.yml\n</code></pre></div></div>\n</li>\n<li data-sourcepos="38:1-52:0">\n<p data-sourcepos="38:4-38:34">Dockerfileに以下をコピペ</p>\n<div class="code-frame" data-lang="Dockerfile" data-sourcepos="40:5-51:7">\n<div class="code-lang"><span class="bold">Dockerfile</span></div>\n<div class="highlight"><pre><code><span class="k">FROM</span><span class="s"> node:19-alpine3.16</span>\n\n<span class="k">WORKDIR</span><span class="s"> /var/www/app</span>\n\n<span class="k">RUN </span>apk update <span class="o">&amp;&amp;</span> <span class="se">\\\n</span>    npm <span class="nb">install</span> <span class="nt">-g</span> npm @vue/cli\n\n<span class="k">USER</span><span class="s"> node</span>\n\n<span class="k">CMD</span><span class="s"> [ "npm", "run", "dev" ]</span>\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos="53:1-69:0">\n<p data-sourcepos="53:4-53:38">docker-composeに以下をコピペ</p>\n<div class="code-frame" data-lang="yaml" data-sourcepos="55:5-68:7">\n<div class="code-lang"><span class="bold">docker-compose.yml</span></div>\n<div class="highlight"><pre><code><span class="na">version</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">3\'</span>\n<span class="na">services</span><span class="pi">:</span>\n  <span class="na">app</span><span class="pi">:</span>\n    <span class="na">build</span><span class="pi">:</span>\n      <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>\n      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>\n    <span class="na">volumes</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">./front:/var/www/app</span>\n    <span class="na">ports</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s2">"</span><span class="s">8080:8080"</span>\n    <span class="na">stdin_open</span><span class="pi">:</span> <span class="kc">true</span>\n    <span class="na">tty</span><span class="pi">:</span> <span class="kc">true</span>\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos="70:1-77:0">\n<p data-sourcepos="70:4-70:54">アプリケーションディレクトリの作成</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="72:5-76:7"><div class="highlight"><pre><code><span class="c"># sudoつけないでね！</span>\n\n<span class="nv">$ </span><span class="nb">mkdir </span>front\n</code></pre></div></div>\n</li>\n<li data-sourcepos="78:1-92:0">\n<p data-sourcepos="78:4-78:36">Vite + Vue3 + TypeScriptの構築</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="80:5-91:7"><div class="highlight"><pre><code><span class="nv">$ </span>docker-compose build <span class="nt">--no-cache</span>\n<span class="nv">$ </span>docker-compose run app sh\n\n/var/www/app <span class="nv">$ </span>npm init vite@latest\n  バージョンの確認: <span class="o">(</span>y<span class="o">)</span> ⇒ y ⇒ enter\n  アプリ名: <span class="nb">.</span>   <span class="c"># 注意！Enterにしないこと</span>\n  フレームワーク: Vue\n               : TypeScript\n\n/var/www/app <span class="nv">$ </span>npm <span class="nb">install</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="93:1-110:0">\n<p data-sourcepos="93:4-93:26">vite.config.tsの修正</p>\n<p data-sourcepos="95:5-95:75">docker-composeで解放したportの指定と、hostをtrueにする。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="97:5-109:7">\n<div class="code-lang"><span class="bold">vite.config.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">defineConfig</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">vite</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="nx">vue</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@vitejs/plugin-vue</span><span class="dl">\'</span>\n\n<span class="c1">// https://vitejs.dev/config/</span>\n<span class="k">export</span> <span class="k">default</span> <span class="nf">defineConfig</span><span class="p">({</span>\n  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nf">vue</span><span class="p">()],</span>\n  <span class="na">server</span><span class="p">:</span> <span class="p">{</span>       <span class="c1">// 追加</span>\n    <span class="na">host</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// 追加</span>\n    <span class="na">port</span><span class="p">:</span> <span class="mi">8080</span>    <span class="c1">// 追加</span>\n  <span class="p">}</span>               <span class="c1">// 追加</span>\n<span class="p">})</span>\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos="111:1-121:0">\n<p data-sourcepos="111:4-111:21">サーバー起動</p>\n<p data-sourcepos="113:5-113:111">Dockerfileの起動コマンドで<code>npm run dev</code>を指定しているので、<code>docker-compose up</code>のみでOK</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="115:5-117:7"><div class="highlight"><pre><code><span class="nv">$ </span>docker-compose up\n</code></pre></div></div>\n<p data-sourcepos="119:5-120:82">起動できたはず！<br>\n起動できていない人はもう一度やり直してみてください。</p>\n</li>\n</ol>\n<h2 data-sourcepos="122:1-122:30">\n<span id="構成ファイルの説明" class="fragment"></span><a href="#%E6%A7%8B%E6%88%90%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%AA%AC%E6%98%8E"><i class="fa fa-link"></i></a>構成ファイルの説明</h2>\n<ul data-sourcepos="124:1-154:0">\n<li data-sourcepos="124:1-125:31">.vscode\n<ul data-sourcepos="125:3-125:31">\n<li data-sourcepos="125:3-125:31">vscodeの設定ファイル</li>\n</ul>\n</li>\n<li data-sourcepos="126:1-129:47">node_modules\n<ul data-sourcepos="127:3-129:47">\n<li data-sourcepos="127:3-127:113">npmやyarnを使ってインストールしてきたライブラリのコードが格納されています。</li>\n<li data-sourcepos="128:3-129:47">package.jsonでそれぞれが<code>npm install</code>で作るので、.gitignoreに入れてgitに載せないようにしましょう！\n<ul data-sourcepos="129:7-129:47">\n<li data-sourcepos="129:7-129:47">デフォルトでされています。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos="130:1-131:47">public\n<ul data-sourcepos="131:3-131:47">\n<li data-sourcepos="131:3-131:47">静的ファイル置き場(例) ロゴ.png</li>\n</ul>\n</li>\n<li data-sourcepos="132:1-133:64">src\n<ul data-sourcepos="133:3-133:64">\n<li data-sourcepos="133:3-133:64">アプリのソースコードが格納されています。</li>\n</ul>\n</li>\n<li data-sourcepos="134:1-135:49">.gitignore\n<ul data-sourcepos="135:3-135:49">\n<li data-sourcepos="135:3-135:49">gitで無視するものを指定します。</li>\n</ul>\n</li>\n<li data-sourcepos="136:1-137:46">index.html\n<ul data-sourcepos="137:3-137:46">\n<li data-sourcepos="137:3-137:46">エントリーポイントとなるもの</li>\n</ul>\n</li>\n<li data-sourcepos="138:1-139:94">package.json\n<ul data-sourcepos="139:3-139:94">\n<li data-sourcepos="139:3-139:94">インストールするパッケージの情報などが書かれた設定ファイル。</li>\n</ul>\n</li>\n<li data-sourcepos="140:1-142:44">package-lock.json\n<ul data-sourcepos="141:3-142:44">\n<li data-sourcepos="141:3-141:100">どんな依存関係で今動いているアプリが構成されているかのファイル。</li>\n<li data-sourcepos="142:3-142:44">yarnの時はyarn.lockになります。</li>\n</ul>\n</li>\n<li data-sourcepos="143:1-151:257">tsconfig.json\n<ul data-sourcepos="144:3-151:257">\n<li data-sourcepos="144:3-144:35">TypeScriptの構成ファイル</li>\n<li data-sourcepos="145:3-151:257">JavaScriptの前提知識も必要になるので、今はこんなものもあるんだ～くらいに思ってOK\n<ul data-sourcepos="146:5-151:257">\n<li data-sourcepos="146:5-146:65">target： 生成するJavaScriptコードのバージョン</li>\n<li data-sourcepos="147:5-147:62">module： 生成するJavaScriptモジュールの形式</li>\n<li data-sourcepos="148:5-148:184">noImplicitAny： trueに設定すると、TypeScriptの型推測でAny型となった式／宣言があったときにはエラーメッセージが生成されるようになる</li>\n<li data-sourcepos="149:5-149:46">outDir： 出力先のディレクトリ</li>\n<li data-sourcepos="150:5-150:153">rootDir： プロジェクトのルートディレクトリ（tscコマンドに渡すTypeScriptコードを含んだルートディレクトリ）</li>\n<li data-sourcepos="151:5-151:257">sourceMap： trueに設定すると、対応するソースマップファイル（.mapファイル。TypeScriptコードとそこから生成されたJavaScriptコードとの対応関係を記述したファイル）が生成されるようになる</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos="152:1-154:0">tsconfig.node.json\n<ul data-sourcepos="153:3-154:0">\n<li data-sourcepos="153:3-154:0">vite.config.ts等のライブラリの設定ファイルをtypescriptで書くための設定ファイル</li>\n</ul>\n</li>\n</ul>\n<h2 data-sourcepos="155:1-155:20">\n<span id="vuetify3の導入" class="fragment"></span><a href="#vuetify3%E3%81%AE%E5%B0%8E%E5%85%A5"><i class="fa fa-link"></i></a>Vuetify3の導入</h2>\n<div class="code-frame" data-lang="bash=" data-sourcepos="157:1-163:3"><div class="highlight"><pre><code>$ docker-compose exec app sh\n/var/www/app $ vue add vuetify\n  Vuetify 3 - Vite\n\n/var/www/app $ npm install\n</code></pre></div></div>\n<p data-sourcepos="165:1-165:15">かんせい！</p>\n<p data-sourcepos="167:1-167:122"><a href="https://camo.qiitausercontent.com/ab700d7e44f88fd23ca4db610003ae62ce81e707/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f65373761323834382d346430332d366537362d393363662d6162666366363338386531382e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe77a2848-4d03-6e76-93cf-abfcf6388e18.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=93c061a4e4561b2bea40094d4c1473b2" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e77a2848-4d03-6e76-93cf-abfcf6388e18.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe77a2848-4d03-6e76-93cf-abfcf6388e18.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=887401f90250e392c96c271596f356a9 1x" loading="lazy"></a></p>\n',body:'# はじめに\n\n部署の新人からよくこんな話を聞きました。\n\n* `Vite`+`Vue3`まではとある記事で導入できたが、違う記事で`Vuetify`の導入をしたらうまくいかない。。。\n* `vite.config.ts`とか、`tsconfig.json`って何ですか？\n* `node_modules`ってところで大量にgitの差分が出ます...\n\nこれはフロントエンドの技術力の底上げをしなければ、、！と思い、\n部署の新人向けに`Vite`+`Vue3`+`Vuetify`の構築ハンズオン勉強会を開催しました。\nその時のメモをこちらにも公開します。\n\n同じような悩みを抱えた方の負担が少しでも解消されれば幸いです。\n\n## 前提\n\nDocker, docker-composeが入っていること。\n\n## Vite + Vue3環境構築\n\n1. 構築したいディレクトリに移動\n    \n    ```bash\n    $ cd /作業/パス/\n    \n    # 私は /var/www/hands-on/vue3にしました。\n    ```\n\n1. Dockerfile, docker-compose.ymlの作成\n    \n    ```bash\n    # sudoつけないでね！\n    \n    $ touch Dockerfile\n    $ touch docker-compose.yml\n    ```\n\n1. Dockerfileに以下をコピペ\n    \n    ```Dockerfile:Dockerfile\n    FROM node:19-alpine3.16\n    \n    WORKDIR /var/www/app\n    \n    RUN apk update && \\\n        npm install -g npm @vue/cli\n    \n    USER node\n    \n    CMD [ "npm", "run", "dev" ]\n    ```\n\n1. docker-composeに以下をコピペ\n    \n    ```yaml:docker-compose.yml\n    version: \'3\'\n    services:\n      app:\n        build:\n          context: .\n          dockerfile: Dockerfile\n        volumes:\n          - ./front:/var/www/app\n        ports:\n          - "8080:8080"\n        stdin_open: true\n        tty: true\n    ```\n\n1. アプリケーションディレクトリの作成\n\n    ```bash\n    # sudoつけないでね！\n    \n    $ mkdir front\n    ```\n\n1. Vite + Vue3 + TypeScriptの構築\n\n    ```bash\n    $ docker-compose build --no-cache\n    $ docker-compose run app sh\n    \n    /var/www/app $ npm init vite@latest\n      バージョンの確認: (y) ⇒ y ⇒ enter\n      アプリ名: .   # 注意！Enterにしないこと\n      フレームワーク: Vue\n                   : TypeScript\n    \n    /var/www/app $ npm install\n    ```\n\n1. vite.config.tsの修正\n\n    docker-composeで解放したportの指定と、hostをtrueにする。\n\n    ```typescript:vite.config.ts\n    import { defineConfig } from \'vite\'\n    import vue from \'@vitejs/plugin-vue\'\n    \n    // https://vitejs.dev/config/\n    export default defineConfig({\n      plugins: [vue()],\n      server: {       // 追加\n        host: true,   // 追加\n        port: 8080    // 追加\n      }               // 追加\n    })\n    ```\n\n1. サーバー起動\n\n    Dockerfileの起動コマンドで`npm run dev`を指定しているので、`docker-compose up`のみでOK\n\n    ```bash\n    $ docker-compose up\n    ```\n\n    起動できたはず！\n    起動できていない人はもう一度やり直してみてください。\n\n## 構成ファイルの説明\n\n* .vscode\n  * vscodeの設定ファイル\n* node_modules\n  * npmやyarnを使ってインストールしてきたライブラリのコードが格納されています。\n  * package.jsonでそれぞれが`npm install`で作るので、.gitignoreに入れてgitに載せないようにしましょう！\n      * デフォルトでされています。\n* public\n  * 静的ファイル置き場(例) ロゴ.png\n* src\n  * アプリのソースコードが格納されています。\n* .gitignore\n  * gitで無視するものを指定します。\n* index.html\n  * エントリーポイントとなるもの\n* package.json\n  * インストールするパッケージの情報などが書かれた設定ファイル。\n* package-lock.json\n  * どんな依存関係で今動いているアプリが構成されているかのファイル。\n  * yarnの時はyarn.lockになります。\n* tsconfig.json\n  * TypeScriptの構成ファイル\n  * JavaScriptの前提知識も必要になるので、今はこんなものもあるんだ～くらいに思ってOK\n    * target： 生成するJavaScriptコードのバージョン\n    * module： 生成するJavaScriptモジュールの形式\n    * noImplicitAny： trueに設定すると、TypeScriptの型推測でAny型となった式／宣言があったときにはエラーメッセージが生成されるようになる\n    * outDir： 出力先のディレクトリ\n    * rootDir： プロジェクトのルートディレクトリ（tscコマンドに渡すTypeScriptコードを含んだルートディレクトリ）\n    * sourceMap： trueに設定すると、対応するソースマップファイル（.mapファイル。TypeScriptコードとそこから生成されたJavaScriptコードとの対応関係を記述したファイル）が生成されるようになる\n* tsconfig.node.json\n  * vite.config.ts等のライブラリの設定ファイルをtypescriptで書くための設定ファイル\n\n## Vuetify3の導入\n\n```bash=\n$ docker-compose exec app sh\n/var/www/app $ vue add vuetify\n  Vuetify 3 - Vite\n\n/var/www/app $ npm install\n```\n\nかんせい！\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e77a2848-4d03-6e76-93cf-abfcf6388e18.png)\n',coediting:!1,comments_count:0,created_at:"2022-12-16T20:23:07+09:00",group:null,id:"469be1ac350b35458d10",likes_count:7,private:!1,reactions_count:0,stocks_count:8,tags:[{name:"TypeScript",versions:[]},{name:"Vue.js",versions:[]},{name:"Vuetify",versions:[]},{name:"vite",versions:[]}],title:"新人向け: ViteでVue3+TypeScriptの構築とVuetifyの導入方法",updated_at:"2022-12-17T07:03:44+09:00",url:"https://qiita.com/maaaashi/items/469be1ac350b35458d10",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:2527,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-3:65">皆さんは<code>HTTP Cats</code>というものをご存じでしょうか</p>\n<p data-sourcepos="5:1-5:122"><a href="https://camo.qiitausercontent.com/552710ffc91e1492737c3a95f966e58f2c656b88/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f63623834346332312d343033662d306234302d653562322d6334356135623763376237362e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fcb844c21-403f-0b40-e5b2-c45a5b7c7b76.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8b30b6bd649f97e05bd2c0ea086ca284" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/cb844c21-403f-0b40-e5b2-c45a5b7c7b76.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fcb844c21-403f-0b40-e5b2-c45a5b7c7b76.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1a52e87d173136ce907d8e451866c635 1x" loading="lazy"></a></p>\n<p data-sourcepos="7:1-7:115">このように<code>https://http.cat/[status_code]</code>の<code>[status_code]</code>の部分に<code>200</code>みたいに入れることで...</p>\n<p data-sourcepos="9:1-9:121"><a href="https://camo.qiitausercontent.com/36b92ea5091f5f41525e91b1b3ee57e71047b704/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f37336162393235332d386361392d643163632d396536372d3166303039383938376666622e6a706567" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F73ab9253-8ca9-d1cc-9e67-1f0098987ffb.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4e56c7378daef827cad471ba9a0063ab" alt="200.jpg" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/73ab9253-8ca9-d1cc-9e67-1f0098987ffb.jpeg" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F73ab9253-8ca9-d1cc-9e67-1f0098987ffb.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f81b4437279f5cc390774284188ede45 1x" loading="lazy"></a></p>\n<p data-sourcepos="11:1-11:90">のように猫の画像＋ステータスコードを表示することができます。</p>\n<p data-sourcepos="13:1-13:158"><code>SvelteKit</code>の<code>+error.svelte</code>というエラー時に表示させるページにこの猫ちゃんを登場させて、エラーページを和ませたい。</p>\n<h1 data-sourcepos="16:1-16:8">\n<span id="実装" class="fragment"></span><a href="#%E5%AE%9F%E8%A3%85"><i class="fa fa-link"></i></a>実装</h1>\n<div class="code-frame" data-lang="vue" data-sourcepos="18:1-24:3">\n<div class="code-lang"><span class="bold">+error.svelte</span></div>\n<div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">page</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">$app/stores</span><span class="dl">\'</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"https://http.cat/{$page.status}"</span> <span class="na">alt=</span><span class="s">"{$page.status}_cat"</span><span class="nt">&gt;</span>\n</code></pre></div>\n</div>\n<p data-sourcepos="26:1-26:15">終わり...ｗ</p>\n<h3 data-sourcepos="28:1-28:7">\n<span id="404" class="fragment"></span><a href="#404"><i class="fa fa-link"></i></a>404</h3>\n<p data-sourcepos="30:1-30:122"><a href="https://camo.qiitausercontent.com/cd7f6d22303c136e38debb78bbddc63497cd80f1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f32666334393835652d303634302d323365322d633434622d3164346336663337353639312e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F2fc4985e-0640-23e2-c44b-1d4c6f375691.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=71997c3c3bd45ceb0d2a7d28d019a6e9" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/2fc4985e-0640-23e2-c44b-1d4c6f375691.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F2fc4985e-0640-23e2-c44b-1d4c6f375691.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=00b52527501dd8d34c7597a914f78d4f 1x" loading="lazy"></a></p>\n<h3 data-sourcepos="32:1-32:7">\n<span id="500" class="fragment"></span><a href="#500"><i class="fa fa-link"></i></a>500</h3>\n<p data-sourcepos="34:1-34:122"><a href="https://camo.qiitausercontent.com/b08eb50916733fa8775cea26ac42524b8b377bb6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f61336666653637372d326533382d656635342d333033332d3735313437656333373963342e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa3ffe677-2e38-ef54-3033-75147ec379c4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6b16c52edcd85c7cd91486ac8af09b15" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a3ffe677-2e38-ef54-3033-75147ec379c4.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa3ffe677-2e38-ef54-3033-75147ec379c4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=804b278698f0c0e5e2b8b677a25e86a2 1x" loading="lazy"></a></p>\n<p data-sourcepos="36:1-36:74"><code>SvelteKit</code>さえ構築できれば誰でも実装できそうですね。</p>\n',body:'# はじめに\n\n皆さんは`HTTP Cats`というものをご存じでしょうか\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/cb844c21-403f-0b40-e5b2-c45a5b7c7b76.png)\n\nこのように`https://http.cat/[status_code]`の`[status_code]`の部分に`200`みたいに入れることで...\n\n![200.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/73ab9253-8ca9-d1cc-9e67-1f0098987ffb.jpeg)\n\nのように猫の画像＋ステータスコードを表示することができます。\n\n`SvelteKit`の`+error.svelte`というエラー時に表示させるページにこの猫ちゃんを登場させて、エラーページを和ませたい。\n\n\n# 実装\n\n```vue:+error.svelte\n<script>\n  import { page } from \'$app/stores\';\n<\/script>\n\n<img src="https://http.cat/{$page.status}" alt="{$page.status}_cat">\n```\n\n終わり...ｗ\n\n### 404\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/2fc4985e-0640-23e2-c44b-1d4c6f375691.png)\n\n### 500\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a3ffe677-2e38-ef54-3033-75147ec379c4.png)\n\n`SvelteKit`さえ構築できれば誰でも実装できそうですね。\n\n',coediting:!1,comments_count:0,created_at:"2022-12-15T21:07:47+09:00",group:null,id:"c86f9ac25c1313edcb87",likes_count:2,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Svelte",versions:[]},{name:"SvelteKit",versions:[]}],title:"ちょっと一息。SvelteKitのエラーページを猫に頼んでみた。",updated_at:"2022-12-16T07:43:04+09:00",url:"https://qiita.com/maaaashi/items/c86f9ac25c1313edcb87",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:768,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:53">supabaseを用いてシステムを開発している中で、サインインのプロバイダーとしてGithubを選べることを発見。<br>\nOauth認証を実装したのでその時のメモ。</p>\n<h1 data-sourcepos="6:1-6:17">\n<span id="使ったもの" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>使ったもの</h1>\n<ul data-sourcepos="8:1-16:0">\n<li data-sourcepos="8:1-11:18">Vite + SvelteKit + Typescript\n<ul data-sourcepos="9:5-11:18">\n<li data-sourcepos="9:5-9:27">@supabase/supabase-js</li>\n<li data-sourcepos="10:5-10:21">Flowbite-svelte</li>\n<li data-sourcepos="11:5-11:18">tailwind css</li>\n</ul>\n</li>\n<li data-sourcepos="12:1-16:0">supabase\n<ul data-sourcepos="13:5-16:0">\n<li data-sourcepos="13:5-13:10">auth</li>\n<li data-sourcepos="14:5-14:8">db</li>\n<li data-sourcepos="15:5-16:0">storage</li>\n</ul>\n</li>\n</ul>\n<p data-sourcepos="17:1-17:80">※前提として、supabaseのプロジェクトが存在していること。</p>\n<h1 data-sourcepos="19:1-19:11">\n<span id="前準備" class="fragment"></span><a href="#%E5%89%8D%E6%BA%96%E5%82%99"><i class="fa fa-link"></i></a>前準備</h1>\n<ol data-sourcepos="21:1-25:0">\n<li data-sourcepos="21:1-21:50">supabaseのプロジェクトページに入る</li>\n<li data-sourcepos="22:1-23:126">\n<code>Auth</code>のページに入り、<code>Providers</code>から、<code>GitHub</code>を見つける<br>\n　 <a href="https://camo.qiitausercontent.com/ec7c8240e8e96d8e8be2fb12e39bacc73310b149/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f33373531623937662d356362382d613062302d353035642d3664646138303936616436652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F3751b97f-5cb8-a0b0-505d-6dda8096ad6e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c48e03bb0e6824c907b98eac92465df3" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/3751b97f-5cb8-a0b0-505d-6dda8096ad6e.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F3751b97f-5cb8-a0b0-505d-6dda8096ad6e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0d3eaf184689b7a356a4223f96a6c696 1x" loading="lazy"></a>\n</li>\n<li data-sourcepos="24:1-25:0">それを開き、<code>RedirectURL</code>の欄をコピーしておく。</li>\n</ol>\n<h1 data-sourcepos="26:1-26:8">\n<span id="設定" class="fragment"></span><a href="#%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>設定</h1>\n<ol data-sourcepos="28:1-44:0">\n<li data-sourcepos="28:1-28:30">GitHubにログインする</li>\n<li data-sourcepos="29:1-29:70">右上の自分のアイコン &gt; <code>settings</code>で設定画面を開く</li>\n<li data-sourcepos="30:1-31:122">サイドメニューの一番下、<code>Developers setting</code>を開く<br>\n<a href="https://camo.qiitausercontent.com/e71de7bf75ed8d07803284e2127dcb92491ba875/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f64363265623438622d313534392d636532642d323638362d6666396163613363376461632e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fd62eb48b-1549-ce2d-2686-ff9aca3c7dac.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b0fab71d5a2c27a283cd3770b788b2d5" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/d62eb48b-1549-ce2d-2686-ff9aca3c7dac.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fd62eb48b-1549-ce2d-2686-ff9aca3c7dac.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=087db5c58618690d8201fdd8101702ef 1x" loading="lazy"></a>\n</li>\n<li data-sourcepos="32:1-33:122">\n<code>Oauth Apps</code>を選択<br>\n<a href="https://camo.qiitausercontent.com/c6cba52ad26503317f1dc42604399aefd071d2be/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f65653131393131652d313234652d343233632d333839312d3432653864343665636535662e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fee11911e-124e-423c-3891-42e8d46ece5f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=45e853566826398bef7996d0242a3c54" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/ee11911e-124e-423c-3891-42e8d46ece5f.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fee11911e-124e-423c-3891-42e8d46ece5f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=20fa964733f179ebb345a3be92934bf3 1x" loading="lazy"></a>\n</li>\n<li data-sourcepos="34:1-34:55">\n<code>NewOauthApp</code>より、新規作成画面に入る。</li>\n<li data-sourcepos="35:1-39:73">以下を入力し、作成する。<br>\n　<code>Application name</code>: 好き名前を登録(自分はSupabaseとしました)<br>\n　<code>Homepage URL</code>: 搭載予定のURLを登録<br>\n　<code>Application description</code>: そのアプリの説明を記入(任意)<br>\n　<code>Authorization callback URL</code>: 前準備でコピーした値を入力</li>\n<li data-sourcepos="40:1-41:82">作成されたら、<code>ClientID</code>と<code>Client secrets</code>をコピーする<br>\n　※ Client secretsは<code>Generate a new client secret</code>から作成すること。</li>\n<li data-sourcepos="42:1-44:0">コピーした<code>ClientID</code>と<code>Client secrets</code>を<code>Supabase</code>の<code>providers</code>に登録し、<code>save</code>する。<br>\n<a href="https://camo.qiitausercontent.com/ae36ac3ec853cc88ae090fea25d0e8e36132ef83/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f30333732663738322d626361342d323735392d396666302d3430393236643339383332612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0372f782-bca4-2759-9ff0-40926d39832a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4d7b0a942ffc998dcf1a9556d3eda70b" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0372f782-bca4-2759-9ff0-40926d39832a.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0372f782-bca4-2759-9ff0-40926d39832a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1591297c5783efb4c4851bdcf14cf8b1 1x" loading="lazy"></a>\n</li>\n</ol>\n<p data-sourcepos="45:1-45:30">EnabledになっていればOK</p>\n<p data-sourcepos="47:1-47:122"><a href="https://camo.qiitausercontent.com/e887d409c3ca3875b496b3afab307cbb4c68e09b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f64356130373062322d663666652d306332322d356333312d6330313238343563633962302e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fd5a070b2-f6fe-0c22-5c31-c012845cc9b0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d6c85a53604c42a097a8056814bf1516" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/d5a070b2-f6fe-0c22-5c31-c012845cc9b0.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fd5a070b2-f6fe-0c22-5c31-c012845cc9b0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6a7066874c19019ed4bf874d6275f414 1x" loading="lazy"></a></p>\n<h1 data-sourcepos="50:1-50:17">\n<span id="フロント側" class="fragment"></span><a href="#%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4"><i class="fa fa-link"></i></a>フロント側</h1>\n<p data-sourcepos="52:1-53:54">UIコンポーネントには<a href="https://flowbite-svelte.com/" rel="nofollow noopener" target="_blank">Flowbite-svelte</a>を利用しました。<br>\n導入方法は前の記事で公開しています。</p>\n<p data-sourcepos="55:1-55:55"><iframe id="qiita-embed-content__31000b865c99d80147bc511dd7d241ab" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__31000b865c99d80147bc511dd7d241ab" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2F6e7e8571cc6c3d7ad2e8" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="57:1-63:3"><div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">GitHubSignIn</span> <span class="o">=</span> <span class="nf">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="k">await</span> <span class="nx">supabase</span><span class="p">.</span><span class="nx">auth</span><span class="p">.</span><span class="nf">signInWithOAuth</span><span class="p">({</span>\n    <span class="na">provider</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">github</span><span class="dl">\'</span><span class="p">,</span>\n  <span class="p">})</span>\n<span class="p">}</span>\n</code></pre></div></div>\n<div class="code-frame" data-lang="vue" data-sourcepos="65:1-72:3"><div class="highlight"><pre><code><span class="nt">&lt;Button</span> <span class="na">color=</span><span class="s">"light"</span> <span class="na">class=</span><span class="s">"w-full mt-5 btn btn-filled-surface"</span> <span class="na">on:click=</span><span class="s">{GitHubSignIn}</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"h-5 mr-3"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;FaGithub</span> <span class="nt">/&gt;</span>\n  <span class="nt">&lt;/span&gt;</span>\n  GitHubでログイン\n<span class="nt">&lt;/Button&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="74:1-74:18">実装完了！！</p>\n<p data-sourcepos="76:1-76:33">え、、めっちゃ簡単！！</p>\n<p data-sourcepos="78:1-78:122"><a href="https://camo.qiitausercontent.com/8953cd74181aadda4d5f02990d963e35f6df6774/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f35663563343562362d396661352d316334372d633262342d3964316532353761393761662e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F5f5c45b6-9fa5-1c47-c2b4-9d1e257a97af.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e1ef6d3561025a479cba79c0a012fabf" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/5f5c45b6-9fa5-1c47-c2b4-9d1e257a97af.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F5f5c45b6-9fa5-1c47-c2b4-9d1e257a97af.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3205f16733bf813fa243ec5da331c5c1 1x" loading="lazy"></a></p>\n<p data-sourcepos="80:1-80:15">クリック後</p>\n<p data-sourcepos="82:1-82:122"><a href="https://camo.qiitausercontent.com/ad634a872db055745e39062cb21a5ee1cc2063af/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f34633966376130642d383763372d663637302d356234392d6433623563353833393139382e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4c9f7a0d-87c7-f670-5b49-d3b5c5839198.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5757e4a2218242b3c5d9fd958b689608" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4c9f7a0d-87c7-f670-5b49-d3b5c5839198.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4c9f7a0d-87c7-f670-5b49-d3b5c5839198.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f79fbcd1b10a76f90d528a72d09f07c3 1x" loading="lazy"></a></p>\n<p data-sourcepos="85:1-85:90"><code>Authorize ---</code>のボタンをクリックしたらサインインが完了しました！</p>\n',body:'# はじめに\n\nsupabaseを用いてシステムを開発している中で、サインインのプロバイダーとしてGithubを選べることを発見。\nOauth認証を実装したのでその時のメモ。\n\n# 使ったもの\n\n* Vite + SvelteKit + Typescript\n    * @supabase/supabase-js\n    * Flowbite-svelte\n    * tailwind css\n* supabase\n    * auth\n    * db\n    * storage\n\n※前提として、supabaseのプロジェクトが存在していること。\n\n# 前準備\n\n1. supabaseのプロジェクトページに入る\n1. `Auth`のページに入り、`Providers`から、`GitHub`を見つける\n　 ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/3751b97f-5cb8-a0b0-505d-6dda8096ad6e.png)\n1. それを開き、`RedirectURL`の欄をコピーしておく。\n\n# 設定\n\n1. GitHubにログインする\n1. 右上の自分のアイコン > `settings`で設定画面を開く\n1. サイドメニューの一番下、`Developers setting`を開く\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/d62eb48b-1549-ce2d-2686-ff9aca3c7dac.png)\n1. `Oauth Apps`を選択\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/ee11911e-124e-423c-3891-42e8d46ece5f.png)\n1. `NewOauthApp`より、新規作成画面に入る。\n1. 以下を入力し、作成する。\n 　`Application name`: 好き名前を登録(自分はSupabaseとしました)\n 　`Homepage URL`: 搭載予定のURLを登録\n 　`Application description`: そのアプリの説明を記入(任意)\n 　`Authorization callback URL`: 前準備でコピーした値を入力\n1. 作成されたら、`ClientID`と`Client secrets`をコピーする\n 　※ Client secretsは`Generate a new client secret`から作成すること。\n1. コピーした`ClientID`と`Client secrets`を`Supabase`の`providers`に登録し、`save`する。\n   ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0372f782-bca4-2759-9ff0-40926d39832a.png)\n\nEnabledになっていればOK\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/d5a070b2-f6fe-0c22-5c31-c012845cc9b0.png)\n\n\n# フロント側\n\nUIコンポーネントには[Flowbite-svelte](https://flowbite-svelte.com/)を利用しました。\n導入方法は前の記事で公開しています。\n\nhttps://qiita.com/doyaseizin/items/6e7e8571cc6c3d7ad2e8\n\n```typescript\nconst GitHubSignIn = async () => {\n  await supabase.auth.signInWithOAuth({\n    provider: \'github\',\n  })\n}\n```\n\n```vue\n<Button color="light" class="w-full mt-5 btn btn-filled-surface" on:click={GitHubSignIn}>\n  <span class="h-5 mr-3">\n    <FaGithub />\n  </span>\n  GitHubでログイン\n</Button>\n```\n\n実装完了！！\n\nえ、、めっちゃ簡単！！\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/5f5c45b6-9fa5-1c47-c2b4-9d1e257a97af.png)\n\nクリック後\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4c9f7a0d-87c7-f670-5b49-d3b5c5839198.png)\n\n\n`Authorize ---`のボタンをクリックしたらサインインが完了しました！\n\n',coediting:!1,comments_count:0,created_at:"2022-12-15T13:07:16+09:00",group:null,id:"05b4226f228a31088550",likes_count:1,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Svelte",versions:[]},{name:"Supabase",versions:[]},{name:"SvelteKit",versions:[]}],title:"Supabase GitHubでログイン - Oauth認証",updated_at:"2022-12-15T19:21:50+09:00",url:"https://qiita.com/maaaashi/items/05b4226f228a31088550",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:1178,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-3:59"><code>SvelteKit</code>のブロックについてまとめました。</p>\n<ul data-sourcepos="5:1-11:0">\n<li data-sourcepos="5:1-5:4">If</li>\n<li data-sourcepos="6:1-6:6">Else</li>\n<li data-sourcepos="7:1-7:9">Else if</li>\n<li data-sourcepos="8:1-8:6">Each</li>\n<li data-sourcepos="9:1-9:5">Key</li>\n<li data-sourcepos="10:1-11:0">Await</li>\n</ul>\n<h2 data-sourcepos="12:1-12:21">\n<span id="つかったもの" class="fragment"></span><a href="#%E3%81%A4%E3%81%8B%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>つかったもの</h2>\n<ul data-sourcepos="14:1-17:0">\n<li data-sourcepos="14:1-17:0">Vite + SvelteKit + Typescript\n<ul data-sourcepos="15:5-17:0">\n<li data-sourcepos="15:5-15:21">Flowbite-svelte</li>\n<li data-sourcepos="16:5-17:0">tailwind css</li>\n</ul>\n</li>\n</ul>\n<p data-sourcepos="18:1-19:54">UIコンポーネントには<a href="https://flowbite-svelte.com/" rel="nofollow noopener" target="_blank">Flowbite-svelte</a>を利用しました。<br>\n導入方法は前の記事で公開しています。</p>\n<p data-sourcepos="21:1-21:55"><iframe id="qiita-embed-content__cafadd92b043d3a776ce54b373e01a71" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__cafadd92b043d3a776ce54b373e01a71" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2F6e7e8571cc6c3d7ad2e8" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<h2 data-sourcepos="23:1-23:5">\n<span id="if" class="fragment"></span><a href="#if"><i class="fa fa-link"></i></a>If</h2>\n<div class="code-frame" data-lang="vue" data-sourcepos="25:1-43:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">flowbite-svelte</span><span class="dl">"</span><span class="p">;</span>\n\n  <span class="kd">let</span> <span class="nx">bool</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n{#if bool}\n\t<span class="nt">&lt;Button</span> <span class="na">color=</span><span class="s">"blue"</span> <span class="na">on:click=</span><span class="s">{()</span> <span class="err">=</span><span class="nt">&gt;</span> bool = !bool}&gt;\n\t\tTRUE\n\t<span class="nt">&lt;/Button&gt;</span>\n{/if}\n\n{#if !bool}\n\t<span class="nt">&lt;Button</span> <span class="na">color=</span><span class="s">"green"</span> <span class="na">on:click=</span><span class="s">{()</span> <span class="err">=</span><span class="nt">&gt;</span> bool = !bool}&gt;\n\t\tFALSE\n\t<span class="nt">&lt;/Button&gt;</span>\n{/if}\n</code></pre></div></div>\n<p data-sourcepos="45:1-45:119"><a href="https://camo.qiitausercontent.com/82721a87dfacc33e6011844c90810c90d39afbf3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f63666432303639382d323735652d626466382d343766622d3439363461623664383837642e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fcfd20698-275e-bdf8-47fb-4964ab6d887d.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d96293272d200a1b8583a01d638229be" alt="if.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/cfd20698-275e-bdf8-47fb-4964ab6d887d.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fcfd20698-275e-bdf8-47fb-4964ab6d887d.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b800fdf6cb35d8427c2b9936e6065236 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="47:1-47:7">\n<span id="else" class="fragment"></span><a href="#else"><i class="fa fa-link"></i></a>Else</h2>\n<div class="code-frame" data-lang="vue" data-sourcepos="49:1-65:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">flowbite-svelte</span><span class="dl">"</span><span class="p">;</span>\n\n\t<span class="kd">let</span> <span class="nx">bool</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n{#if bool}\n\t<span class="nt">&lt;Button</span> <span class="na">color=</span><span class="s">"blue"</span> <span class="na">on:click=</span><span class="s">{()</span> <span class="err">=</span><span class="nt">&gt;</span> bool = !bool}&gt;\n\t\tTRUE\n\t<span class="nt">&lt;/Button&gt;</span>\n{:else}\n\t<span class="nt">&lt;Button</span> <span class="na">color=</span><span class="s">"green"</span> <span class="na">on:click=</span><span class="s">{()</span> <span class="err">=</span><span class="nt">&gt;</span> bool = !bool}&gt;\n\t\tFALSE\n\t<span class="nt">&lt;/Button&gt;</span>\n{/if}\n</code></pre></div></div>\n<p data-sourcepos="66:1-66:119"><a href="https://camo.qiitausercontent.com/b56108da78995925622adf2ad11d5111db3f747d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f37636637383839372d306562632d333431622d393930652d3263343133373132336337302e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F7cf78897-0ebc-341b-990e-2c4137123c70.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e661dc4b58af5c515ff5838542e7a85a" alt="if.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/7cf78897-0ebc-341b-990e-2c4137123c70.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F7cf78897-0ebc-341b-990e-2c4137123c70.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=952e4537c9c3ed04425e6021edd73d6d 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="68:1-68:10">\n<span id="else-if" class="fragment"></span><a href="#else-if"><i class="fa fa-link"></i></a>Else if</h2>\n<div class="code-frame" data-lang="vue" data-sourcepos="70:1-90:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">flowbite-svelte</span><span class="dl">"</span><span class="p">;</span>\n\n\t<span class="kd">let</span> <span class="nx">color</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">blue</span><span class="dl">\'</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n{#if color === \'blue\'}\n\t<span class="nt">&lt;Button</span> <span class="na">color=</span><span class="s">"blue"</span> <span class="na">on:click=</span><span class="s">{()</span> <span class="err">=</span><span class="nt">&gt;</span> color = \'green\'}&gt;\n\t\tBlue\n\t<span class="nt">&lt;/Button&gt;</span>\n{:else if color === \'green\'}\n\t<span class="nt">&lt;Button</span> <span class="na">color=</span><span class="s">"green"</span> <span class="na">on:click=</span><span class="s">{()</span> <span class="err">=</span><span class="nt">&gt;</span> color = \'red\'}&gt;\n\t\tGreen\n\t<span class="nt">&lt;/Button&gt;</span>\n{:else}\n\t<span class="nt">&lt;Button</span> <span class="na">color=</span><span class="s">"red"</span> <span class="na">on:click=</span><span class="s">{()</span> <span class="err">=</span><span class="nt">&gt;</span> color = \'blue\'}&gt;\n\t\tRed\n\t<span class="nt">&lt;/Button&gt;</span>\n{/if}\n</code></pre></div></div>\n<p data-sourcepos="92:1-92:124"><a href="https://camo.qiitausercontent.com/bafd03069fa225035827f47e0b4f9c7755d4aa34/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f32383835363561652d376539322d633362362d386537652d3761663435376230326662352e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F288565ae-7e92-c3b6-8e7e-7af457b02fb5.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=97b4763820624c8475d1666640f01553" alt="else if.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/288565ae-7e92-c3b6-8e7e-7af457b02fb5.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F288565ae-7e92-c3b6-8e7e-7af457b02fb5.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ab83e79a0cd23d4936c3eb2f36b4df91 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="94:1-94:7">\n<span id="each" class="fragment"></span><a href="#each"><i class="fa fa-link"></i></a>Each</h2>\n<div class="code-frame" data-lang="vue" data-sourcepos="96:1-106:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n\t<span class="kd">let</span> <span class="nb">Array</span> <span class="o">=</span> <span class="p">[</span> <span class="dl">\'</span><span class="s1">田中</span><span class="dl">\'</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">鈴木</span><span class="dl">\'</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">佐藤</span><span class="dl">\'</span><span class="p">];</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n{#each Array as\tname, index }\n\t<span class="nt">&lt;p&gt;</span>\n\t\t{index}: {name}\n\t<span class="nt">&lt;/p&gt;</span>\n{/each}\n</code></pre></div></div>\n<p data-sourcepos="108:1-108:52"><code>index</code>を指定するときは↑のようにする</p>\n<p data-sourcepos="110:1-110:122"><a href="https://camo.qiitausercontent.com/0ac6572fed59f39104e49696c67caed1f9f05983/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f39643838623731322d323366352d373266382d383464332d3933393963333264323765342e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F9d88b712-23f5-72f8-84d3-9399c32d27e4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8b75951028fcb6b96ff2c78dbb38cb80" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/9d88b712-23f5-72f8-84d3-9399c32d27e4.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F9d88b712-23f5-72f8-84d3-9399c32d27e4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d2bd9bc14af38172851f90794f534607 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="112:1-112:6">\n<span id="key" class="fragment"></span><a href="#key"><i class="fa fa-link"></i></a>Key</h2>\n<div class="code-frame" data-lang="vue" data-sourcepos="114:1-118:3"><div class="highlight"><pre><code>{#key value}\n    ・・・\n{/key}\n</code></pre></div></div>\n<p data-sourcepos="120:1-121:81">valueが変化すると中のブロックが再表示されます。<br>\nとある変化を拾い、再表示したいしたい時に使えそうです。</p>\n<p data-sourcepos="123:1-123:48">アニメーションで使ってみました。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="125:1-150:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">Button</span><span class="p">,</span> <span class="nx">Select</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">flowbite-svelte</span><span class="dl">"</span><span class="p">;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">fly</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">svelte/transition</span><span class="dl">"</span><span class="p">;</span>\n\n  <span class="kd">let</span> <span class="nx">duration</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>\n\n  <span class="kd">let</span> <span class="nx">durations</span> <span class="o">=</span> <span class="p">[</span>\n    <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">早い</span><span class="dl">\'</span><span class="p">},</span>\n    <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">通常</span><span class="dl">\'</span><span class="p">},</span>\n    <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="mi">1000</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">遅い</span><span class="dl">\'</span><span class="p">},</span>\n  <span class="p">]</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex"</span><span class="nt">&gt;</span>\n  {#key duration}\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"w-1/5"</span> <span class="na">in:fly=</span><span class="s">{{</span> <span class="na">duration:</span> <span class="na">duration</span><span class="err">,</span> <span class="na">y:</span> <span class="err">200</span> <span class="err">}}</span><span class="nt">&gt;</span>\n      <span class="nt">&lt;Button</span> <span class="na">color=</span><span class="s">"light"</span><span class="nt">&gt;</span>\n        登録\n      <span class="nt">&lt;/Button&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n  {/key}\n\n  <span class="nt">&lt;Select</span> <span class="na">class=</span><span class="s">"w-4/5"</span> <span class="na">items=</span><span class="s">{durations}</span> <span class="na">bind:value=</span><span class="s">{duration}</span> <span class="nt">/&gt;</span>\n<span class="nt">&lt;/div&gt;</span>  \n</code></pre></div></div>\n<p data-sourcepos="152:1-152:120"><a href="https://camo.qiitausercontent.com/5ae7db1d2a2e160f42d42135e030a40fe4998edc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f35643839393565322d396136322d313465332d326231362d3239393561323232663163662e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F5d8995e2-9a62-14e3-2b16-2995a222f1cf.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5d32ea3bc97de49b9561bef55cc25250" alt="key.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/5d8995e2-9a62-14e3-2b16-2995a222f1cf.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F5d8995e2-9a62-14e3-2b16-2995a222f1cf.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=eff4c32da782b26559bb9b7ae8af8d26 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="154:1-154:8">\n<span id="await" class="fragment"></span><a href="#await"><i class="fa fa-link"></i></a>Await</h2>\n<p data-sourcepos="156:1-157:84">普段Promiseを使っていると、ありがちなThenブロックが繋がりまくって可読性が低くなる現象をスッキリかけます<br>\nデモとして犬の画像をランダムに拾ってくるようにしました。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="159:1-178:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">async</span> <span class="kd">function</span> <span class="nf">getDog</span><span class="p">()</span> <span class="p">{</span>\n    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="s2">`https://dog.ceo/api/breeds/image/random/1`</span><span class="p">);</span>\n    <span class="kd">const</span> <span class="nx">text</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">res</span><span class="p">.</span><span class="nf">text</span><span class="p">();</span>\n\n    <span class="nf">if </span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">ok</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">return</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">text</span><span class="p">).</span><span class="nx">message</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n{#await getDog()}\n  <span class="nt">&lt;p&gt;</span>...waiting<span class="nt">&lt;/p&gt;</span>\n{:then url}\n  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"{url}"</span> <span class="na">width=</span><span class="s">"200"</span> <span class="na">alt=</span><span class="s">"犬の画像"</span><span class="nt">&gt;</span>\n{:catch error}\n  <span class="nt">&lt;p</span> <span class="na">style=</span><span class="s">"color: red"</span><span class="nt">&gt;</span>{error.message}<span class="nt">&lt;/p&gt;</span>\n{/await}\n</code></pre></div></div>\n<p data-sourcepos="180:1-180:36">かなりすっきりしますね！</p>\n<p data-sourcepos="183:1-183:120"><a href="https://camo.qiitausercontent.com/4e80c2e6451324185776a7c97c94dc97635e4a8d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f37353962373539382d353232392d356231392d313730652d6462323133323538313732362e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F759b7598-5229-5b19-170e-db2132581726.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=36030f2c6cef9a725d2fea3170e9d790" alt="dog.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/759b7598-5229-5b19-170e-db2132581726.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F759b7598-5229-5b19-170e-db2132581726.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=72783e9cfbb0e639c94d3f0d2faf0f86 1x" loading="lazy"></a></p>\n',body:'# はじめに\n\n`SvelteKit`のブロックについてまとめました。\n\n* If\n* Else\n* Else if\n* Each\n* Key\n* Await\n\n## つかったもの\n\n* Vite + SvelteKit + Typescript\n    * Flowbite-svelte\n    * tailwind css\n\nUIコンポーネントには[Flowbite-svelte](https://flowbite-svelte.com/)を利用しました。\n導入方法は前の記事で公開しています。\n\nhttps://qiita.com/doyaseizin/items/6e7e8571cc6c3d7ad2e8\n\n## If\n\n```vue\n<script lang="ts">\n  import { Button } from "flowbite-svelte";\n\n  let bool = true;\n<\/script>\n\n{#if bool}\n\t<Button color="blue" on:click={() => bool = !bool}>\n\t\tTRUE\n\t</Button>\n{/if}\n\n{#if !bool}\n\t<Button color="green" on:click={() => bool = !bool}>\n\t\tFALSE\n\t</Button>\n{/if}\n```\n\n![if.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/cfd20698-275e-bdf8-47fb-4964ab6d887d.gif)\n\n## Else\n\n```vue\n<script lang="ts">\n  import { Button } from "flowbite-svelte";\n\n\tlet bool = true;\n<\/script>\n\n{#if bool}\n\t<Button color="blue" on:click={() => bool = !bool}>\n\t\tTRUE\n\t</Button>\n{:else}\n\t<Button color="green" on:click={() => bool = !bool}>\n\t\tFALSE\n\t</Button>\n{/if}\n```\n![if.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/7cf78897-0ebc-341b-990e-2c4137123c70.gif)\n\n## Else if\n\n```vue\n<script lang="ts">\n  import { Button } from "flowbite-svelte";\n\n\tlet color = \'blue\';\n<\/script>\n\n{#if color === \'blue\'}\n\t<Button color="blue" on:click={() => color = \'green\'}>\n\t\tBlue\n\t</Button>\n{:else if color === \'green\'}\n\t<Button color="green" on:click={() => color = \'red\'}>\n\t\tGreen\n\t</Button>\n{:else}\n\t<Button color="red" on:click={() => color = \'blue\'}>\n\t\tRed\n\t</Button>\n{/if}\n```\n\n![else if.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/288565ae-7e92-c3b6-8e7e-7af457b02fb5.gif)\n\n## Each\n\n```vue\n<script lang="ts">\n\tlet Array = [ \'田中\', \'鈴木\', \'佐藤\'];\n<\/script>\n\n{#each Array as\tname, index }\n\t<p>\n\t\t{index}: {name}\n\t</p>\n{/each}\n```\n\n`index`を指定するときは↑のようにする\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/9d88b712-23f5-72f8-84d3-9399c32d27e4.png)\n\n## Key\n\n```vue\n{#key value}\n    ・・・\n{/key}\n```\n\nvalueが変化すると中のブロックが再表示されます。\nとある変化を拾い、再表示したいしたい時に使えそうです。\n\nアニメーションで使ってみました。\n\n```vue\n<script lang="ts">\n  import { Button, Select } from "flowbite-svelte";\n  import { fly } from "svelte/transition";\n\n  let duration = 200;\n\n  let durations = [\n    {value: 100, name: \'早い\'},\n    {value: 500, name: \'通常\'},\n    {value: 1000, name: \'遅い\'},\n  ]\n<\/script>\n\n<div class="flex">\n  {#key duration}\n    <div class="w-1/5" in:fly={{ duration: duration, y: 200 }}>\n      <Button color="light">\n        登録\n      </Button>\n    </div>\n  {/key}\n\n  <Select class="w-4/5" items={durations} bind:value={duration} />\n</div>  \n```\n\n![key.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/5d8995e2-9a62-14e3-2b16-2995a222f1cf.gif)\n\n## Await\n\n普段Promiseを使っていると、ありがちなThenブロックが繋がりまくって可読性が低くなる現象をスッキリかけます\nデモとして犬の画像をランダムに拾ってくるようにしました。\n\n```vue\n<script lang="ts">\n  async function getDog() {\n    const res = await fetch(`https://dog.ceo/api/breeds/image/random/1`);\n    const text = await res.text();\n\n    if (res.ok) {\n      return JSON.parse(text).message[0]\n    }\n  }\n<\/script>\n\n{#await getDog()}\n  <p>...waiting</p>\n{:then url}\n  <img src="{url}" width="200" alt="犬の画像">\n{:catch error}\n  <p style="color: red">{error.message}</p>\n{/await}\n```\n\nかなりすっきりしますね！\n\n\n![dog.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/759b7598-5229-5b19-170e-db2132581726.gif)\n',coediting:!1,comments_count:0,created_at:"2022-12-14T13:18:20+09:00",group:null,id:"cd508596bd18e328a321",likes_count:2,private:!1,reactions_count:0,stocks_count:1,tags:[{name:"JavaScript",versions:[]},{name:"Svelte",versions:[]},{name:"SvelteKit",versions:[]}],title:"SvelteKit ブロックまとめ",updated_at:"2022-12-14T13:18:20+09:00",url:"https://qiita.com/maaaashi/items/cd508596bd18e328a321",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:720,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:112">Baas(Backend As A Service)で何かサービスを構築してみたいと思い、<br>\nfirebaseを触ってみようと思ったところ、Firebase の代替と謳われているsupabaseを発見。</p>\n<p data-sourcepos="6:1-6:96">こちらの方が面白そうだと感じたため、構築してみることにしました。</p>\n<p data-sourcepos="8:1-8:117">今回はプロフィール画面を作成した際に、supabaseのstorage機能について触れたのでメモ。</p>\n<h2 data-sourcepos="10:1-10:18">\n<span id="使ったもの" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>使ったもの</h2>\n<ul data-sourcepos="12:1-21:0">\n<li data-sourcepos="12:1-16:0">\n<p data-sourcepos="12:3-12:31">Vite + SvelteKit + Typescript</p>\n<ul data-sourcepos="13:5-16:0">\n<li data-sourcepos="13:5-13:27">@supabase/supabase-js</li>\n<li data-sourcepos="14:5-14:21">Flowbite-svelte</li>\n<li data-sourcepos="15:5-16:0">tailwind css</li>\n</ul>\n</li>\n<li data-sourcepos="17:1-21:0">\n<p data-sourcepos="17:3-17:10">supabase</p>\n<ul data-sourcepos="18:5-21:0">\n<li data-sourcepos="18:5-18:10">auth</li>\n<li data-sourcepos="19:5-19:8">db</li>\n<li data-sourcepos="20:5-21:0">storage</li>\n</ul>\n</li>\n</ul>\n<h2 data-sourcepos="22:1-22:12">\n<span id="完成品" class="fragment"></span><a href="#%E5%AE%8C%E6%88%90%E5%93%81"><i class="fa fa-link"></i></a>完成品</h2>\n<h3 data-sourcepos="24:1-24:54">\n<span id="マイページアイコンアップロード前" class="fragment"></span><a href="#%E3%83%9E%E3%82%A4%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E5%89%8D"><i class="fa fa-link"></i></a>マイページ(アイコンアップロード前)</h3>\n<p data-sourcepos="26:1-26:122"><a href="https://camo.qiitausercontent.com/bd5d353b256c6e6c5a618553245daa8e9383b80d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f33393962393937662d343466322d393233652d663435312d3165363537373035303634612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F399b997f-44f2-923e-f451-1e657705064a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7a6b16fbc9b0380c5ce0bb823d040a82" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/399b997f-44f2-923e-f451-1e657705064a.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F399b997f-44f2-923e-f451-1e657705064a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=551d2e44a7b4299e09adf6192d1238a6 1x" loading="lazy"></a></p>\n<h3 data-sourcepos="28:1-28:28">\n<span id="アップロード画面" class="fragment"></span><a href="#%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E7%94%BB%E9%9D%A2"><i class="fa fa-link"></i></a>アップロード画面</h3>\n<p data-sourcepos="30:1-30:122"><a href="https://camo.qiitausercontent.com/8d6fcd9676db13e0ce04f039de4ba7c41b83ad2b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f39613335303233312d613035342d343433382d343734322d3235633563376435313464652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F9a350231-a054-4438-4742-25c5c7d514de.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=27909f4754ec0c33d4cdd086b526a0bb" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/9a350231-a054-4438-4742-25c5c7d514de.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F9a350231-a054-4438-4742-25c5c7d514de.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ba9bf61a00065f97b88078e3840305c6 1x" loading="lazy"></a></p>\n<h3 data-sourcepos="32:1-32:54">\n<span id="マイページアイコンアップロード後" class="fragment"></span><a href="#%E3%83%9E%E3%82%A4%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E5%BE%8C"><i class="fa fa-link"></i></a>マイページ(アイコンアップロード後)</h3>\n<p data-sourcepos="34:1-34:122"><a href="https://camo.qiitausercontent.com/23cd5fef84aae6db8b3b8121fcca2d1631b7a484/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f34643935633463382d323766352d313365612d653166372d3264323039373633333230652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4d95c4c8-27f5-13ea-e1f7-2d209763320e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=805dddb7e3b58b952a71545316065c46" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4d95c4c8-27f5-13ea-e1f7-2d209763320e.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4d95c4c8-27f5-13ea-e1f7-2d209763320e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6b03c4809cc56d35d56d9a5ff4e4d044 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="37:1-37:15">\n<span id="実装方法" class="fragment"></span><a href="#%E5%AE%9F%E8%A3%85%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>実装方法</h2>\n<ol data-sourcepos="39:1-42:0">\n<li data-sourcepos="39:1-39:67">Supabase管理画面より、<code>storage</code> &gt; <code>bucket</code>を作成する</li>\n<li data-sourcepos="40:1-40:69">Supabase管理画面から、<code>profiles</code>テーブルを作成する</li>\n<li data-sourcepos="41:1-42:0">フロント側を整備する</li>\n</ol>\n<h3 data-sourcepos="43:1-43:71">\n<span id="1-supabase管理画面よりstorage--bucketを作成する" class="fragment"></span><a href="#1-supabase%E7%AE%A1%E7%90%86%E7%94%BB%E9%9D%A2%E3%82%88%E3%82%8Astorage--bucket%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>1. Supabase管理画面より、<code>storage</code> &gt; <code>bucket</code>を作成する</h3>\n<p data-sourcepos="45:1-45:78">アイコンを保存するためのバケットを作成していきます。</p>\n<ol data-sourcepos="47:1-50:0">\n<li data-sourcepos="47:1-47:57">サイドメニューから、<code>Storage</code>を選択する</li>\n<li data-sourcepos="48:1-50:0">画面左上の<code>New bucket</code>を選択し、任意のタイトルで保存をする。<br>\n今回は公式のチュートリアル通りに<code>avatars</code>としました。</li>\n</ol>\n<p data-sourcepos="51:1-51:122"><a href="https://camo.qiitausercontent.com/6bb6bb867ba1051ea4abaf7fa3e4871043a2eab0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f65323533346633322d353537322d336564632d316130382d3033336136633434666430392e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe2534f32-5572-3edc-1a08-033a6c44fd09.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b1d5f51a710a28cfbcd42173d25fac95" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e2534f32-5572-3edc-1a08-033a6c44fd09.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe2534f32-5572-3edc-1a08-033a6c44fd09.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6b487b014f08b57de04d8b5845d3b1db 1x" loading="lazy"></a></p>\n<h3 data-sourcepos="53:1-53:73">\n<span id="2-supabase管理画面からprofilesテーブルを作成する" class="fragment"></span><a href="#2-supabase%E7%AE%A1%E7%90%86%E7%94%BB%E9%9D%A2%E3%81%8B%E3%82%89profiles%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>2. Supabase管理画面から、<code>profiles</code>テーブルを作成する</h3>\n<p data-sourcepos="55:1-55:109">ユーザーに対してアイコンのURLを紐づけるために<code>profiles</code>テーブルを作成します。</p>\n<ol data-sourcepos="57:1-61:0">\n<li data-sourcepos="57:1-57:60">サイドメニューから、<code>SQL Editor</code>を選択する</li>\n<li data-sourcepos="58:1-58:39">画面左上の<code>Welcome</code>を選択。</li>\n<li data-sourcepos="59:1-61:0">\n<code>Quick start</code>の欄の<code>User Management Starter</code>を選び、実行する<br>\n(RUN or Ctrl + Enter)</li>\n</ol>\n<p data-sourcepos="62:1-62:122"><a href="https://camo.qiitausercontent.com/dca133ec7bad62ba9e79e2799804d1fd6dbef86e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f37616333313464332d373064342d653836622d393562352d3731356237313464303363632e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F7ac314d3-70d4-e86b-95b5-715b714d03cc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a1a6017b34f9fd611020ee8a5225ac4e" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/7ac314d3-70d4-e86b-95b5-715b714d03cc.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F7ac314d3-70d4-e86b-95b5-715b714d03cc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=32491d344c65efed61d0bce721e7238f 1x" loading="lazy"></a></p>\n<h3 data-sourcepos="64:1-64:37">\n<span id="3-フロント側を整備する" class="fragment"></span><a href="#3-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E6%95%B4%E5%82%99%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>3. フロント側を整備する</h3>\n<p data-sourcepos="66:1-66:97">1と2でsupabase側の用意は完了なので、今度はフロント側を整備していく。</p>\n<p data-sourcepos="68:1-68:72">まずはファイルのアップロードフォームを作成する。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="70:1-85:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">Label</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">flowbite-svelte</span><span class="dl">\'</span>\n  <span class="kd">let</span> <span class="nx">files</span><span class="p">:</span> <span class="nx">FileList</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;Label</span> <span class="na">class=</span><span class="s">"w-1/5 pb-2"</span><span class="nt">&gt;</span>アイコンアップロード<span class="nt">&lt;/Label&gt;</span>\n    <span class="nt">&lt;input</span>\n        <span class="na">class=</span><span class="s">"w-4/5 text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400"</span>\n        <span class="na">type=</span><span class="s">"file"</span>\n        <span class="na">accept=</span><span class="s">"image/*"</span>\n        <span class="na">bind:value=</span><span class="s">{files}</span>\n    <span class="nt">/&gt;</span>\n<span class="nt">&lt;/div&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="87:1-87:36">こんな感じになりました。</p>\n<p data-sourcepos="89:1-89:122"><a href="https://camo.qiitausercontent.com/dbc4c2e364810470069b91b8cdaa22e0082dc98e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f34323730356635332d313239392d613433342d306665632d3666363664663366353635302e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F42705f53-1299-a434-0fec-6f66df3f5650.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f7951f6ee7f5ee595df94a9935a8c7bb" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/42705f53-1299-a434-0fec-6f66df3f5650.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F42705f53-1299-a434-0fec-6f66df3f5650.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=21a51633d1e816bead2417ffc64a5aec 1x" loading="lazy"></a></p>\n<p data-sourcepos="91:1-91:93">次に、ファイルがアップロードされたら着火するイベントを作成する</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="93:1-117:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="kd">let</span> <span class="nx">files</span><span class="p">:</span> <span class="nx">FileList</span>\n\n  <span class="kd">const</span> <span class="nx">uploadIcon</span> <span class="o">=</span> <span class="nf">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="nf">if </span><span class="p">(</span><span class="o">!</span><span class="nx">files</span> <span class="o">||</span> <span class="nx">files</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">return</span>\n    <span class="p">}</span>\n\n    <span class="kd">const</span> <span class="nx">file</span> <span class="o">=</span> <span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>\n    <span class="kd">const</span> <span class="nx">fileExt</span> <span class="o">=</span> <span class="nx">file</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">\'</span><span class="s1">.</span><span class="dl">\'</span><span class="p">).</span><span class="nf">pop</span><span class="p">()</span>\n    <span class="kd">const</span> <span class="nx">filePath</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">session</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()}</span><span class="s2">.</span><span class="p">${</span><span class="nx">fileExt</span><span class="p">}</span><span class="s2">`</span>\n\n    <span class="k">await</span> <span class="nx">supabase</span><span class="p">.</span><span class="nx">storage</span><span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="dl">\'</span><span class="s1">avatars</span><span class="dl">\'</span><span class="p">).</span><span class="nf">upload</span><span class="p">(</span><span class="nx">filePath</span><span class="p">,</span> <span class="nx">file</span><span class="p">)</span>\n  <span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n  <span class="nt">&lt;input</span>\n    <span class="na">class=</span><span class="s">"w-4/5 block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400"</span>\n    <span class="na">type=</span><span class="s">"file"</span>\n    <span class="na">accept=</span><span class="s">"image/*"</span>\n    <span class="na">bind:files</span>\n    <span class="na">on:change=</span><span class="s">{uploadIcon}</span> <span class="err">//</span> <span class="na">追加</span>\n  <span class="nt">/&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="119:1-120:124"><code>session</code>には現在のsession情報を格納しています。<br>\n<code>avatar storage</code>にユーザーごとのファイルを作成し、そこに画像を格納するようにしています。</p>\n<p data-sourcepos="122:1-122:64">次に、<code>profiles</code>テーブルに画像URLを保存します。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="124:1-162:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">Label</span><span class="p">,</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">flowbite-svelte</span><span class="dl">\'</span>\n  <span class="kd">let</span> <span class="nx">files</span><span class="p">:</span> <span class="nx">FileList</span>\n  <span class="kd">let</span> <span class="nx">url</span><span class="p">:</span> <span class="nx">string</span> <span class="c1">// 追加</span>\n\n  <span class="kd">const</span> <span class="nx">updateUser</span> <span class="o">=</span> <span class="nf">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="nx">update_data</span> <span class="o">=</span> <span class="p">{</span>\n      <span class="na">id</span><span class="p">:</span> <span class="nx">$session</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>\n      <span class="na">avatar_url</span><span class="p">:</span> <span class="nx">url</span>\n    <span class="p">}</span>\n\n    <span class="k">await</span> <span class="nx">supabase</span>\n      <span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="dl">\'</span><span class="s1">profiles</span><span class="dl">\'</span><span class="p">)</span>\n      <span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="nx">update_data</span><span class="p">)</span>\n  <span class="p">}</span>\n\n  <span class="kd">const</span> <span class="nx">uploadIcon</span> <span class="o">=</span> <span class="nf">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="nf">if </span><span class="p">(</span><span class="o">!</span><span class="nx">files</span> <span class="o">||</span> <span class="nx">files</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">return</span>\n    <span class="p">}</span>\n\n    <span class="kd">const</span> <span class="nx">file</span> <span class="o">=</span> <span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>\n    <span class="kd">const</span> <span class="nx">fileExt</span> <span class="o">=</span> <span class="nx">file</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">\'</span><span class="s1">.</span><span class="dl">\'</span><span class="p">).</span><span class="nf">pop</span><span class="p">()</span>\n    <span class="kd">const</span> <span class="nx">filePath</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">session</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()}</span><span class="s2">.</span><span class="p">${</span><span class="nx">fileExt</span><span class="p">}</span><span class="s2">`</span>\n\n    <span class="k">await</span> <span class="nx">supabase</span><span class="p">.</span><span class="nx">storage</span><span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="dl">\'</span><span class="s1">avatars</span><span class="dl">\'</span><span class="p">).</span><span class="nf">upload</span><span class="p">(</span><span class="nx">filePath</span><span class="p">,</span> <span class="nx">file</span><span class="p">)</span>\n\n    <span class="nx">url</span> <span class="o">=</span> <span class="nx">filePath</span> <span class="c1">// 追加</span>\n  <span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">"w-full"</span> <span class="na">on:submit</span><span class="err">|</span><span class="na">preventDefault=</span><span class="s">"{updateUser}"</span><span class="nt">&gt;</span>\n  // ------------------------------\n  // 先ほどのファイルフォーム\n  // ------------------------------\n  <span class="nt">&lt;Button</span> <span class="na">class=</span><span class="s">"mt-10"</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">color=</span><span class="s">"yellow"</span> <span class="na">disabled=</span><span class="s">{updating}</span><span class="nt">&gt;</span>プロフィールを変更する<span class="nt">&lt;/Button&gt;</span>\n<span class="nt">&lt;/form&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="164:1-165:159">先ほど作った<code>uploadIcon</code>メソッドの最後に<code>filePath</code>を変数に格納します。<br>\nまた、<code>form</code>タグのサブミットイベントに<code>updateUser</code>を定義し、サブミットボタンを押されたら着火するようにしました。</p>\n<p data-sourcepos="167:1-167:138">ニックネームや出身地など、一緒のフォームで入力できるようにすればプロフィール画面が作れますね</p>\n<p data-sourcepos="170:1-170:122"><a href="https://camo.qiitausercontent.com/de480517a384611f6066b35b5ff56664e2b0dd31/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f35623739303263652d653666312d346431382d663764332d3665353831303230333061622e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F5b7902ce-e6f1-4d18-f7d3-6e58102030ab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7c1b805987c2132e4e7dd4aa7a27418c" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/5b7902ce-e6f1-4d18-f7d3-6e58102030ab.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F5b7902ce-e6f1-4d18-f7d3-6e58102030ab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4ed66d50122cbdfc85d5734789e8a09f 1x" loading="lazy"></a></p>\n',body:'# はじめに\n\nBaas(Backend As A Service)で何かサービスを構築してみたいと思い、\nfirebaseを触ってみようと思ったところ、Firebase の代替と謳われているsupabaseを発見。\n\nこちらの方が面白そうだと感じたため、構築してみることにしました。\n\n今回はプロフィール画面を作成した際に、supabaseのstorage機能について触れたのでメモ。\n\n## 使ったもの\n\n* Vite + SvelteKit + Typescript\n    * @supabase/supabase-js\n    * Flowbite-svelte\n    * tailwind css\n\n* supabase\n    * auth\n    * db\n    * storage\n\n## 完成品\n\n### マイページ(アイコンアップロード前)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/399b997f-44f2-923e-f451-1e657705064a.png)\n\n### アップロード画面\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/9a350231-a054-4438-4742-25c5c7d514de.png)\n\n### マイページ(アイコンアップロード後)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4d95c4c8-27f5-13ea-e1f7-2d209763320e.png)\n\n\n## 実装方法\n\n1. Supabase管理画面より、`storage` > `bucket`を作成する\n1. Supabase管理画面から、`profiles`テーブルを作成する\n1. フロント側を整備する\n\n### 1. Supabase管理画面より、`storage` > `bucket`を作成する\n\nアイコンを保存するためのバケットを作成していきます。\n\n1. サイドメニューから、`Storage`を選択する\n1. 画面左上の`New bucket`を選択し、任意のタイトルで保存をする。\n今回は公式のチュートリアル通りに`avatars`としました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e2534f32-5572-3edc-1a08-033a6c44fd09.png)\n\n### 2. Supabase管理画面から、`profiles`テーブルを作成する\n\nユーザーに対してアイコンのURLを紐づけるために`profiles`テーブルを作成します。\n\n1. サイドメニューから、`SQL Editor`を選択する\n1. 画面左上の`Welcome`を選択。\n1. `Quick start`の欄の`User Management Starter`を選び、実行する\n  (RUN or Ctrl + Enter)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/7ac314d3-70d4-e86b-95b5-715b714d03cc.png)\n\n### 3. フロント側を整備する\n\n1と2でsupabase側の用意は完了なので、今度はフロント側を整備していく。\n\nまずはファイルのアップロードフォームを作成する。\n\n```vue\n<script lang="ts">\n  import { Label } from \'flowbite-svelte\'\n  let files: FileList\n<\/script>\n\n<div class="flex">\n    <Label class="w-1/5 pb-2">アイコンアップロード</Label>\n    <input\n        class="w-4/5 text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400"\n        type="file"\n        accept="image/*"\n        bind:value={files}\n    />\n</div>\n```\n\nこんな感じになりました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/42705f53-1299-a434-0fec-6f66df3f5650.png)\n\n次に、ファイルがアップロードされたら着火するイベントを作成する\n\n```vue\n<script lang="ts">\n  let files: FileList\n\n  const uploadIcon = async () => {\n    if (!files || files.length === 0) {\n      return\n    }\n\n    const file = files[0]\n    const fileExt = file.name.split(\'.\').pop()\n    const filePath = `${session.user.id}/${Math.random()}.${fileExt}`\n\n    await supabase.storage.from(\'avatars\').upload(filePath, file)\n  }\n<\/script>\n\n  <input\n    class="w-4/5 block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400"\n    type="file"\n    accept="image/*"\n    bind:files\n    on:change={uploadIcon} // 追加\n  />\n```\n\n`session`には現在のsession情報を格納しています。\n`avatar storage`にユーザーごとのファイルを作成し、そこに画像を格納するようにしています。\n\n次に、`profiles`テーブルに画像URLを保存します。\n\n```vue\n<script lang="ts">\n  import { Label, Button } from \'flowbite-svelte\'\n  let files: FileList\n  let url: string // 追加\n\n  const updateUser = async () => {\n    update_data = {\n      id: $session.user.id,\n      avatar_url: url\n    }\n\n    await supabase\n      .from(\'profiles\')\n      .update(update_data)\n  }\n\n  const uploadIcon = async () => {\n    if (!files || files.length === 0) {\n      return\n    }\n\n    const file = files[0]\n    const fileExt = file.name.split(\'.\').pop()\n    const filePath = `${session.user.id}/${Math.random()}.${fileExt}`\n\n    await supabase.storage.from(\'avatars\').upload(filePath, file)\n\n    url = filePath // 追加\n  }\n<\/script>\n\n<form class="w-full" on:submit|preventDefault="{updateUser}">\n  // ------------------------------\n  // 先ほどのファイルフォーム\n  // ------------------------------\n  <Button class="mt-10" type="submit" color="yellow" disabled={updating}>プロフィールを変更する</Button>\n</form>\n```\n\n先ほど作った`uploadIcon`メソッドの最後に`filePath`を変数に格納します。\nまた、`form`タグのサブミットイベントに`updateUser`を定義し、サブミットボタンを押されたら着火するようにしました。\n\nニックネームや出身地など、一緒のフォームで入力できるようにすればプロフィール画面が作れますね\n\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/5b7902ce-e6f1-4d18-f7d3-6e58102030ab.png)\n',coediting:!1,comments_count:0,created_at:"2022-12-12T16:44:02+09:00",group:null,id:"6236732e0461561bb64a",likes_count:2,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Svelte",versions:[]},{name:"Supabase",versions:[]},{name:"SvelteKit",versions:[]}],title:"SvelteKit + Supabase Storageを使ってアイコン登録",updated_at:"2022-12-13T21:20:17+09:00",url:"https://qiita.com/maaaashi/items/6236732e0461561bb64a",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:828,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-5:135">JavaScriptには便利な記法が多く、<br>\n使いこなすことでシンプルなコードを書くことが可能になりますが、<br>\nフロントエンド開発をしているなかで、あまり意識できずにたらたらと長いコードを書きがちです。</p>\n<p data-sourcepos="7:1-7:51">便利な構文をピックアップしました。</p>\n<h2 data-sourcepos="9:1-9:15">\n<span id="分割代入" class="fragment"></span><a href="#%E5%88%86%E5%89%B2%E4%BB%A3%E5%85%A5"><i class="fa fa-link"></i></a>分割代入</h2>\n<div class="code-frame" data-lang="javascript" data-sourcepos="11:1-14:3"><div class="highlight"><pre><code><span class="kd">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="dl">\'</span><span class="s1">hoge</span><span class="dl">\'</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">fuga</span><span class="dl">\'</span><span class="p">];</span>\n<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span> <span class="c1">// hoge fuga</span>\n</code></pre></div></div>\n<div class="code-frame" data-lang="javascript" data-sourcepos="16:1-20:3"><div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">profile</span> <span class="o">=</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">田中</span><span class="dl">\'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">28</span> <span class="p">};</span>\n<span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">name</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">profile</span><span class="p">;</span>\n<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">name</span><span class="p">);</span> <span class="c1">// 1 \'田中\'</span>\n</code></pre></div></div>\n<div class="code-frame" data-lang="javascript" data-sourcepos="22:1-25:3"><div class="highlight"><pre><code><span class="kd">const</span> <span class="p">[,</span> <span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>\n<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span> <span class="c1">// 3 undefined</span>\n</code></pre></div></div>\n<p data-sourcepos="27:1-27:24">活用してみると、</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="29:1-69:3"><div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">users</span><span class="p">:</span> <span class="p">[</span>\n    <span class="p">{</span>\n      <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>\n      <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">田中</span><span class="dl">\'</span><span class="p">,</span>\n      <span class="na">email</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">tanaka@example.com</span><span class="dl">\'</span><span class="p">,</span>\n    <span class="p">},</span>\n    <span class="p">{</span>\n      <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>\n      <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">鈴木</span><span class="dl">\'</span><span class="p">,</span>\n      <span class="na">email</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">suzuki@example.com</span><span class="dl">\'</span><span class="p">,</span>\n    <span class="p">},</span>\n    <span class="p">{</span>\n      <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>\n      <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">佐藤</span><span class="dl">\'</span><span class="p">,</span>\n      <span class="na">email</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">sato@example.com</span><span class="dl">\'</span><span class="p">,</span>\n    <span class="p">},</span>\n  <span class="p">],</span>\n  <span class="na">url</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">https://hogehoge.com</span><span class="dl">\'</span><span class="p">,</span>\n  <span class="na">params</span><span class="p">:</span> <span class="p">{</span>\n    <span class="na">hoge</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">hoge</span><span class="dl">\'</span><span class="p">,</span>\n    <span class="na">fuga</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">fuga</span><span class="dl">\'</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="kd">const</span> <span class="p">{</span> <span class="nx">users</span><span class="p">,</span> <span class="na">params</span><span class="p">:</span> <span class="nx">parameters</span><span class="p">,</span> <span class="nx">status</span> <span class="o">=</span> <span class="mi">200</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">data</span>\n\n<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">users</span><span class="p">)</span>\n<span class="c1">// [</span>\n<span class="c1">//   { id: 1, name: \'田中\', email: \'tanaka@example.com\' },</span>\n<span class="c1">//   { id: 2, name: \'鈴木\', email: \'suzuki@example.com\' },</span>\n<span class="c1">//   { id: 3, name: \'佐藤\', email: \'sato@example.com\' }</span>\n<span class="c1">// ]</span>\n\n<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">parameters</span><span class="p">)</span>\n<span class="c1">// { hoge: \'hoge\', fuga: \'fuga\' }</span>\n\n<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span>\n<span class="c1">// 200</span>\n</code></pre></div></div>\n<p data-sourcepos="71:1-71:24">のように書ける。</p>\n<h2 data-sourcepos="74:1-74:24">\n<span id="スプレット構文" class="fragment"></span><a href="#%E3%82%B9%E3%83%97%E3%83%AC%E3%83%83%E3%83%88%E6%A7%8B%E6%96%87"><i class="fa fa-link"></i></a>スプレット構文</h2>\n<div class="code-frame" data-lang="javascript" data-sourcepos="76:1-82:3"><div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">hoge</span> <span class="o">=</span> <span class="p">[</span><span class="dl">\'</span><span class="s1">a</span><span class="dl">\'</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">b</span><span class="dl">\'</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">c</span><span class="dl">\'</span><span class="p">];</span>\n<span class="kd">const</span> <span class="nx">fuga</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">hoge</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">d</span><span class="dl">\'</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">e</span><span class="dl">\'</span><span class="p">];</span>\n<span class="kd">const</span> <span class="nx">hogehoge</span> <span class="o">=</span> <span class="p">[</span><span class="dl">\'</span><span class="s1">Y</span><span class="dl">\'</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">Z</span><span class="dl">\'</span><span class="p">,</span> <span class="p">...</span><span class="nx">fuga</span><span class="p">]</span>\n<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">fuga</span><span class="p">)</span> <span class="c1">// [\'a\', \'b\', \'c\', \'d\', \'e\'];</span>\n<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">hogehoge</span><span class="p">)</span> <span class="c1">// [\'Y\', \'Z\', \'a\', \'b\', \'c\', \'d\', \'e\'];</span>\n</code></pre></div></div>\n<p data-sourcepos="84:1-84:72">先ほどの分割代入と組み合わせて↓のようにも書ける</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="86:1-100:3"><div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>\n  <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">田中</span><span class="dl">\'</span><span class="p">,</span>\n  <span class="na">email</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">tanaka@example.com</span><span class="dl">\'</span><span class="p">,</span>\n<span class="p">}</span>\n\n<span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span><span class="p">,</span> <span class="p">...</span><span class="nx">ExceptId</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">users</span>\n\n<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>\n<span class="c1">// 1</span>\n\n<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">ExceptId</span><span class="p">)</span>\n<span class="c1">// { name: \'田中\', email: \'tanaka@example.com\' }</span>\n</code></pre></div></div>\n<p data-sourcepos="102:1-102:78">うまく使ってシンプルなコーディングを心がけましょう！</p>\n',body:"# はじめに\n\nJavaScriptには便利な記法が多く、\n使いこなすことでシンプルなコードを書くことが可能になりますが、\nフロントエンド開発をしているなかで、あまり意識できずにたらたらと長いコードを書きがちです。\n\n便利な構文をピックアップしました。\n\n## 分割代入\n\n```javascript\nconst [a, b] = ['hoge', 'fuga'];\nconsole.log(a, b); // hoge fuga\n```\n\n```javascript\nconst profile = { id: 1, name: '田中', age: 28 };\nconst { id, name } = profile;\nconsole.log(id, name); // 1 '田中'\n```\n\n```javascript\nconst [, , a, , b] = [1, 2, 3, 4];\nconsole.log(a, b); // 3 undefined\n```\n\n活用してみると、\n\n```typescript\nconst data = {\n  users: [\n    {\n      id: 1,\n      name: '田中',\n      email: 'tanaka@example.com',\n    },\n    {\n      id: 2,\n      name: '鈴木',\n      email: 'suzuki@example.com',\n    },\n    {\n      id: 3,\n      name: '佐藤',\n      email: 'sato@example.com',\n    },\n  ],\n  url: 'https://hogehoge.com',\n  params: {\n    hoge: 'hoge',\n    fuga: 'fuga'\n  }\n}\n\nconst { users, params: parameters, status = 200 } = data\n\nconsole.log(users)\n// [\n//   { id: 1, name: '田中', email: 'tanaka@example.com' },\n//   { id: 2, name: '鈴木', email: 'suzuki@example.com' },\n//   { id: 3, name: '佐藤', email: 'sato@example.com' }\n// ]\n\nconsole.log(parameters)\n// { hoge: 'hoge', fuga: 'fuga' }\n\nconsole.log(status)\n// 200\n```\n\nのように書ける。\n\n\n## スプレット構文\n\n```javascript\nconst hoge = ['a', 'b', 'c'];\nconst fuga = [...hoge, 'd', 'e'];\nconst hogehoge = ['Y', 'Z', ...fuga]\nconsole.log(fuga) // ['a', 'b', 'c', 'd', 'e'];\nconsole.log(hogehoge) // ['Y', 'Z', 'a', 'b', 'c', 'd', 'e'];\n```\n\n先ほどの分割代入と組み合わせて↓のようにも書ける\n\n```typescript\nconst users = {\n  id: 1,\n  name: '田中',\n  email: 'tanaka@example.com',\n}\n\nconst { id, ...ExceptId } = users\n\nconsole.log(id)\n// 1\n\nconsole.log(ExceptId)\n// { name: '田中', email: 'tanaka@example.com' }\n```\n\nうまく使ってシンプルなコーディングを心がけましょう！\n",coediting:!1,comments_count:0,created_at:"2022-12-10T15:44:23+09:00",group:null,id:"148d028c238009b145dc",likes_count:1,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]}],title:"JavaScriptの便利な構文 -分割代入とスプレット構文",updated_at:"2022-12-12T22:00:29+09:00",url:"https://qiita.com/maaaashi/items/148d028c238009b145dc",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:344,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="2:1-3:105">最近<code>svelte</code>にドはまりしていましたが、<br>\n<code>SolidJS</code>も触ってみたいな～と思い、話題の<code>Vite</code>で環境を作った時のメモです。</p>\n<h2 data-sourcepos="5:1-5:15">\n<span id="実行環境" class="fragment"></span><a href="#%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>実行環境</h2>\n<ul data-sourcepos="7:1-11:0">\n<li data-sourcepos="7:1-8:14">docker\n<ul data-sourcepos="8:5-8:14">\n<li data-sourcepos="8:5-8:14">20.10.14</li>\n</ul>\n</li>\n<li data-sourcepos="9:1-11:0">docker-compose\n<ul data-sourcepos="10:5-11:0">\n<li data-sourcepos="10:5-11:0">1.29.2</li>\n</ul>\n</li>\n</ul>\n<h2 data-sourcepos="12:1-12:21">\n<span id="docker-composeyml" class="fragment"></span><a href="#docker-composeyml"><i class="fa fa-link"></i></a>docker-compose.yml</h2>\n<p data-sourcepos="14:1-14:87">imageには<code>node</code>、commandには<code>vite</code>の実行コマンドにしておきました。</p>\n<div class="code-frame" data-lang="yaml" data-sourcepos="16:1-29:3"><div class="highlight"><pre><code><span class="na">version</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">3\'</span>\n\n<span class="na">services</span><span class="pi">:</span>\n  <span class="na">app</span><span class="pi">:</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">node:18-alpine3.15</span>\n    <span class="na">working_dir</span><span class="pi">:</span> <span class="s">/app</span>\n    <span class="na">ports</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s2">"</span><span class="s">8080:8080"</span>\n    <span class="na">volumes</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s2">"</span><span class="s">./src:/app"</span>\n    <span class="na">tty</span><span class="pi">:</span> <span class="kc">true</span>\n    <span class="na">command</span><span class="pi">:</span> <span class="s">npm run dev</span>\n</code></pre></div></div>\n<h2 data-sourcepos="31:1-31:21">\n<span id="いざ環境構築" class="fragment"></span><a href="#%E3%81%84%E3%81%96%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89"><i class="fa fa-link"></i></a>いざ環境構築</h2>\n<h3 data-sourcepos="33:1-33:25">\n<span id="コンテナ内へ" class="fragment"></span><a href="#%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E5%86%85%E3%81%B8"><i class="fa fa-link"></i></a>コンテナ内へ～</h3>\n<div class="code-frame" data-lang="bash" data-sourcepos="35:1-38:3"><div class="highlight"><pre><code><span class="nv">$ </span>docker-compose build\n<span class="nv">$ </span>docker-compose run app sh\n</code></pre></div></div>\n<p data-sourcepos="40:1-40:33">以降コンテナ内操作です</p>\n<h3 data-sourcepos="42:1-42:80">\n<span id="solidjstypescriptviteviteプラグインをインストールする" class="fragment"></span><a href="#solidjstypescriptvitevite%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>SolidJS・TypeScript・Vite・Viteプラグインをインストールする</h3>\n<div class="code-frame" data-lang="text" data-sourcepos="44:1-48:3"><div class="highlight"><pre><code># npm\n/app # npm install solid-js\n/app # npm install -D typescript vite vite-plugin-solid\n</code></pre></div></div>\n<h3 data-sourcepos="50:1-50:25">\n<span id="packagejsonの修正" class="fragment"></span><a href="#packagejson%E3%81%AE%E4%BF%AE%E6%AD%A3"><i class="fa fa-link"></i></a>package.jsonの修正</h3>\n<p data-sourcepos="52:1-52:32"><code>tsc</code>を実行できるように</p>\n<div class="code-frame" data-lang="json" data-sourcepos="54:1-69:3"><div class="highlight"><pre><code><span class="p">{</span><span class="w">\n  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">      </span><span class="err">//</span><span class="w"> </span><span class="err">追加</span><span class="w">\n    </span><span class="nl">"tsc"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc"</span><span class="p">,</span><span class="w">   </span><span class="err">//</span><span class="w"> </span><span class="err">追加</span><span class="w">\n  </span><span class="p">},</span><span class="w">                </span><span class="err">//</span><span class="w"> </span><span class="err">追加</span><span class="w">\n  </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">\n    </span><span class="nl">"solid-js"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.6.4"</span><span class="w">\n  </span><span class="p">},</span><span class="w">\n  </span><span class="nl">"devDependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">\n    </span><span class="nl">"typescript"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.9.4"</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"vite"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.0.0"</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"vite-plugin-solid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^2.5.0"</span><span class="w">\n  </span><span class="p">}</span><span class="w">\n</span><span class="p">}</span><span class="w">\n\n</span></code></pre></div></div>\n<h3 data-sourcepos="71:1-71:29">\n<span id="typescriptの初期設定" class="fragment"></span><a href="#typescript%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>TypeScriptの初期設定</h3>\n<div class="code-frame" data-lang="text" data-sourcepos="73:1-75:3"><div class="highlight"><pre><code>/app # npm run tsc -- --init\n</code></pre></div></div>\n<p data-sourcepos="77:1-77:61">tsconfig.jsonが作られたはずなので、↓をコピペ</p>\n<div class="code-frame" data-lang="json" data-sourcepos="79:1-103:3"><div class="highlight"><pre><code><span class="p">{</span><span class="w">\n  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">\n    </span><span class="nl">"baseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"."</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es5"</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ESNext"</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"lib"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"ESNext"</span><span class="p">,</span><span class="w"> </span><span class="s2">"DOM"</span><span class="p">,</span><span class="w"> </span><span class="s2">"DOM.Iterable"</span><span class="p">],</span><span class="w">\n    </span><span class="nl">"esModuleInterop"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"isolatedModules"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"jsx"</span><span class="p">:</span><span class="w"> </span><span class="s2">"preserve"</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"jsxImportSource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"solid-js"</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"moduleResolution"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node"</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"newLine"</span><span class="p">:</span><span class="w"> </span><span class="s2">"lf"</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"noEmit"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"noUnusedLocals"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"noUnusedParameters"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"resolveJsonModule"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"types"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"vite/client"</span><span class="p">],</span><span class="w">\n    </span><span class="nl">"skipLibCheck"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">\n    </span><span class="nl">"strict"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">\n  </span><span class="p">},</span><span class="w">\n  </span><span class="nl">"include"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"**/*.ts"</span><span class="p">,</span><span class="w"> </span><span class="s2">"**/*.tsx"</span><span class="p">],</span><span class="w">\n  </span><span class="nl">"exclude"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"node_modules"</span><span class="p">]</span><span class="w">\n</span><span class="p">}</span><span class="w">\n</span></code></pre></div></div>\n<p data-sourcepos="105:1-105:82"><code>jsx</code>、<code>jsxImportSource</code>以外の個所は自分好みに調整してください</p>\n<h3 data-sourcepos="107:1-107:20">\n<span id="vite初期設定" class="fragment"></span><a href="#vite%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>Vite初期設定</h3>\n<p data-sourcepos="109:1-109:55">プロジェクトルートに<code>vite.config.ts</code>を作成</p>\n<div class="code-frame" data-lang="text" data-sourcepos="111:1-113:3"><div class="highlight"><pre><code>/app # touch vite.config.ts\n</code></pre></div></div>\n<p data-sourcepos="115:1-115:18">以下をコピペ</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="117:1-128:3"><div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">defineConfig</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">vite</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="nx">solidPlugin</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">vite-plugin-solid</span><span class="dl">\'</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="nf">defineConfig</span><span class="p">({</span>\n  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nf">solidPlugin</span><span class="p">()],</span>\n  <span class="na">server</span><span class="p">:</span> <span class="p">{</span>\n    <span class="na">host</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>\n    <span class="na">port</span><span class="p">:</span> <span class="mi">8080</span>\n  <span class="p">}</span>\n<span class="p">})</span>\n</code></pre></div></div>\n<p data-sourcepos="130:1-130:88">※ <code>port</code>を変えたいときは<code>docker-compose.yml</code>のportも一緒に変えてね！</p>\n<h3 data-sourcepos="132:1-132:23">\n<span id="indexhtmlの作成" class="fragment"></span><a href="#indexhtml%E3%81%AE%E4%BD%9C%E6%88%90"><i class="fa fa-link"></i></a>index.htmlの作成</h3>\n<p data-sourcepos="134:1-134:63">こちらもプロジェクトルートに<code>index.html</code>を作成</p>\n<div class="code-frame" data-lang="text" data-sourcepos="136:1-138:3"><div class="highlight"><pre><code>/app # touch index.html\n</code></pre></div></div>\n<p data-sourcepos="140:1-140:27">そして以下をコピペ</p>\n<div class="code-frame" data-lang="html" data-sourcepos="142:1-159:3"><div class="highlight"><pre><code><span class="cp">&lt;!DOCTYPE html&gt;</span>\n<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;head&gt;</span>\n    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>\n    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1"</span> <span class="nt">/&gt;</span>\n    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"theme-color"</span> <span class="na">content=</span><span class="s">"#000000"</span> <span class="nt">/&gt;</span>\n    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"shortcut icon"</span> <span class="na">type=</span><span class="s">"image/ico"</span> <span class="na">href=</span><span class="s">"/src/assets/favicon.ico"</span> <span class="nt">/&gt;</span>\n    <span class="nt">&lt;title&gt;</span>Solid App<span class="nt">&lt;/title&gt;</span>\n  <span class="nt">&lt;/head&gt;</span>\n  <span class="nt">&lt;body&gt;</span>\n    <span class="nt">&lt;noscript&gt;</span>You need to enable JavaScript to run this app.<span class="nt">&lt;/noscript&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"root"</span><span class="nt">&gt;&lt;/div&gt;</span>\n\n    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/src/main.tsx"</span> <span class="na">type=</span><span class="s">"module"</span><span class="nt">&gt;&lt;/script&gt;</span>\n  <span class="nt">&lt;/body&gt;</span>\n<span class="nt">&lt;/html&gt;</span>\n</code></pre></div></div>\n<h3 data-sourcepos="161:1-161:25">\n<span id="srcmaintsxを作成" class="fragment"></span><a href="#srcmaintsx%E3%82%92%E4%BD%9C%E6%88%90"><i class="fa fa-link"></i></a>src/main.tsxを作成</h3>\n<div class="code-frame" data-lang="text" data-sourcepos="163:1-166:3"><div class="highlight"><pre><code>/app # mkdir src\n/app # touch src/main/tsx\n</code></pre></div></div>\n<p data-sourcepos="168:1-168:27">そして以下をコピペ</p>\n<div class="code-frame" data-lang="tsx" data-sourcepos="170:1-199:3"><div class="highlight"><pre><code><span class="c1">// main.tsx</span>\n\n<span class="k">import</span> <span class="p">{</span> <span class="nx">createSignal</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">solid-js</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">render</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">solid-js/web</span><span class="dl">\'</span>\n\n<span class="kd">const</span> <span class="nx">CountingComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="kd">const</span> <span class="nx">createDate</span> <span class="o">=</span> <span class="p">(</span><span class="na">date</span><span class="p">:</span> <span class="nb">Date</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="kd">const</span> <span class="nx">Year</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nf">getFullYear</span><span class="p">();</span>\n    <span class="kd">const</span> <span class="nx">Month</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nf">getMonth</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>\n    <span class="kd">const</span> <span class="nb">Date</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nf">getDate</span><span class="p">();</span>\n    <span class="kd">const</span> <span class="nx">Hour</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nf">getHours</span><span class="p">();</span>\n    <span class="kd">const</span> <span class="nx">Min</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nf">getMinutes</span><span class="p">();</span>\n    <span class="kd">const</span> <span class="nx">Sec</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nf">getSeconds</span><span class="p">();</span>\n\n    <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="nx">Year</span><span class="p">}</span><span class="s2">年</span><span class="p">${</span><span class="nx">Month</span><span class="p">}</span><span class="s2">月</span><span class="p">${</span><span class="nb">Date</span><span class="p">}</span><span class="s2">日 </span><span class="p">${</span><span class="nx">Hour</span><span class="p">}</span><span class="s2">:</span><span class="p">${</span><span class="nx">Min</span><span class="p">}</span><span class="s2">:</span><span class="p">${</span><span class="nx">Sec</span><span class="p">}</span><span class="s2">`</span>\n  <span class="p">}</span>\n\n  <span class="kd">const</span> <span class="p">[</span><span class="nx">time</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nf">createSignal</span><span class="p">(</span><span class="nf">createDate</span><span class="p">(</span><span class="k">new</span> <span class="nc">Date</span><span class="p">()))</span>\n  <span class="nf">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">setCount</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="nf">createDate</span><span class="p">(</span><span class="k">new</span> <span class="nc">Date</span><span class="p">())</span>\n  <span class="p">}),</span> <span class="mi">1000</span><span class="p">)</span>\n\n  <span class="nf">return </span><span class="p">(</span>\n    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>Time is <span class="si">{</span><span class="nf">time</span><span class="p">()</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>\n  <span class="p">)</span>\n<span class="p">}</span>\n\n<span class="nf">render</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">CountingComponent</span> <span class="p">/&gt;,</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">\'</span><span class="s1">root</span><span class="dl">\'</span><span class="p">))</span>\n</code></pre></div></div>\n<h3 data-sourcepos="201:1-201:25">\n<span id="サーバー起動" class="fragment"></span><a href="#%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E8%B5%B7%E5%8B%95"><i class="fa fa-link"></i></a>サーバー起動！</h3>\n<div class="code-frame" data-lang="text" data-sourcepos="203:1-205:3"><div class="highlight"><pre><code>/app # npm run dev\n</code></pre></div></div>\n<p data-sourcepos="207:1-207:60"><a href="http://localhost:8080" rel="nofollow noopener" target="_blank">localhost:8080</a>で開けたら成功</p>\n<p data-sourcepos="209:1-209:121"><a href="https://camo.qiitausercontent.com/fbdb1fa6c5775a6f5eee0be54957c015dbcb11ac/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f36383930623837392d323934362d333134612d613338612d3634366436633663613032342e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F6890b879-2946-314a-a38a-646d6c6ca024.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=151f41dfd8f5da23a9d045d973d04739" alt="time.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/6890b879-2946-314a-a38a-646d6c6ca024.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F6890b879-2946-314a-a38a-646d6c6ca024.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=df9c11e42ddfd639dee09345fc286036 1x" loading="lazy"></a></p>\n',body:'# はじめに\n最近`svelte`にドはまりしていましたが、\n`SolidJS`も触ってみたいな～と思い、話題の`Vite`で環境を作った時のメモです。\n\n## 実行環境\n\n* docker \n    * 20.10.14\n* docker-compose\n    * 1.29.2\n\n## docker-compose.yml\n\nimageには`node`、commandには`vite`の実行コマンドにしておきました。\n\n```yaml\nversion: \'3\'\n\nservices:\n  app:\n    image: node:18-alpine3.15\n    working_dir: /app\n    ports:\n      - "8080:8080"\n    volumes:\n      - "./src:/app"\n    tty: true\n    command: npm run dev\n```\n\n## いざ環境構築\n\n### コンテナ内へ～\n\n```bash\n$ docker-compose build\n$ docker-compose run app sh\n```\n\n以降コンテナ内操作です\n\n### SolidJS・TypeScript・Vite・Viteプラグインをインストールする\n\n```\n# npm\n/app # npm install solid-js\n/app # npm install -D typescript vite vite-plugin-solid\n```\n\n### package.jsonの修正\n\n`tsc`を実行できるように\n\n```json\n{\n  "scripts": {      // 追加\n    "tsc": "tsc",   // 追加\n  },                // 追加\n  "dependencies": {\n    "solid-js": "^1.6.4"\n  },\n  "devDependencies": {\n    "typescript": "^4.9.4",\n    "vite": "^4.0.0",\n    "vite-plugin-solid": "^2.5.0"\n  }\n}\n\n```\n\n### TypeScriptの初期設定\n\n```\n/app # npm run tsc -- --init\n```\n\ntsconfig.jsonが作られたはずなので、↓をコピペ\n\n```json\n{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "target": "es5",\n    "module": "ESNext",\n    "lib": ["ESNext", "DOM", "DOM.Iterable"],\n    "esModuleInterop": true,\n    "isolatedModules": true,\n    "jsx": "preserve",\n    "jsxImportSource": "solid-js",\n    "moduleResolution": "node",\n    "newLine": "lf",\n    "noEmit": true,\n    "noUnusedLocals": true,\n    "noUnusedParameters": true,\n    "resolveJsonModule": true,\n    "types": ["vite/client"],\n    "skipLibCheck": true,\n    "strict": true\n  },\n  "include": ["**/*.ts", "**/*.tsx"],\n  "exclude": ["node_modules"]\n}\n```\n\n`jsx`、`jsxImportSource`以外の個所は自分好みに調整してください\n\n### Vite初期設定\n\nプロジェクトルートに`vite.config.ts`を作成\n\n```\n/app # touch vite.config.ts\n```\n\n以下をコピペ\n\n```typescript\nimport { defineConfig } from \'vite\'\nimport solidPlugin from \'vite-plugin-solid\'\n\nexport default defineConfig({\n  plugins: [solidPlugin()],\n  server: {\n    host: true,\n    port: 8080\n  }\n})\n```\n\n※ `port`を変えたいときは`docker-compose.yml`のportも一緒に変えてね！\n\n### index.htmlの作成\n\nこちらもプロジェクトルートに`index.html`を作成\n\n```\n/app # touch index.html\n```\n\nそして以下をコピペ\n\n```html\n<!DOCTYPE html>\n<html lang="ja">\n  <head>\n    <meta charset="utf-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <meta name="theme-color" content="#000000" />\n    <link rel="shortcut icon" type="image/ico" href="/src/assets/favicon.ico" />\n    <title>Solid App</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id="root"></div>\n\n    <script src="/src/main.tsx" type="module"><\/script>\n  </body>\n</html>\n```\n\n### src/main.tsxを作成\n\n```\n/app # mkdir src\n/app # touch src/main/tsx\n```\n\nそして以下をコピペ\n\n```tsx\n// main.tsx\n\nimport { createSignal } from \'solid-js\'\nimport { render } from \'solid-js/web\'\n\nconst CountingComponent = () => {\n  const createDate = (date: Date) => {\n    const Year = date.getFullYear();\n    const Month = date.getMonth()+1;\n    const Date = date.getDate();\n    const Hour = date.getHours();\n    const Min = date.getMinutes();\n    const Sec = date.getSeconds();\n\n    return `${Year}年${Month}月${Date}日 ${Hour}:${Min}:${Sec}`\n  }\n\n  const [time, setCount] = createSignal(createDate(new Date()))\n  setInterval(() => setCount(() => {\n    return createDate(new Date())\n  }), 1000)\n\n  return (\n    <div>Time is {time()}</div>\n  )\n}\n\nrender(() => <CountingComponent />, document.getElementById(\'root\'))\n```\n\n### サーバー起動！\n\n```\n/app # npm run dev\n```\n\n[localhost:8080](http://localhost:8080)で開けたら成功\n\n![time.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/6890b879-2946-314a-a38a-646d6c6ca024.gif)\n\n',coediting:!1,comments_count:0,created_at:"2022-12-10T13:54:52+09:00",group:null,id:"1f32996188fdbaa2e3dc",likes_count:1,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"vite",versions:[]},{name:"SolidJS",versions:[]}],title:"SolidJS + TypeScript + Vite 環境作ってみた",updated_at:"2022-12-11T17:46:42+09:00",url:"https://qiita.com/maaaashi/items/1f32996188fdbaa2e3dc",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:802,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:72">カンバンボードのようなものを作りたく、<br>\nドラッグアンドドロップのツールを探していました。</p>\n<p data-sourcepos="6:1-7:46">公式でドラッグアンドドロップのonイベントは用意されていますが、もう少し簡単に実装できないかと思い、<br>\n<code>svelte-dnd-action</code>を使ってみました。</p>\n<p data-sourcepos="9:1-9:87"><a href="https://svelte.dev/repl/adf5a97b91164c239cc1e6d0c76c2abe?version=3.14.1" rel="nofollow noopener" target="_blank">公式の例</a></p>\n<h2 data-sourcepos="11:1-11:26">\n<span id="svelte-dnd-action導入" class="fragment"></span><a href="#svelte-dnd-action%E5%B0%8E%E5%85%A5"><i class="fa fa-link"></i></a>svelte-dnd-action導入</h2>\n<div class="code-frame" data-lang="bash" data-sourcepos="13:1-15:3"><div class="highlight"><pre><code><span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">--save-dev</span> svelte-dnd-action\n</code></pre></div></div>\n<h2 data-sourcepos="17:1-17:12">\n<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>\n<p data-sourcepos="19:1-19:33">まずは参考コードから。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="20:1-36:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="kd">const</span> <span class="nx">myItems</span> <span class="o">=</span> <span class="p">{</span>\n    <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">item1</span><span class="dl">\'</span><span class="p">,</span>\n  <span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;div</span>\n  <span class="na">use:dndzone=</span><span class="s">"{{items: myItems, ...otherOptions}}"</span>\n  <span class="na">on:consider=</span><span class="s">"{handler}"</span>\n  <span class="na">on:finalize=</span><span class="s">"{handler}"</span>\n<span class="nt">&gt;</span>\n  {#each myItems as item(item.id)}\n      <span class="nt">&lt;div&gt;</span>{item.name}<span class="nt">&lt;/div&gt;</span>\n  {/each}\n<span class="nt">&lt;/div&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="38:1-38:91"><code>&lt;div&gt;</code>タグに注目すると、<code>use:dndzone</code>、<code>on:consider</code>、<code>on:finalize</code>を発見。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="40:1-46:3"><div class="highlight"><pre><code><span class="nt">&lt;div</span>\n  <span class="na">use:dndzone=</span><span class="s">"{{items: myItems, ...otherOptions}}"</span>\n  <span class="na">on:consider=</span><span class="s">"{handler}"</span>\n  <span class="na">on:finalize=</span><span class="s">"{handler}"</span>\n<span class="nt">&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="48:1-48:151">この3つをドラッグアンドドロップさせたい範囲に設定することでドラッグアンドドロップを機能させています。</p>\n<h3 data-sourcepos="50:1-50:17">\n<span id="usedndzone" class="fragment"></span><a href="#usedndzone"><i class="fa fa-link"></i></a><code>use:dndzone</code>\n</h3>\n<p data-sourcepos="52:1-54:33">ドラッグアンドドロップをさせたい配列を指定するメソッド。<br>\n<code>otherOptions</code>には文字通り、オプションを指定する。<br>\nオプションは以下の通り</p>\n<h3 data-sourcepos="56:1-56:19">\n<span id="オプション" class="fragment"></span><a href="#%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3"><i class="fa fa-link"></i></a>オプション</h3>\n<table data-sourcepos="58:1-70:44">\n<thead>\n<tr data-sourcepos="58:1-58:38">\n<th data-sourcepos="58:1-58:5">Name</th>\n<th data-sourcepos="58:7-58:12">Type</th>\n<th data-sourcepos="58:14-58:21">必須</th>\n<th data-sourcepos="58:23-58:38">デフォルト</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos="60:1-60:32">\n<td data-sourcepos="60:1-60:15">flipDurationMs</td>\n<td data-sourcepos="60:17-60:24">Number</td>\n<td data-sourcepos="60:26-60:29">No</td>\n<td data-sourcepos="60:31-60:32">0</td>\n</tr>\n<tr data-sourcepos="61:1-61:29">\n<td data-sourcepos="61:1-61:5">type</td>\n<td data-sourcepos="61:7-61:14">String</td>\n<td data-sourcepos="61:16-61:19">No</td>\n<td data-sourcepos="61:21-61:29">Internal</td>\n</tr>\n<tr data-sourcepos="62:1-62:35">\n<td data-sourcepos="62:1-62:13">dragDisabled</td>\n<td data-sourcepos="62:15-62:23">Boolean</td>\n<td data-sourcepos="62:25-62:28">No</td>\n<td data-sourcepos="62:30-62:35">false</td>\n</tr>\n<tr data-sourcepos="63:1-63:36">\n<td data-sourcepos="63:1-63:14">morphDisabled</td>\n<td data-sourcepos="63:16-63:24">Boolean</td>\n<td data-sourcepos="63:26-63:29">No</td>\n<td data-sourcepos="63:31-63:36">false</td>\n</tr>\n<tr data-sourcepos="64:1-64:45">\n<td data-sourcepos="64:1-64:23">dropFromOthersDisabled</td>\n<td data-sourcepos="64:25-64:33">Boolean</td>\n<td data-sourcepos="64:35-64:38">No</td>\n<td data-sourcepos="64:40-64:45">false</td>\n</tr>\n<tr data-sourcepos="65:1-65:30">\n<td data-sourcepos="65:1-65:13">zoneTabIndex</td>\n<td data-sourcepos="65:15-65:22">Number</td>\n<td data-sourcepos="65:24-65:27">No</td>\n<td data-sourcepos="65:29-65:30">0</td>\n</tr>\n<tr data-sourcepos="66:1-66:87">\n<td data-sourcepos="66:1-66:16">dropTargetStyle</td>\n<td data-sourcepos="66:18-66:33">Object</td>\n<td data-sourcepos="66:35-66:38">No</td>\n<td data-sourcepos="66:40-66:87">{outline: \'rgba(255, 255, 102, 0.7) solid 2px\'}</td>\n</tr>\n<tr data-sourcepos="67:1-67:43">\n<td data-sourcepos="67:1-67:18">dropTargetClasses</td>\n<td data-sourcepos="67:20-67:34">Array</td>\n<td data-sourcepos="67:36-67:39">No</td>\n<td data-sourcepos="67:41-67:43">[]</td>\n</tr>\n<tr data-sourcepos="68:1-68:50">\n<td data-sourcepos="68:1-68:24">transformDraggedElement</td>\n<td data-sourcepos="68:26-68:35">Function</td>\n<td data-sourcepos="68:37-68:40">No</td>\n<td data-sourcepos="68:42-68:50">() =&gt; {}</td>\n</tr>\n<tr data-sourcepos="69:1-69:39">\n<td data-sourcepos="69:1-69:17">autoAriaDisabled</td>\n<td data-sourcepos="69:19-69:27">Boolean</td>\n<td data-sourcepos="69:29-69:32">No</td>\n<td data-sourcepos="69:34-69:39">false</td>\n</tr>\n<tr data-sourcepos="70:1-70:44">\n<td data-sourcepos="70:1-70:22">centreDraggedOnCursor</td>\n<td data-sourcepos="70:24-70:32">Boolean</td>\n<td data-sourcepos="70:34-70:37">No</td>\n<td data-sourcepos="70:39-70:44">false</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos="72:1-72:57">よく使いそうなものを解説していきます。</p>\n<h4 data-sourcepos="74:1-74:21">\n<span id="flipdurationms" class="fragment"></span><a href="#flipdurationms"><i class="fa fa-link"></i></a><code>flipDurationMs</code>\n</h4>\n<p data-sourcepos="76:1-77:76">ドラッグされたアイテムが戻るときのアニメーションの秒数。<br>\n0または設定しないとアニメーションがないことにできる</p>\n<p data-sourcepos="79:1-80:118">0の場合<br>\n<a href="https://camo.qiitausercontent.com/5a5bd2bdf86a229985527d4f76799657a70d60f9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f30663466376535322d326363342d306266392d353136392d6637666531666535386564342e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0f4f7e52-2cc4-0bf9-5169-f7fe1fe58ed4.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d35dc5b274828a23402c6ee27e98a54b" alt="0.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0f4f7e52-2cc4-0bf9-5169-f7fe1fe58ed4.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0f4f7e52-2cc4-0bf9-5169-f7fe1fe58ed4.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c44bdafdb30b35243bbbc5eaa87280bb 1x" loading="lazy"></a></p>\n<p data-sourcepos="82:1-83:122">10000の場合(10秒かけて戻る)<br>\n<a href="https://camo.qiitausercontent.com/fd1692928ca03610540208d2bf8deeced674f78f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f35333930346364662d643135352d343939622d303239392d3331383463646337646466372e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F53904cdf-d155-499b-0299-3184cdc7ddf7.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2e09388f7c4e7215f72d81b9809b2839" alt="10000.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/53904cdf-d155-499b-0299-3184cdc7ddf7.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F53904cdf-d155-499b-0299-3184cdc7ddf7.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=cb94930687d0ab7b57831f1af7ffe560 1x" loading="lazy"></a></p>\n<h4 data-sourcepos="85:1-85:11">\n<span id="type" class="fragment"></span><a href="#type"><i class="fa fa-link"></i></a><code>type</code>\n</h4>\n<p data-sourcepos="87:1-88:80">同じタイプが設定されているdnd-zone同士ではドロップアンドドロップできます。<br>\nデフォルトではすべてのdnd-zoneが同じタイプになってます。</p>\n<h4 data-sourcepos="90:1-90:19">\n<span id="dragdisabled" class="fragment"></span><a href="#dragdisabled"><i class="fa fa-link"></i></a><code>dragDisabled</code>\n</h4>\n<p data-sourcepos="92:1-92:66">設定するとドラッグアンドドロップを禁止できる</p>\n<h4 data-sourcepos="94:1-94:29">\n<span id="dropfromothersdisabled" class="fragment"></span><a href="#dropfromothersdisabled"><i class="fa fa-link"></i></a><code>dropFromOthersDisabled</code>\n</h4>\n<p data-sourcepos="96:1-97:51">他のdnd-zoneからのドロップを許可するかどうか。<br>\nこちらからのドラッグは制限しない。</p>\n<h4 data-sourcepos="99:1-99:28">\n<span id="centredraggedoncursor" class="fragment"></span><a href="#centredraggedoncursor"><i class="fa fa-link"></i></a><code>centreDraggedOnCursor</code>\n</h4>\n<p data-sourcepos="101:1-101:115">trueにするとドラッグした際に、アイテムの中心を持つようにアイテムが移動します。</p>\n<p data-sourcepos="103:1-103:123"><a href="https://camo.qiitausercontent.com/808db9dc9f8fc8b8ae1612655630e3394334a6d8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f65373634643239652d396537302d383530392d633935352d3761393435333562623739642e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe764d29e-9e70-8509-c955-7a94535bb79d.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3281c400745a61b91f318fdef8e69c8d" alt="center.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e764d29e-9e70-8509-c955-7a94535bb79d.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe764d29e-9e70-8509-c955-7a94535bb79d.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7eea669a5ffaba9de75a6fe3970c32f3 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="106:1-106:60">\n<span id="カンバンツールっぽいものを実装してみた" class="fragment"></span><a href="#%E3%82%AB%E3%83%B3%E3%83%90%E3%83%B3%E3%83%84%E3%83%BC%E3%83%AB%E3%81%A3%E3%81%BD%E3%81%84%E3%82%82%E3%81%AE%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F"><i class="fa fa-link"></i></a>カンバンツールっぽいものを実装してみた</h2>\n<p data-sourcepos="108:1-108:48">以上を使って実装したのがこちら。</p>\n<p data-sourcepos="110:1-111:57">UIコンポーネントには<a href="https://flowbite-svelte.com/" rel="nofollow noopener" target="_blank">Flowbite-svelte</a>を利用しました。<br>\n導入方法は前回の記事で公開しています。</p>\n<p data-sourcepos="113:1-113:55"><iframe id="qiita-embed-content__18ab9541bab7d50db77d867d5df92d63" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__18ab9541bab7d50db77d867d5df92d63" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2F6e7e8571cc6c3d7ad2e8" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<p data-sourcepos="115:1-115:123"><a href="https://camo.qiitausercontent.com/9d2b5e5be1366b99de9385f1512459a3115632ea/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31636565383463632d346266392d306435642d393665632d6635613139616165636661322e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1cee84cc-4bf9-0d5d-96ec-f5a19aaecfa2.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=10f05922441bb189553c90e8c9a40094" alt="kanban.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1cee84cc-4bf9-0d5d-96ec-f5a19aaecfa2.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1cee84cc-4bf9-0d5d-96ec-f5a19aaecfa2.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=88712d0338c41f26be10ac42a6a9b553 1x" loading="lazy"></a></p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="118:1-130:3"><div class="highlight"><pre><code><span class="c1">// handler.ts</span>\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">DndConsider</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">items</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="nx">items</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">.</span><span class="nx">items</span><span class="p">;</span>\n\n  <span class="k">return</span> <span class="nx">items</span>\n<span class="p">}</span>\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">DndFinalize</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">items</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="nx">items</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">.</span><span class="nx">items</span><span class="p">;</span>\n\n  <span class="k">return</span> <span class="nx">items</span>\n<span class="p">}</span>\n</code></pre></div></div>\n<div class="code-frame" data-lang="vue" data-sourcepos="132:1-200:3"><div class="highlight"><pre><code>// Dnd.svelte\n<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span><span class="nx">flip</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">svelte/animate</span><span class="dl">"</span><span class="p">;</span>\n  <span class="k">import</span> <span class="p">{</span><span class="nx">dndzone</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">svelte-dnd-action</span><span class="dl">"</span><span class="p">;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">Card</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">flowbite-svelte</span><span class="dl">"</span><span class="p">;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">DndConsider</span><span class="p">,</span> <span class="nx">DndFinalize</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./handler</span><span class="dl">"</span><span class="p">;</span>\n\n  <span class="kd">let</span> <span class="nx">Aitems</span> <span class="o">=</span> <span class="p">[</span>\n      <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Aitem1</span><span class="dl">"</span><span class="p">},</span>\n      <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Aitem2</span><span class="dl">"</span><span class="p">},</span>\n      <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Aitem3</span><span class="dl">"</span><span class="p">},</span>\n      <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Aitem4</span><span class="dl">"</span><span class="p">}</span>\n  <span class="p">];</span>\n\n  <span class="kd">let</span> <span class="nx">Bitems</span> <span class="o">=</span> <span class="p">[</span>\n      <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Bitem1</span><span class="dl">"</span><span class="p">},</span>\n      <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Bitem2</span><span class="dl">"</span><span class="p">},</span>\n      <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Bitem3</span><span class="dl">"</span><span class="p">},</span>\n      <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Bitem4</span><span class="dl">"</span><span class="p">}</span>\n  <span class="p">];</span>\n\n  <span class="kd">const</span> <span class="nx">flipDurationMs</span> <span class="o">=</span> <span class="mi">300</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex"</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"w-1/2"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"text-4xl font-bold text-center"</span><span class="nt">&gt;</span>配列A<span class="nt">&lt;/h1&gt;</span>\n    <span class="nt">&lt;div</span>\n      <span class="na">class=</span><span class="s">"box mx-auto"</span>\n      <span class="na">use:dndzone=</span><span class="s">"{{items: Aitems, centreDraggedOnCursor: true, flipDurationMs}}"</span>\n      <span class="na">on:consider=</span><span class="s">"{e =&gt; Aitems = DndConsider(e, Aitems)}"</span>\n      <span class="na">on:finalize=</span><span class="s">"{e =&gt; Aitems = DndFinalize(e, Aitems)}"</span>\n    <span class="nt">&gt;</span>\n      {#each Aitems as item(item.id)}\n        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"my-2"</span> <span class="na">animate:flip=</span><span class="s">"{{duration: flipDurationMs}}"</span><span class="nt">&gt;</span>\n          <span class="nt">&lt;Card</span> <span class="na">class=</span><span class="s">"mx-auto"</span><span class="nt">&gt;</span>\n          {item.name}\n          <span class="nt">&lt;/Card&gt;</span>\n        <span class="nt">&lt;/div&gt;</span>\n      {/each}\n    <span class="nt">&lt;/div&gt;</span>\n  <span class="nt">&lt;/div&gt;</span>\n  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"w-1/2"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"text-4xl font-bold text-center"</span><span class="nt">&gt;</span>配列B<span class="nt">&lt;/h1&gt;</span>\n    <span class="nt">&lt;div</span>\n      <span class="na">class=</span><span class="s">"box mx-auto"</span>\n      <span class="na">use:dndzone=</span><span class="s">"{{items: Bitems, centreDraggedOnCursor: true, flipDurationMs}}"</span>\n      <span class="na">on:consider=</span><span class="s">"{e =&gt; Bitems = DndConsider(e, Bitems)}"</span>\n      <span class="na">on:finalize=</span><span class="s">"{e =&gt; Bitems = DndFinalize(e, Bitems)}"</span>\n    <span class="nt">&gt;</span>\n      {#each Bitems as item(item.id)}\n        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"my-2"</span> <span class="na">animate:flip=</span><span class="s">"{{duration: flipDurationMs}}"</span><span class="nt">&gt;</span>\n          <span class="nt">&lt;Card</span> <span class="na">class=</span><span class="s">"mx-auto"</span><span class="nt">&gt;</span>\n          {item.name}\n          <span class="nt">&lt;/Card&gt;</span>\n        <span class="nt">&lt;/div&gt;</span>\n      {/each}\n    <span class="nt">&lt;/div&gt;</span>\n  <span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/div&gt;</span>\n\n<span class="nt">&lt;</span><span class="k">style</span><span class="nt">&gt;</span>\n  <span class="nc">.box</span> <span class="p">{</span>\n    <span class="nl">width</span><span class="p">:</span> <span class="m">400px</span><span class="p">;</span>\n    <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>\n  <span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">style</span><span class="nt">&gt;</span>\n</code></pre></div></div>\n',body:'# はじめに\n\nカンバンボードのようなものを作りたく、\nドラッグアンドドロップのツールを探していました。\n\n公式でドラッグアンドドロップのonイベントは用意されていますが、もう少し簡単に実装できないかと思い、\n`svelte-dnd-action`を使ってみました。\n\n[公式の例](https://svelte.dev/repl/adf5a97b91164c239cc1e6d0c76c2abe?version=3.14.1)\n\n## svelte-dnd-action導入\n\n```bash\n$ npm install --save-dev svelte-dnd-action\n```\n\n## 使い方\n\nまずは参考コードから。\n```vue\n<script lang="ts">\n  const myItems = {\n    id: 1, name: \'item1\',\n  }\n<\/script>\n\n<div\n  use:dndzone="{{items: myItems, ...otherOptions}}"\n  on:consider="{handler}"\n  on:finalize="{handler}"\n>\n  {#each myItems as item(item.id)}\n      <div>{item.name}</div>\n  {/each}\n</div>\n```\n\n`<div>`タグに注目すると、`use:dndzone`、`on:consider`、`on:finalize`を発見。\n\n```vue\n<div\n  use:dndzone="{{items: myItems, ...otherOptions}}"\n  on:consider="{handler}"\n  on:finalize="{handler}"\n>\n```\n\nこの3つをドラッグアンドドロップさせたい範囲に設定することでドラッグアンドドロップを機能させています。\n\n### `use:dndzone`\n\nドラッグアンドドロップをさせたい配列を指定するメソッド。\n`otherOptions`には文字通り、オプションを指定する。\nオプションは以下の通り\n\n### オプション\n\nName | Type | 必須 | デフォルト\n-----|------|----|------\nflipDurationMs | Number | No | 0\ntype | String | No | Internal\ndragDisabled | Boolean | No | false\nmorphDisabled | Boolean | No | false\ndropFromOthersDisabled | Boolean | No | false\nzoneTabIndex | Number | No | 0\ndropTargetStyle | Object<String> | No | {outline: \'rgba(255, 255, 102, 0.7) solid 2px\'}\ndropTargetClasses | Array<String> | No | []\ntransformDraggedElement | Function | No | () => {}\nautoAriaDisabled | Boolean | No | false\ncentreDraggedOnCursor | Boolean | No | false\n\nよく使いそうなものを解説していきます。\n\n#### `flipDurationMs` \n\nドラッグされたアイテムが戻るときのアニメーションの秒数。\n0または設定しないとアニメーションがないことにできる\n\n0の場合\n![0.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0f4f7e52-2cc4-0bf9-5169-f7fe1fe58ed4.gif)\n\n10000の場合(10秒かけて戻る)\n![10000.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/53904cdf-d155-499b-0299-3184cdc7ddf7.gif)\n\n#### `type`\n\n同じタイプが設定されているdnd-zone同士ではドロップアンドドロップできます。\nデフォルトではすべてのdnd-zoneが同じタイプになってます。\n\n#### `dragDisabled`\n\n設定するとドラッグアンドドロップを禁止できる\n\n#### `dropFromOthersDisabled`\n\n他のdnd-zoneからのドロップを許可するかどうか。\nこちらからのドラッグは制限しない。\n\n#### `centreDraggedOnCursor`\n\ntrueにするとドラッグした際に、アイテムの中心を持つようにアイテムが移動します。\n\n![center.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e764d29e-9e70-8509-c955-7a94535bb79d.gif)\n\n\n## カンバンツールっぽいものを実装してみた\n\n以上を使って実装したのがこちら。\n\nUIコンポーネントには[Flowbite-svelte](https://flowbite-svelte.com/)を利用しました。\n導入方法は前回の記事で公開しています。\n\nhttps://qiita.com/doyaseizin/items/6e7e8571cc6c3d7ad2e8\n\n![kanban.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1cee84cc-4bf9-0d5d-96ec-f5a19aaecfa2.gif)\n\n\n```typescript\n// handler.ts\nexport const DndConsider = (e, items) => {\n  items = e.detail.items;\n\n  return items\n}\nexport const DndFinalize = (e, items) => {\n  items = e.detail.items;\n\n  return items\n}\n```\n\n```vue\n// Dnd.svelte\n<script>\n  import {flip} from "svelte/animate";\n  import {dndzone} from "svelte-dnd-action";\n  import { Card } from "flowbite-svelte";\n  import { DndConsider, DndFinalize } from "./handler";\n\n  let Aitems = [\n      {id: 1, name: "Aitem1"},\n      {id: 2, name: "Aitem2"},\n      {id: 3, name: "Aitem3"},\n      {id: 4, name: "Aitem4"}\n  ];\n\n  let Bitems = [\n      {id: 5, name: "Bitem1"},\n      {id: 6, name: "Bitem2"},\n      {id: 7, name: "Bitem3"},\n      {id: 8, name: "Bitem4"}\n  ];\n\n  const flipDurationMs = 300;\n<\/script>\n\n<div class="flex">\n  <div class="w-1/2">\n    <h1 class="text-4xl font-bold text-center">配列A</h1>\n    <div\n      class="box mx-auto"\n      use:dndzone="{{items: Aitems, centreDraggedOnCursor: true, flipDurationMs}}"\n      on:consider="{e => Aitems = DndConsider(e, Aitems)}"\n      on:finalize="{e => Aitems = DndFinalize(e, Aitems)}"\n    >\n      {#each Aitems as item(item.id)}\n        <div class="my-2" animate:flip="{{duration: flipDurationMs}}">\n          <Card class="mx-auto">\n          {item.name}\n          </Card>\n        </div>\n      {/each}\n    </div>\n  </div>\n  <div class="w-1/2">\n    <h1 class="text-4xl font-bold text-center">配列B</h1>\n    <div\n      class="box mx-auto"\n      use:dndzone="{{items: Bitems, centreDraggedOnCursor: true, flipDurationMs}}"\n      on:consider="{e => Bitems = DndConsider(e, Bitems)}"\n      on:finalize="{e => Bitems = DndFinalize(e, Bitems)}"\n    >\n      {#each Bitems as item(item.id)}\n        <div class="my-2" animate:flip="{{duration: flipDurationMs}}">\n          <Card class="mx-auto">\n          {item.name}\n          </Card>\n        </div>\n      {/each}\n    </div>\n  </div>\n</div>\n\n<style>\n  .box {\n    width: 400px;\n    border: 1px solid black;\n  }\n</style>\n```\n',coediting:!1,comments_count:0,created_at:"2022-12-10T12:43:04+09:00",group:null,id:"94c5147f5ecb8a2dca74",likes_count:2,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Svelte",versions:[]},{name:"SvelteKit",versions:[]}],title:"svelte-dnd-actionを使ってsvelteでドラッグアンドドロップを実装",updated_at:"2022-12-10T15:54:14+09:00",url:"https://qiita.com/maaaashi/items/94c5147f5ecb8a2dca74",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:1020,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:100"><code>SvelteKit</code>を用いてWebアプリケーションを実装した際、<br>\nUIコンポーネントとして<a href="https://flowbite-svelte.com/" rel="nofollow noopener" target="_blank">Flowbite-svelte</a>を使いました。</p>\n<p data-sourcepos="6:1-6:122"><a href="https://camo.qiitausercontent.com/8034091deaccb109d5dce3729c0d4fe407d73f6f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f32666638306262382d386234362d376539632d636532652d3233333035386138396466322e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F2ff80bb8-8b46-7e9c-ce2e-233058a89df2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=85b47389e132654d45e3734c3913bfc9" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/2ff80bb8-8b46-7e9c-ce2e-233058a89df2.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F2ff80bb8-8b46-7e9c-ce2e-233058a89df2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6e10811899aea3e525673543aa6157f9 1x" loading="lazy"></a></p>\n<p data-sourcepos="8:1-8:90"><code>Svelte</code>の<code>$app/stores</code>モジュールを使って実装したのでその時のメモ。</p>\n<h2 data-sourcepos="10:1-10:9">\n<span id="前提" class="fragment"></span><a href="#%E5%89%8D%E6%8F%90"><i class="fa fa-link"></i></a>前提</h2>\n<ul data-sourcepos="12:1-14:0">\n<li data-sourcepos="12:1-12:58">\n<code>SvelteKit</code>のアプリケーションが動くこと。</li>\n<li data-sourcepos="13:1-14:0">\n<code>Flowbite-svelte</code>を導入していること。</li>\n</ul>\n<p data-sourcepos="15:1-15:57">↑に関しては前の記事で解説しています。</p>\n<p data-sourcepos="17:1-17:55"><iframe id="qiita-embed-content__dce807663ace21752e56b3e93deed5aa" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__dce807663ace21752e56b3e93deed5aa" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2F6e7e8571cc6c3d7ad2e8" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<h2 data-sourcepos="19:1-19:9">\n<span id="実装" class="fragment"></span><a href="#%E5%AE%9F%E8%A3%85"><i class="fa fa-link"></i></a>実装</h2>\n<h3 data-sourcepos="21:1-21:21">\n<span id="breadcrumbsvelte" class="fragment"></span><a href="#breadcrumbsvelte"><i class="fa fa-link"></i></a>Breadcrumb.svelte</h3>\n<div class="code-frame" data-lang="vue" data-sourcepos="22:1-59:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">Breadcrumb</span><span class="p">,</span> <span class="nx">BreadcrumbItem</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">flowbite-svelte</span><span class="dl">\'</span><span class="p">;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">page</span> <span class="p">}</span>  <span class="k">from</span> <span class="dl">\'</span><span class="s1">$app/stores</span><span class="dl">\'</span><span class="p">;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">pathname</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">./pathname</span><span class="dl">\'</span><span class="p">;</span>\n\n  <span class="kr">interface</span> <span class="nx">Paths</span> <span class="p">{</span>\n    <span class="nl">route</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>\n    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>\n  <span class="p">}</span>\n\n  <span class="nl">$</span><span class="p">:</span> <span class="nx">paths</span> <span class="o">=</span> <span class="nf">createBreadcrumb</span><span class="p">(</span><span class="nx">$page</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">pathname</span><span class="p">);</span>\n  \n  <span class="kd">const</span> <span class="nx">createBreadcrumb</span> <span class="o">=</span> <span class="p">(</span><span class="nx">routes</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="kd">let</span> <span class="na">swap_paths</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">Paths</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[];</span>\n      <span class="nx">routes</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">\'</span><span class="s1">/</span><span class="dl">\'</span><span class="p">).</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">route</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n      <span class="nx">swap_paths</span><span class="p">.</span><span class="nf">push</span><span class="p">({</span><span class="na">route</span><span class="p">:</span> <span class="nx">route</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="nx">pathname</span><span class="p">[</span><span class="nx">route</span><span class="p">]})</span>\n    <span class="p">})</span>\n\n    <span class="k">return</span> <span class="nx">swap_paths</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="k">new</span> <span class="nc">Map</span><span class="p">(</span><span class="nx">swap_paths</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">o</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">o</span><span class="p">.</span><span class="nx">route</span><span class="p">,</span> <span class="nx">o</span><span class="p">])).</span><span class="nf">values</span><span class="p">());</span>\n  <span class="p">}</span>\n\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;Breadcrumb&gt;</span>\n  {#each paths as { route, name }, index}\n    {#if paths.length == 1 }\n      <span class="nt">&lt;BreadcrumbItem</span> <span class="na">home</span><span class="nt">&gt;</span>{name}<span class="nt">&lt;/BreadcrumbItem&gt;</span>\n    {:else if index == 0 }\n      <span class="nt">&lt;BreadcrumbItem</span> <span class="na">href=</span><span class="s">"/"</span> <span class="na">home</span><span class="nt">&gt;</span>{name}<span class="nt">&lt;/BreadcrumbItem&gt;</span>\n    {:else if index == paths.length - 1 }\n      <span class="nt">&lt;BreadcrumbItem&gt;</span>{name}<span class="nt">&lt;/BreadcrumbItem&gt;</span>\n    {:else}\n      <span class="nt">&lt;BreadcrumbItem</span> <span class="na">href=</span><span class="s">"/{route}"</span><span class="nt">&gt;</span>{name}<span class="nt">&lt;/BreadcrumbItem&gt;</span>\n    {/if}\n  {/each}\n<span class="nt">&lt;/Breadcrumb&gt;</span>\n</code></pre></div></div>\n<h3 data-sourcepos="61:1-61:15">\n<span id="pathnamets" class="fragment"></span><a href="#pathnamets"><i class="fa fa-link"></i></a>pathname.ts</h3>\n<div class="code-frame" data-lang="typescript" data-sourcepos="63:1-69:3"><div class="highlight"><pre><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">pathname</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="dl">\'\'</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">Home</span><span class="dl">\'</span><span class="p">,</span>\n  <span class="dl">\'</span><span class="s1">list</span><span class="dl">\'</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">一覧</span><span class="dl">\'</span><span class="p">,</span>\n  <span class="dl">\'</span><span class="s1">new</span><span class="dl">\'</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">新規作成</span><span class="dl">\'</span>\n<span class="p">}</span>\n</code></pre></div></div>\n<h2 data-sourcepos="71:1-71:9">\n<span id="解説" class="fragment"></span><a href="#%E8%A7%A3%E8%AA%AC"><i class="fa fa-link"></i></a>解説</h2>\n<h3 data-sourcepos="73:1-73:57">\n<span id="-appstoresモジュールのpageについて" class="fragment"></span><a href="#-appstores%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AEpage%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><i class="fa fa-link"></i></a>① <code>$app/stores</code>モジュールの<code>page</code>について</h3>\n<p data-sourcepos="75:1-75:103">ソースコードの解説の前に<code>$app/stores</code>モジュールの<code>page</code>について解説します。</p>\n<p data-sourcepos="78:1-79:60">こちらのモジュールには、ページ情報が保存されています。<br>\nよく使うものを抜粋し、解説していきます。</p>\n<h4 data-sourcepos="81:1-81:10">\n<span id="error" class="fragment"></span><a href="#error"><i class="fa fa-link"></i></a>error</h4>\n<p data-sourcepos="83:1-84:77">エラー時のメッセージが格納されています。<br>\n<code>status</code>と組み合わせてエラーページを自作できそうです。</p>\n<p data-sourcepos="86:1-86:17">例) 404の場合</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="88:1-90:3"><div class="highlight"><pre><code><span class="nx">error</span><span class="p">:</span> <span class="p">{</span> <span class="nl">message</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">Not Found</span><span class="dl">\'</span> <span class="p">}</span>\n</code></pre></div></div>\n<h4 data-sourcepos="92:1-92:11">\n<span id="params" class="fragment"></span><a href="#params"><i class="fa fa-link"></i></a>params</h4>\n<p data-sourcepos="94:1-95:75">パスパラメータが格納されています。<br>\n記事ごとのページを表示したりするのに使いそうです。</p>\n<p data-sourcepos="97:1-97:37">例) /user/[id] ⇒ /user/1 の場合</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="98:1-100:3"><div class="highlight"><pre><code><span class="nx">params</span><span class="p">:</span> <span class="p">{</span> <span class="nl">id</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}</span>\n</code></pre></div></div>\n<h4 data-sourcepos="102:1-102:11">\n<span id="status" class="fragment"></span><a href="#status"><i class="fa fa-link"></i></a>status</h4>\n<p data-sourcepos="104:1-105:142">レスポンスステータスコードが格納されています。<br>\n先ほどの<code>error</code>と組み合わせてエラーページを作ったり、状態に合わせて表示物を変えたりできそうです。</p>\n<p data-sourcepos="107:1-107:23">例) 200や404の場合</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="109:1-115:3"><div class="highlight"><pre><code><span class="c1">// 200</span>\n<span class="nx">status</span><span class="p">:</span> <span class="mi">200</span>\n\n<span class="c1">// 404 Not Found</span>\n<span class="nx">status</span><span class="p">:</span> <span class="mi">404</span>\n</code></pre></div></div>\n<h4 data-sourcepos="117:1-117:8">\n<span id="url" class="fragment"></span><a href="#url"><i class="fa fa-link"></i></a>url</h4>\n<p data-sourcepos="119:1-119:30">URL情報が載っています</p>\n<p data-sourcepos="121:1-121:35">例) <a href="http://localhost:8080%E3%81%AE%E5%A0%B4%E5%90%88" class="autolink">http://localhost:8080の場合</a></p>\n<p data-sourcepos="123:1-123:122"><a href="https://camo.qiitausercontent.com/2f539aab67e2843346daa1cdd905532e88f0a65b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f36383561393531302d343137392d613461662d336262392d3039306534333234363334342e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F685a9510-4179-a4af-3bb9-090e43246344.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=491f1bd98b65c747bcc93c1e94f0d57d" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/685a9510-4179-a4af-3bb9-090e43246344.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F685a9510-4179-a4af-3bb9-090e43246344.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ab032f8a89121f9234da498b810a6e68 1x" loading="lazy"></a></p>\n<h3 data-sourcepos="125:1-125:32">\n<span id="-ソースコード解説" class="fragment"></span><a href="#-%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E8%A7%A3%E8%AA%AC"><i class="fa fa-link"></i></a>② ソースコード解説</h3>\n<p data-sourcepos="127:1-128:69">Flowbite-svelteのパンくずリストは、<br>\nクリック時の遷移先と、表示テキストが必要でした</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="130:1-132:3"><div class="highlight"><pre><code>  <span class="nt">&lt;BreadcrumbItem</span> <span class="na">href=</span><span class="s">"/"</span> <span class="na">home</span><span class="nt">&gt;</span>{name}<span class="nt">&lt;/BreadcrumbItem&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="134:1-135:31">そのため、遷移先から表示テキストが参照できるようなHashオブジェクトを作成した。<br>\nそれが<code>pathname.ts</code>です。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="137:1-147:3"><div class="highlight"><pre><code><span class="c1">// pathname.ts</span>\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">pathname</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="dl">\'\'</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">Home</span><span class="dl">\'</span><span class="p">,</span>\n  <span class="dl">\'</span><span class="s1">list</span><span class="dl">\'</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">一覧</span><span class="dl">\'</span><span class="p">,</span>\n  <span class="dl">\'</span><span class="s1">new</span><span class="dl">\'</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">新規作成</span><span class="dl">\'</span>\n<span class="p">}</span>\n\n<span class="nx">pathname</span><span class="p">[</span><span class="dl">\'</span><span class="s1">list</span><span class="dl">\'</span><span class="p">]</span>\n<span class="c1">// ⇒ \'一覧\'</span>\n</code></pre></div></div>\n<p data-sourcepos="149:1-150:96">次に、与えられたパスから、<br>\nパンくずリストで使う形式の配列を作成するメソッドを作成しました。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="152:1-164:3"><div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">createBreadcrumb</span> <span class="o">=</span> <span class="p">(</span><span class="nx">routes</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n<span class="kd">let</span> <span class="na">swap_paths</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">Paths</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[];</span>\n  <span class="nx">routes</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">\'</span><span class="s1">/</span><span class="dl">\'</span><span class="p">).</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">route</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="nx">swap_paths</span><span class="p">.</span><span class="nf">push</span><span class="p">({</span><span class="na">route</span><span class="p">:</span> <span class="nx">route</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="nx">pathname</span><span class="p">[</span><span class="nx">route</span><span class="p">]})</span>\n<span class="p">})</span>\n\n<span class="k">return</span> <span class="nx">swap_paths</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="k">new</span> <span class="nc">Map</span><span class="p">(</span><span class="nx">swap_paths</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">o</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">o</span><span class="p">.</span><span class="nx">route</span><span class="p">,</span> <span class="nx">o</span><span class="p">])).</span><span class="nf">values</span><span class="p">());</span>\n<span class="p">}</span>\n\n<span class="nf">createBreadcrumb</span><span class="p">(</span><span class="dl">\'</span><span class="s1">/list</span><span class="dl">\'</span><span class="p">)</span> \n<span class="c1">// ⇒ [{route: \'\', name: \'Home\'}, {route: \'list\', name: \'一覧\'}]</span>\n</code></pre></div></div>\n<p data-sourcepos="166:1-166:120">そしてそのメソッドを、パスの変化に合わせてパンくずリストの配列に代入しています。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="168:1-170:3"><div class="highlight"><pre><code><span class="nx">$</span><span class="p">:</span> <span class="nx">paths</span> <span class="o">=</span> <span class="nf">createBreadcrumb</span><span class="p">(</span><span class="nx">$page</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">pathname</span><span class="p">);</span>\n</code></pre></div></div>\n<p data-sourcepos="172:1-173:72">あとはFlowbite-svelteのパンくずリストコンポーネントに合わせて、eachで回せばOK<br>\n(Homeは家のアイコンが出るように等工夫しています。)</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="175:1-189:3"><div class="highlight"><pre><code><span class="nt">&lt;Breadcrumb&gt;</span>\n  {#each paths as { route, name }, index}\n    {#if paths.length == 1 }\n      <span class="nt">&lt;BreadcrumbItem</span> <span class="na">home</span><span class="nt">&gt;</span>{name}<span class="nt">&lt;/BreadcrumbItem&gt;</span>\n    {:else if index == 0 }\n      <span class="nt">&lt;BreadcrumbItem</span> <span class="na">href=</span><span class="s">"/"</span> <span class="na">home</span><span class="nt">&gt;</span>{name}<span class="nt">&lt;/BreadcrumbItem&gt;</span>\n    {:else if index == paths.length - 1 }\n      <span class="nt">&lt;BreadcrumbItem&gt;</span>{name}<span class="nt">&lt;/BreadcrumbItem&gt;</span>\n    {:else}\n      <span class="nt">&lt;BreadcrumbItem</span> <span class="na">href=</span><span class="s">"/{route}"</span><span class="nt">&gt;</span>{name}<span class="nt">&lt;/BreadcrumbItem&gt;</span>\n    {/if}\n  {/each}\n<span class="nt">&lt;/Breadcrumb&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="191:1-191:19">終わりです👍</p>\n<p data-sourcepos="193:1-193:127"><a href="https://camo.qiitausercontent.com/520a847d6bb5421bc70da74a6678ff18164dfb61/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31316365313833372d623030652d323664372d313838332d6262356330613031376330622e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F11ce1837-b00e-26d7-1883-bb5c0a017c0b.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b7c4585968b090705dbb6a64c8370778" alt="breadcrumb.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/11ce1837-b00e-26d7-1883-bb5c0a017c0b.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F11ce1837-b00e-26d7-1883-bb5c0a017c0b.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9c9b382ddbcdbd9cee57803590410ef3 1x" loading="lazy"></a></p>\n',body:"# はじめに\n\n`SvelteKit`を用いてWebアプリケーションを実装した際、\nUIコンポーネントとして[Flowbite-svelte](https://flowbite-svelte.com/)を使いました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/2ff80bb8-8b46-7e9c-ce2e-233058a89df2.png)\n\n`Svelte`の`$app/stores`モジュールを使って実装したのでその時のメモ。\n\n## 前提\n\n* `SvelteKit`のアプリケーションが動くこと。\n* `Flowbite-svelte`を導入していること。\n\n↑に関しては前の記事で解説しています。\n\nhttps://qiita.com/doyaseizin/items/6e7e8571cc6c3d7ad2e8\n\n## 実装\n\n### Breadcrumb.svelte\n```vue\n<script lang=\"ts\">\n  import { Breadcrumb, BreadcrumbItem } from 'flowbite-svelte';\n  import { page }  from '$app/stores';\n  import { pathname } from './pathname';\n\n  interface Paths {\n    route: string;\n    name: string;\n  }\n\n  $: paths = createBreadcrumb($page.url.pathname);\n  \n  const createBreadcrumb = (routes) => {\n    let swap_paths: Array<Paths> = [];\n      routes.split('/').forEach((route) => {\n      swap_paths.push({route: route, name: pathname[route]})\n    })\n\n    return swap_paths = Array.from(new Map(swap_paths.map(o => [o.route, o])).values());\n  }\n\n<\/script>\n\n<Breadcrumb>\n  {#each paths as { route, name }, index}\n    {#if paths.length == 1 }\n      <BreadcrumbItem home>{name}</BreadcrumbItem>\n    {:else if index == 0 }\n      <BreadcrumbItem href=\"/\" home>{name}</BreadcrumbItem>\n    {:else if index == paths.length - 1 }\n      <BreadcrumbItem>{name}</BreadcrumbItem>\n    {:else}\n      <BreadcrumbItem href=\"/{route}\">{name}</BreadcrumbItem>\n    {/if}\n  {/each}\n</Breadcrumb>\n```\n\n### pathname.ts\n\n```typescript\nexport const pathname = {\n  '': 'Home',\n  'list': '一覧',\n  'new': '新規作成'\n}\n```\n\n## 解説\n\n### ① `$app/stores`モジュールの`page`について\n\nソースコードの解説の前に`$app/stores`モジュールの`page`について解説します。\n\n\nこちらのモジュールには、ページ情報が保存されています。\nよく使うものを抜粋し、解説していきます。\n\n#### error\n\nエラー時のメッセージが格納されています。\n`status`と組み合わせてエラーページを自作できそうです。\n\n例) 404の場合\n\n```typescript\nerror: { message: 'Not Found' }\n```\n\n#### params\n\nパスパラメータが格納されています。\n記事ごとのページを表示したりするのに使いそうです。\n\n例) /user/[id] ⇒ /user/1 の場合\n```typescript\nparams: { id: 1 }\n```\n\n#### status\n\nレスポンスステータスコードが格納されています。\n先ほどの`error`と組み合わせてエラーページを作ったり、状態に合わせて表示物を変えたりできそうです。\n\n例) 200や404の場合\n\n```typescript\n// 200\nstatus: 200\n\n// 404 Not Found\nstatus: 404\n```\n\n#### url\n\nURL情報が載っています\n\n例) http://localhost:8080の場合\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/685a9510-4179-a4af-3bb9-090e43246344.png)\n\n### ② ソースコード解説\n\nFlowbite-svelteのパンくずリストは、\nクリック時の遷移先と、表示テキストが必要でした\n\n```vue\n  <BreadcrumbItem href=\"/\" home>{name}</BreadcrumbItem>\n```\n\nそのため、遷移先から表示テキストが参照できるようなHashオブジェクトを作成した。\nそれが`pathname.ts`です。\n\n```typescript\n// pathname.ts\nexport const pathname = {\n  '': 'Home',\n  'list': '一覧',\n  'new': '新規作成'\n}\n\npathname['list']\n// ⇒ '一覧'\n```\n\n次に、与えられたパスから、\nパンくずリストで使う形式の配列を作成するメソッドを作成しました。\n\n```typescript\nconst createBreadcrumb = (routes) => {\nlet swap_paths: Array<Paths> = [];\n  routes.split('/').forEach((route) => {\n  swap_paths.push({route: route, name: pathname[route]})\n})\n\nreturn swap_paths = Array.from(new Map(swap_paths.map(o => [o.route, o])).values());\n}\n\ncreateBreadcrumb('/list') \n// ⇒ [{route: '', name: 'Home'}, {route: 'list', name: '一覧'}]\n```\n\nそしてそのメソッドを、パスの変化に合わせてパンくずリストの配列に代入しています。\n\n```typescript\n$: paths = createBreadcrumb($page.url.pathname);\n```\n\nあとはFlowbite-svelteのパンくずリストコンポーネントに合わせて、eachで回せばOK\n(Homeは家のアイコンが出るように等工夫しています。)\n\n```vue\n<Breadcrumb>\n  {#each paths as { route, name }, index}\n    {#if paths.length == 1 }\n      <BreadcrumbItem home>{name}</BreadcrumbItem>\n    {:else if index == 0 }\n      <BreadcrumbItem href=\"/\" home>{name}</BreadcrumbItem>\n    {:else if index == paths.length - 1 }\n      <BreadcrumbItem>{name}</BreadcrumbItem>\n    {:else}\n      <BreadcrumbItem href=\"/{route}\">{name}</BreadcrumbItem>\n    {/if}\n  {/each}\n</Breadcrumb>\n```\n\n終わりです👍\n\n![breadcrumb.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/11ce1837-b00e-26d7-1883-bb5c0a017c0b.gif)\n",coediting:!1,comments_count:0,created_at:"2022-12-09T13:18:02+09:00",group:null,id:"3b744cc142b8650e460d",likes_count:1,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Svelte",versions:[]},{name:"SvelteKit",versions:[]}],title:"SvelteKitでパンくずリストを実装した話",updated_at:"2022-12-10T12:08:29+09:00",url:"https://qiita.com/maaaashi/items/3b744cc142b8650e460d",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:802,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-3:92">SvelteKitの開発を始め、いくつかのUIコンポーネントを試しましたが、</p>\n<ul data-sourcepos="6:1-8:0">\n<li data-sourcepos="6:1-6:47">一部のコンポーネントが動かない</li>\n<li data-sourcepos="7:1-8:0">一部のクラスが動かない</li>\n</ul>\n<p data-sourcepos="9:1-10:68">等の事象が発生し、なかなかこれだ！というものに決まりませんでした。。<br>\n(きっと私の構築方法が悪いんだと思いますが、、)</p>\n<p data-sourcepos="13:1-13:110"><code>Flowbite-Svelte</code>が私の環境では唯一ちゃんと動いたので実装方法を載せておきます。</p>\n<h1 data-sourcepos="16:1-16:23">\n<span id="sveltekitの構築" class="fragment"></span><a href="#sveltekit%E3%81%AE%E6%A7%8B%E7%AF%89"><i class="fa fa-link"></i></a>①SvelteKitの構築</h1>\n<ol data-sourcepos="18:1-67:0">\n<li data-sourcepos="18:1-45:0">\n<p data-sourcepos="18:4-18:20"><code>SvelteKit</code>構築</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="20:5-44:7"><div class="highlight"><pre><code><span class="nv">$ </span>npm create svelte@latest\nNeed to <span class="nb">install </span>the following packages:\n  create-svelte@2.0.0-next.198\nOk to proceed? <span class="o">(</span>y<span class="o">)</span> y\n\ncreate-svelte version 2.0.0-next.198\n\nWelcome to SvelteKit!\n\nThis is release candidate software<span class="p">;</span> expect bugs and missing features.\n\nProblems? Open an issue on https://github.com/sveltejs/kit/issues <span class="k">if </span>none exists already.\n\n✔ Where should we create your project?\n  <span class="o">(</span>leave blank to use current directory<span class="o">)</span> … \n✔ Which Svelte app template? › SvelteKit demo app\n✔ Add <span class="nb">type </span>checking with TypeScript? › Yes, using TypeScript syntax\n✔ Add ESLint <span class="k">for </span>code linting? … No / Yes ›  No\n✔ Add Prettier <span class="k">for </span>code formatting? … No / Yes ›  No\n✔ Add Playwright <span class="k">for </span>browser testing? … No / Yes ›  No\n✔ Add Vitest <span class="k">for </span>unit testing? … No / Yes ›  No\n\n<span class="nv">$ </span>npm <span class="nb">install</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="46:1-67:0">\n<p data-sourcepos="46:4-46:47">localhost:8080で開くように調整する</p>\n<div class="code-frame" data-lang="javascript" data-sourcepos="48:5-64:7"><div class="highlight"><pre><code><span class="c1">// vite.config.js</span>\n\n<span class="k">import</span> <span class="p">{</span> <span class="nx">sveltekit</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@sveltejs/kit/vite</span><span class="dl">\'</span><span class="p">;</span>\n\n<span class="cm">/** @type {import(\'vite\').UserConfig} */</span>\n<span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>\n\t<span class="na">darkMode</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">class</span><span class="dl">\'</span><span class="p">,</span>\n\t<span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nf">sveltekit</span><span class="p">()],</span>\n\t<span class="na">server</span><span class="p">:</span> <span class="p">{</span>          <span class="c1">// 追加</span>\n\t\t<span class="na">host</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>    <span class="c1">// 追加</span>\n\t\t<span class="na">port</span><span class="p">:</span> <span class="mi">8080</span>     <span class="c1">// 追加</span>\n\t<span class="p">}</span>                  <span class="c1">// 追加</span>\n<span class="p">};</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="nx">config</span><span class="p">;</span>\n</code></pre></div></div>\n<p data-sourcepos="66:5-66:85"><code>8080</code>以外のポートを開けたい場合は<code>port</code>の部分を調整する。</p>\n</li>\n</ol>\n<p data-sourcepos="68:1-68:122"><a href="https://camo.qiitausercontent.com/f902c2cc1ba401c3619194211ac0c16192317dfc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f38366137616439652d353630352d363239662d356439302d6136346231663135633038642e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F86a7ad9e-5605-629f-5d90-a64b1f15c08d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=24475b618f3b1c75d15b42d9939be3d7" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/86a7ad9e-5605-629f-5d90-a64b1f15c08d.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F86a7ad9e-5605-629f-5d90-a64b1f15c08d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7857aacd7f543cf8da1dec04d77f1e59 1x" loading="lazy"></a></p>\n<h1 data-sourcepos="70:1-70:38">\n<span id="tailwind-cssのインストール" class="fragment"></span><a href="#tailwind-css%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>②Tailwind CSSのインストール</h1>\n<p data-sourcepos="72:1-72:58"><code>svelte-add</code>を使って<code>tailwindcss</code>をインストール</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="74:1-77:3"><div class="highlight"><pre><code><span class="nv">$ </span>npx svelte-add@latest tailwindcss\n<span class="nv">$ </span>npm <span class="nb">install</span>\n</code></pre></div></div>\n<h1 data-sourcepos="79:1-79:52">\n<span id="flowbite及び依存関係のインストール" class="fragment"></span><a href="#flowbite%E5%8F%8A%E3%81%B3%E4%BE%9D%E5%AD%98%E9%96%A2%E4%BF%82%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>③Flowbite及び依存関係のインストール</h1>\n<div class="code-frame" data-lang="bash" data-sourcepos="81:1-83:3"><div class="highlight"><pre><code><span class="nv">$ </span>npm i <span class="nt">-D</span> flowbite flowbite-svelte classnames @popperjs/core\n</code></pre></div></div>\n<h1 data-sourcepos="85:1-85:33">\n<span id="tailwindconfigcjsの修正" class="fragment"></span><a href="#tailwindconfigcjs%E3%81%AE%E4%BF%AE%E6%AD%A3"><i class="fa fa-link"></i></a>④tailwind.config.cjsの修正</h1>\n<div class="code-frame" data-lang="javascript" data-sourcepos="87:1-106:3"><div class="highlight"><pre><code><span class="c1">// tailwind.config.cjs</span>\n<span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">content</span><span class="p">:</span> <span class="p">[</span>\n    <span class="dl">"</span><span class="s2">./src/**/*.{html,js,svelte,ts}</span><span class="dl">"</span><span class="p">,</span>\n    <span class="dl">"</span><span class="s2">./node_modules/flowbite-svelte/**/*.{html,js,svelte,ts}</span><span class="dl">"</span><span class="p">,</span>\n  <span class="p">],</span>\n\n  <span class="na">theme</span><span class="p">:</span> <span class="p">{</span>\n    <span class="na">extend</span><span class="p">:</span> <span class="p">{},</span>\n  <span class="p">},</span>\n\n  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>\n    <span class="nf">require</span><span class="p">(</span><span class="dl">\'</span><span class="s1">flowbite/plugin</span><span class="dl">\'</span><span class="p">)</span>\n  <span class="p">],</span>\n  <span class="na">darkMode</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">class</span><span class="dl">\'</span><span class="p">,</span>\n<span class="p">};</span>\n\n<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>\n</code></pre></div></div>\n<h1 data-sourcepos="108:1-108:21">\n<span id="stylescssの修正" class="fragment"></span><a href="#stylescss%E3%81%AE%E4%BF%AE%E6%AD%A3"><i class="fa fa-link"></i></a>styles.cssの修正</h1>\n<p data-sourcepos="110:1-110:57">デモアプリのcssが効いているので全て削除</p>\n<h1 data-sourcepos="112:1-112:8">\n<span id="完了" class="fragment"></span><a href="#%E5%AE%8C%E4%BA%86"><i class="fa fa-link"></i></a>完了</h1>\n<div class="code-frame" data-lang="vue" data-sourcepos="114:1-120:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">flowbite-svelte</span><span class="dl">\'</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;Button&gt;</span>デフォルトボタン<span class="nt">&lt;/Button&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="122:1-122:122"><a href="https://camo.qiitausercontent.com/3be1a12258ea36530fe278a30496eb60e99ff006/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f38653839353831322d353431302d656236372d356464382d6230626639383330366232622e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F8e895812-5410-eb67-5dd8-b0bf98306b2b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3b0c126fd1043cc73b1dc682678a9dca" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/8e895812-5410-eb67-5dd8-b0bf98306b2b.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F8e895812-5410-eb67-5dd8-b0bf98306b2b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=31b31e12d4c9146d0e9f07b11e12ee33 1x" loading="lazy"></a></p>\n<p data-sourcepos="124:1-124:51">今のところストレスなく使えてます！</p>\n<p data-sourcepos="126:1-126:122"><a href="https://camo.qiitausercontent.com/03364daccaab1a52afb9a75d63d445f77345b359/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f35313830323636312d666463392d396432342d393937662d6537316235386364636133622e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F51802661-fdc9-9d24-997f-e71b58cdca3b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=22832e203d86c88f9e0625eaf364d049" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/51802661-fdc9-9d24-997f-e71b58cdca3b.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F51802661-fdc9-9d24-997f-e71b58cdca3b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=49739a338d72dc8a7beb13eca4766498 1x" loading="lazy"></a></p>\n<p data-sourcepos="128:1-128:109">よく使うようなコンポーネントがかなり充実しているので非常におすすめです👍</p>\n<p data-sourcepos="130:1-130:36">ビデオなんかもあります。</p>\n<p data-sourcepos="132:1-132:122"><a href="https://camo.qiitausercontent.com/eb35515d62179b6f4b67a1a2601089394799ac08/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f64383535373335612d383964312d323765382d383466662d3033383732303065316339302e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fd855735a-89d1-27e8-84ff-0387200e1c90.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cc45a2dbc38777649cc65fc446b4c5cd" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/d855735a-89d1-27e8-84ff-0387200e1c90.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fd855735a-89d1-27e8-84ff-0387200e1c90.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=560b864d95ba9dbd7556075df3b68a49 1x" loading="lazy"></a></p>\n',body:"# はじめに\n\nSvelteKitの開発を始め、いくつかのUIコンポーネントを試しましたが、\n\n\n* 一部のコンポーネントが動かない\n* 一部のクラスが動かない\n\n等の事象が発生し、なかなかこれだ！というものに決まりませんでした。。\n(きっと私の構築方法が悪いんだと思いますが、、)\n\n\n`Flowbite-Svelte`が私の環境では唯一ちゃんと動いたので実装方法を載せておきます。\n\n\n# ①SvelteKitの構築\n\n1. `SvelteKit`構築\n\n    ```bash\n    $ npm create svelte@latest\n    Need to install the following packages:\n      create-svelte@2.0.0-next.198\n    Ok to proceed? (y) y\n    \n    create-svelte version 2.0.0-next.198\n    \n    Welcome to SvelteKit!\n    \n    This is release candidate software; expect bugs and missing features.\n    \n    Problems? Open an issue on https://github.com/sveltejs/kit/issues if none exists already.\n    \n    ✔ Where should we create your project?\n      (leave blank to use current directory) … \n    ✔ Which Svelte app template? › SvelteKit demo app\n    ✔ Add type checking with TypeScript? › Yes, using TypeScript syntax\n    ✔ Add ESLint for code linting? … No / Yes ›  No\n    ✔ Add Prettier for code formatting? … No / Yes ›  No\n    ✔ Add Playwright for browser testing? … No / Yes ›  No\n    ✔ Add Vitest for unit testing? … No / Yes ›  No\n    \n    $ npm install\n    ```\n\n1. localhost:8080で開くように調整する\n\n    ```javascript\n    // vite.config.js\n\n    import { sveltekit } from '@sveltejs/kit/vite';\n    \n    /** @type {import('vite').UserConfig} */\n    const config = {\n    \tdarkMode: 'class',\n    \tplugins: [sveltekit()],\n    \tserver: {          // 追加\n    \t\thost: true,    // 追加\n    \t\tport: 8080     // 追加\n    \t}                  // 追加\n    };\n    \n    export default config;\n    ```\n\n    `8080`以外のポートを開けたい場合は`port`の部分を調整する。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/86a7ad9e-5605-629f-5d90-a64b1f15c08d.png)\n\n# ②Tailwind CSSのインストール\n\n`svelte-add`を使って`tailwindcss`をインストール\n\n```bash\n$ npx svelte-add@latest tailwindcss\n$ npm install\n```\n\n# ③Flowbite及び依存関係のインストール\n\n```bash\n$ npm i -D flowbite flowbite-svelte classnames @popperjs/core\n```\n\n# ④tailwind.config.cjsの修正\n\n```javascript\n// tailwind.config.cjs\nconst config = {\n  content: [\n    \"./src/**/*.{html,js,svelte,ts}\",\n    \"./node_modules/flowbite-svelte/**/*.{html,js,svelte,ts}\",\n  ],\n\n  theme: {\n    extend: {},\n  },\n\n  plugins: [\n    require('flowbite/plugin')\n  ],\n  darkMode: 'class',\n};\n\nmodule.exports = config;\n```\n\n# styles.cssの修正\n\nデモアプリのcssが効いているので全て削除\n\n# 完了\n\n```vue\n<script>\n  import { Button } from 'flowbite-svelte';\n<\/script>\n\n<Button>デフォルトボタン</Button>\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/8e895812-5410-eb67-5dd8-b0bf98306b2b.png)\n\n今のところストレスなく使えてます！\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/51802661-fdc9-9d24-997f-e71b58cdca3b.png)\n\nよく使うようなコンポーネントがかなり充実しているので非常におすすめです👍\n\nビデオなんかもあります。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/d855735a-89d1-27e8-84ff-0387200e1c90.png)\n",coediting:!1,comments_count:0,created_at:"2022-12-08T09:27:37+09:00",group:null,id:"6e7e8571cc6c3d7ad2e8",likes_count:4,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Svelte",versions:[]},{name:"SvelteKit",versions:[]}],title:"SvelteKitのFlowbite-Svelteを実装した話",updated_at:"2022-12-08T09:27:37+09:00",url:"https://qiita.com/maaaashi/items/6e7e8571cc6c3d7ad2e8",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:854,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:93"><code>svelte</code>では<a href="https://github.com/EmilTholin/svelte-routing" rel="nofollow noopener" target="_blank">svelte-routing</a>を用いてルーティングを実装したことがありましたが、<code>SvelteKit</code>では標準でルーティングが用意されています。<br>\n今回は公式デモを構築しつつ、ルーティングについてまとめていく。</p>\n<h1 data-sourcepos="7:1-7:35">\n<span id="sveltekitデモアプリの構築" class="fragment"></span><a href="#sveltekit%E3%83%87%E3%83%A2%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E6%A7%8B%E7%AF%89"><i class="fa fa-link"></i></a>SvelteKitデモアプリの構築</h1>\n<ol data-sourcepos="9:1-58:0">\n<li data-sourcepos="9:1-36:0">\n<p data-sourcepos="9:4-9:20"><code>SvelteKit</code>構築</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="11:5-35:7"><div class="highlight"><pre><code><span class="nv">$ </span>npm create svelte@latest\nNeed to <span class="nb">install </span>the following packages:\n  create-svelte@2.0.0-next.198\nOk to proceed? <span class="o">(</span>y<span class="o">)</span> y\n\ncreate-svelte version 2.0.0-next.198\n\nWelcome to SvelteKit!\n\nThis is release candidate software<span class="p">;</span> expect bugs and missing features.\n\nProblems? Open an issue on https://github.com/sveltejs/kit/issues <span class="k">if </span>none exists already.\n\n✔ Where should we create your project?\n  <span class="o">(</span>leave blank to use current directory<span class="o">)</span> … \n✔ Which Svelte app template? › SvelteKit demo app\n✔ Add <span class="nb">type </span>checking with TypeScript? › Yes, using TypeScript syntax\n✔ Add ESLint <span class="k">for </span>code linting? … No / Yes ›  No\n✔ Add Prettier <span class="k">for </span>code formatting? … No / Yes ›  No\n✔ Add Playwright <span class="k">for </span>browser testing? … No / Yes ›  No\n✔ Add Vitest <span class="k">for </span>unit testing? … No / Yes ›  No\n\n<span class="nv">$ </span>npm <span class="nb">install</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="37:1-58:0">\n<p data-sourcepos="37:4-37:47">localhost:8080で開くように調整する</p>\n<div class="code-frame" data-lang="javascript" data-sourcepos="39:5-55:7"><div class="highlight"><pre><code><span class="c1">// vite.config.js</span>\n\n<span class="k">import</span> <span class="p">{</span> <span class="nx">sveltekit</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@sveltejs/kit/vite</span><span class="dl">\'</span><span class="p">;</span>\n\n<span class="cm">/** @type {import(\'vite\').UserConfig} */</span>\n<span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>\n\t<span class="na">darkMode</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">class</span><span class="dl">\'</span><span class="p">,</span>\n\t<span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nf">sveltekit</span><span class="p">()],</span>\n\t<span class="na">server</span><span class="p">:</span> <span class="p">{</span>          <span class="c1">// 追加</span>\n\t\t<span class="na">host</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>    <span class="c1">// 追加</span>\n\t\t<span class="na">port</span><span class="p">:</span> <span class="mi">8080</span>     <span class="c1">// 追加</span>\n\t<span class="p">}</span>                  <span class="c1">// 追加</span>\n<span class="p">};</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="nx">config</span><span class="p">;</span>\n</code></pre></div></div>\n<p data-sourcepos="57:5-57:85"><code>8080</code>以外のポートを開けたい場合は<code>port</code>の部分を調整する。</p>\n</li>\n</ol>\n<p data-sourcepos="59:1-59:122"><a href="https://camo.qiitausercontent.com/f902c2cc1ba401c3619194211ac0c16192317dfc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f38366137616439652d353630352d363239662d356439302d6136346231663135633038642e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F86a7ad9e-5605-629f-5d90-a64b1f15c08d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=24475b618f3b1c75d15b42d9939be3d7" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/86a7ad9e-5605-629f-5d90-a64b1f15c08d.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F86a7ad9e-5605-629f-5d90-a64b1f15c08d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7857aacd7f543cf8da1dec04d77f1e59 1x" loading="lazy"></a></p>\n<h1 data-sourcepos="62:1-62:40">\n<span id="routesディレクトリについて" class="fragment"></span><a href="#routes%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><i class="fa fa-link"></i></a><code>routes</code>ディレクトリについて</h1>\n<h2 data-sourcepos="64:1-64:27">\n<span id="デモから読み取る" class="fragment"></span><a href="#%E3%83%87%E3%83%A2%E3%81%8B%E3%82%89%E8%AA%AD%E3%81%BF%E5%8F%96%E3%82%8B"><i class="fa fa-link"></i></a>デモから読み取る</h2>\n<p data-sourcepos="66:1-66:90">このデモアプリケーションは↓のような構造で構成されています。</p>\n<p data-sourcepos="68:1-68:167">簡単に説明すると、<code>routes</code>以下のディレクトリがそのままルーティングされます。このあたりは<code>nuxt.js</code>とかとも似てますね！</p>\n<p data-sourcepos="70:1-70:122"><a href="https://camo.qiitausercontent.com/c73aa87b2cbbb721404277e3559306f33637ef19/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31393430353737382d396139382d383839352d326437332d3566653930343932323361652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F19405778-9a98-8895-2d73-5fe9049223ae.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fe92c31b2edb39ea8410f5678f4918a1" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/19405778-9a98-8895-2d73-5fe9049223ae.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F19405778-9a98-8895-2d73-5fe9049223ae.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b703c944fb55bdfdd32f455c3a1370a8 1x" loading="lazy"></a></p>\n<p data-sourcepos="72:1-72:72">どのようにページを表示しているのか見ていきます。</p>\n<h3 data-sourcepos="74:1-74:16">\n<span id="pagesvelte" class="fragment"></span><a href="#pagesvelte"><i class="fa fa-link"></i></a>+page.svelte</h3>\n<p data-sourcepos="76:1-76:72">そのルーティングのアプリのページを表しています。</p>\n<p data-sourcepos="78:1-79:66">ルートパス( <code>/</code> )では、<code>routes/+page.svelte</code><br>\nアバウトパス( <code>/about</code> )では、<code>routes/about/+page.svelte</code></p>\n<p data-sourcepos="81:1-81:30">がそれに該当します。</p>\n<p data-sourcepos="83:1-83:96"><code>routes</code>以下に作ったディレクトリ名に<strong>＋ページ</strong>するイメージですね！</p>\n<h3 data-sourcepos="85:1-85:12">\n<span id="pagets" class="fragment"></span><a href="#pagets"><i class="fa fa-link"></i></a>+page.ts</h3>\n<p data-sourcepos="87:1-87:56"><code>+page.svelte</code>が呼ばれる前に実行されます。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="89:1-98:3"><div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">error</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@sveltejs/kit</span><span class="dl">\'</span><span class="p">;</span>\n \n<span class="cm">/** @type {import(\'./$types\').PageLoad} */</span>\n<span class="k">export</span> <span class="kd">function</span> <span class="nf">load</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="p">{</span>\n        <span class="na">profile</span><span class="p">:</span> <span class="p">[{</span> <span class="na">hoge</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">hoge</span><span class="dl">\'</span><span class="p">,</span> <span class="na">fuga</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">fuga</span><span class="dl">\'</span> <span class="p">}]</span>\n    <span class="p">};</span>\n<span class="p">}</span>\n</code></pre></div></div>\n<p data-sourcepos="100:1-100:92">↑のようにデータを返すことで、<code>+page.svelte</code>で使うことができます。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="102:1-109:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>\n  <span class="cm">/** @type {import(\'./$types\').PageData} */</span>\n  <span class="k">export</span> <span class="kd">let</span> <span class="nx">data</span><span class="p">;</span>\n\n  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">profile</span><span class="p">);</span> <span class="c1">// [{ hoge: \'hoge\', fuga: \'fuga\' }]</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n</code></pre></div></div>\n<h3 data-sourcepos="111:1-111:18">\n<span id="layoutsvelte" class="fragment"></span><a href="#layoutsvelte"><i class="fa fa-link"></i></a>+layout.svelte</h3>\n<p data-sourcepos="113:1-114:107">全てのページで表示されるページです。<br>\n<code>+page.svelte</code>等の表示場所は<code>&lt;slot&gt;&lt;/slot&gt;</code>を使うことで表示させることができます。</p>\n<p data-sourcepos="116:1-116:90">ヘッダーやフッター、cssの読み込みなどを行うのに便利そうです。</p>\n<p data-sourcepos="118:1-118:4">例)</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="119:1-133:3"><div class="highlight"><pre><code>// +layout.svelte\n\n<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>\n\t<span class="k">import</span> <span class="nx">Header</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">./Header.svelte</span><span class="dl">\'</span><span class="p">;</span>\n\t<span class="k">import</span> <span class="nx">Footer</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">./Footer.svelte</span><span class="dl">\'</span><span class="p">;</span>\n\t<span class="k">import</span> <span class="dl">\'</span><span class="s1">./styles.css</span><span class="dl">\'</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"app"</span><span class="nt">&gt;</span>\n\t<span class="nt">&lt;Header</span> <span class="nt">/&gt;</span>\n    <span class="nt">&lt;slot&gt;&lt;slot/&gt;</span>  // +page.svelte\n\t<span class="nt">&lt;Footer</span> <span class="nt">/&gt;</span>\n<span class="nt">&lt;/div&gt;</span>\n</code></pre></div></div>\n<h3 data-sourcepos="135:1-135:14">\n<span id="layoutts" class="fragment"></span><a href="#layoutts"><i class="fa fa-link"></i></a>+layout.ts</h3>\n<p data-sourcepos="137:1-138:40"><code>+layout.svelte</code>が呼ばれる前に実行されます。<br>\n使い方は<code>+page.ts</code>と同じです。</p>\n<h2 data-sourcepos="140:1-140:39">\n<span id="デモで使われていないもの" class="fragment"></span><a href="#%E3%83%87%E3%83%A2%E3%81%A7%E4%BD%BF%E3%82%8F%E3%82%8C%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>デモで使われていないもの</h2>\n<h3 data-sourcepos="142:1-142:21">\n<span id="パラメータ" class="fragment"></span><a href="#%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF"><i class="fa fa-link"></i></a>[パラメータ]</h3>\n<p data-sourcepos="144:1-144:128"><code>/user/1</code>の<code>1</code>や、<code>store/tokyo</code>の<code>tokyo</code>の値をパラメータとするようなルーティングを実装するときは</p>\n<p data-sourcepos="146:1-146:135"><code>routes/user/[id]</code>や、<code>routes/store/[place]</code>のようにディレクトリを作成し、その下に<code>+page.svelte</code>を作成する。</p>\n<p data-sourcepos="148:1-149:122">例) <code>about/:id</code><br>\n<a href="https://camo.qiitausercontent.com/1874c0be6c1134c936d1512ba8b3a0d097a35998/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f33613439636166322d323036352d356162652d663239362d3436396431663137646230622e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F3a49caf2-2065-5abe-f296-469d1f17db0b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0bc3b966e13977d05a4252ddb77b1a6c" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/3a49caf2-2065-5abe-f296-469d1f17db0b.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F3a49caf2-2065-5abe-f296-469d1f17db0b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=96b3b6b12d1022f4ec381f8086d77ffa 1x" loading="lazy"></a></p>\n<p data-sourcepos="151:1-151:88"><code>+page.ts</code>では、次のようにしてパラメータを取得することができる</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="153:1-169:3"><div class="highlight"><pre><code><span class="c1">// +page.ts</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">error</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@sveltejs/kit</span><span class="dl">\'</span><span class="p">;</span>\n \n<span class="cm">/** @type {import(\'./$types\').PageLoad} */</span>\n<span class="k">export</span> <span class="kd">function</span> <span class="nf">load</span><span class="p">({</span> <span class="nx">params</span> <span class="p">})</span> <span class="p">{</span>\n  <span class="nf">if </span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">\'</span><span class="s1">1</span><span class="dl">\'</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="p">{</span>\n      <span class="na">title</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">Hello 1号！</span><span class="dl">\'</span><span class="p">,</span>\n      <span class="na">content</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">Welcome to our blog. Lorem ipsum dolor sit amet...</span><span class="dl">\'</span>\n    <span class="p">};</span>\n  <span class="p">}</span>\n  \n  <span class="c1">// id: 1以外は404エラー等...</span>\n  <span class="k">throw</span> <span class="nf">error</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">Not found</span><span class="dl">\'</span><span class="p">);</span>\n<span class="p">}</span>\n</code></pre></div></div>\n<p data-sourcepos="171:1-171:104">そして先ほどと同じやり方で<code>+page.svelte</code>に値を渡し、表示させることができる</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="173:1-183:3"><div class="highlight"><pre><code>// +page.svelte\n\n<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>\n  <span class="cm">/** @type {import(\'./$types\').PageData} */</span>\n  <span class="k">export</span> <span class="kd">let</span> <span class="nx">data</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;h1&gt;</span>{data.title}<span class="nt">&lt;/h1&gt;</span>\n<span class="nt">&lt;div&gt;</span>{@html data.content}<span class="nt">&lt;/div&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="185:1-186:122">localhost:8080/about/1<br>\n<a href="https://camo.qiitausercontent.com/670bbd8fe86da7be0765c2addbfb63c9ae0d4d89/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f63653336383936342d373432362d363862342d643934342d6666643030376366623932612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fce368964-7426-68b4-d944-ffd007cfb92a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=78ef32628a0e1febef0aba1cc076c76d" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/ce368964-7426-68b4-d944-ffd007cfb92a.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fce368964-7426-68b4-d944-ffd007cfb92a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a500daf1efa8f617ae8f759b269e94a7 1x" loading="lazy"></a></p>\n<h3 data-sourcepos="190:1-190:13">\n<span id="serverts" class="fragment"></span><a href="#serverts"><i class="fa fa-link"></i></a>server.ts</h3>\n<p data-sourcepos="192:1-193:92">データベースから値を取得したり、環境変数にアクセスするような、<br>\nサーバーサイドで実行したい処理を実行する場合には<code>server.ts</code>を使う</p>\n<p data-sourcepos="195:1-196:52"><code>+page.ts</code>ならば、<code>+page.server.ts</code><br>\n<code>+layout.ts</code>ならば<code>+layout.server.ts</code>を使う。</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="198:1-213:3"><div class="highlight"><pre><code><span class="c1">// +page.server.ts</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">error</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@sveltejs/kit</span><span class="dl">\'</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">getData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">./common</span><span class="dl">\'</span>\n \n<span class="cm">/** @type {import(\'./$types\').PageServerLoad} */</span>\n<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">load</span><span class="p">({</span> <span class="nx">params</span> <span class="p">})</span> <span class="p">{</span>\n  <span class="kd">const</span> <span class="nx">post</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">getData</span><span class="p">(</span><span class="nx">params</span><span class="p">);</span>\n \n  <span class="nf">if </span><span class="p">(</span><span class="nx">post</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="nx">post</span><span class="p">;</span>\n  <span class="p">}</span>\n \n  <span class="k">throw</span> <span class="nf">error</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">Not found</span><span class="dl">\'</span><span class="p">);</span>\n<span class="p">}</span>\n</code></pre></div></div>\n<h3 data-sourcepos="215:1-215:17">\n<span id="errorsvelte" class="fragment"></span><a href="#errorsvelte"><i class="fa fa-link"></i></a>+error.svelte</h3>\n<p data-sourcepos="217:1-219:108">ページロード中にエラーが発生した場合に表示させるページ。<br>\n<code>$app/store</code>というモジュールに<code>page</code>というのものが用意されており、<br>\n組み合わせて使うことで、良い感じのエラーページを表示させることができる。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="221:1-228:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">page</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">$app/stores</span><span class="dl">\'</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;h1&gt;</span>{$page.status}<span class="nt">&lt;/h1&gt;</span>\n<span class="nt">&lt;h1&gt;</span>{$page.error.message}<span class="nt">&lt;/h1&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="230:1-230:122"><a href="https://camo.qiitausercontent.com/fd958a5ec71dd8b84a3bfeee073ab4de60f80241/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f30303662663534612d303431342d643563302d343839662d3465663465366238353131312e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F006bf54a-0414-d5c0-489f-4ef4e6b85111.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5bf9591fb3f7c8a37abdb56545f63b97" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/006bf54a-0414-d5c0-489f-4ef4e6b85111.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F006bf54a-0414-d5c0-489f-4ef4e6b85111.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8861a1374898772d1efcfd1e4215d184 1x" loading="lazy"></a></p>\n<h3 data-sourcepos="233:1-233:10">\n<span id="types" class="fragment"></span><a href="#types"><i class="fa fa-link"></i></a>$types</h3>\n<p data-sourcepos="235:1-236:214">これまでの例で<code>/** @type {import(\'./$types\').PageData} */</code>が度々登場してましたが、<br>\n<code>+page.svelte</code>や<code>+layout.svelte</code>で<code>export let data;</code>の前の行にこのアノテーションを付けると、その型は<code>load</code>関数の戻り値ということをTypeScriptに伝えることができます。</p>\n<p data-sourcepos="238:1-238:100">TypeScriptを使う人は正しく型をつけるためにも積極的につけていきましょう</p>\n<h1 data-sourcepos="241:1-241:8">\n<span id="次回" class="fragment"></span><a href="#%E6%AC%A1%E5%9B%9E"><i class="fa fa-link"></i></a>次回</h1>\n<p data-sourcepos="243:1-243:77">次回は<code>goto</code>等、<code>$app/navigation</code>について解説していきます。</p>\n',body:"# はじめに\n\n`svelte`では[svelte-routing](https://github.com/EmilTholin/svelte-routing)を用いてルーティングを実装したことがありましたが、`SvelteKit`では標準でルーティングが用意されています。\n今回は公式デモを構築しつつ、ルーティングについてまとめていく。\n\n\n# SvelteKitデモアプリの構築\n\n1. `SvelteKit`構築\n\n    ```bash\n    $ npm create svelte@latest\n    Need to install the following packages:\n      create-svelte@2.0.0-next.198\n    Ok to proceed? (y) y\n    \n    create-svelte version 2.0.0-next.198\n    \n    Welcome to SvelteKit!\n    \n    This is release candidate software; expect bugs and missing features.\n    \n    Problems? Open an issue on https://github.com/sveltejs/kit/issues if none exists already.\n    \n    ✔ Where should we create your project?\n      (leave blank to use current directory) … \n    ✔ Which Svelte app template? › SvelteKit demo app\n    ✔ Add type checking with TypeScript? › Yes, using TypeScript syntax\n    ✔ Add ESLint for code linting? … No / Yes ›  No\n    ✔ Add Prettier for code formatting? … No / Yes ›  No\n    ✔ Add Playwright for browser testing? … No / Yes ›  No\n    ✔ Add Vitest for unit testing? … No / Yes ›  No\n    \n    $ npm install\n    ```\n\n1. localhost:8080で開くように調整する\n\n    ```javascript\n    // vite.config.js\n\n    import { sveltekit } from '@sveltejs/kit/vite';\n    \n    /** @type {import('vite').UserConfig} */\n    const config = {\n    \tdarkMode: 'class',\n    \tplugins: [sveltekit()],\n    \tserver: {          // 追加\n    \t\thost: true,    // 追加\n    \t\tport: 8080     // 追加\n    \t}                  // 追加\n    };\n    \n    export default config;\n    ```\n\n    `8080`以外のポートを開けたい場合は`port`の部分を調整する。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/86a7ad9e-5605-629f-5d90-a64b1f15c08d.png)\n\n\n# `routes`ディレクトリについて\n\n## デモから読み取る\n\nこのデモアプリケーションは↓のような構造で構成されています。\n\n簡単に説明すると、`routes`以下のディレクトリがそのままルーティングされます。このあたりは`nuxt.js`とかとも似てますね！\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/19405778-9a98-8895-2d73-5fe9049223ae.png)\n\nどのようにページを表示しているのか見ていきます。\n\n### +page.svelte\n\nそのルーティングのアプリのページを表しています。\n\nルートパス( `/` )では、`routes/+page.svelte`\nアバウトパス( `/about` )では、`routes/about/+page.svelte`\n\nがそれに該当します。\n\n`routes`以下に作ったディレクトリ名に**＋ページ**するイメージですね！\n\n### +page.ts\n\n`+page.svelte`が呼ばれる前に実行されます。\n\n```typescript\nimport { error } from '@sveltejs/kit';\n \n/** @type {import('./$types').PageLoad} */\nexport function load() {\n    return {\n        profile: [{ hoge: 'hoge', fuga: 'fuga' }]\n    };\n}\n```\n\n↑のようにデータを返すことで、`+page.svelte`で使うことができます。\n\n```vue\n<script>\n  /** @type {import('./$types').PageData} */\n  export let data;\n\n  console.log(data.profile); // [{ hoge: 'hoge', fuga: 'fuga' }]\n<\/script>\n```\n\n### +layout.svelte\n\n全てのページで表示されるページです。\n`+page.svelte`等の表示場所は`<slot></slot>`を使うことで表示させることができます。\n\nヘッダーやフッター、cssの読み込みなどを行うのに便利そうです。\n\n例)\n```vue\n// +layout.svelte\n\n<script>\n\timport Header from './Header.svelte';\n\timport Footer from './Footer.svelte';\n\timport './styles.css';\n<\/script>\n\n<div class=\"app\">\n\t<Header />\n    <slot><slot/>  // +page.svelte\n\t<Footer />\n</div>\n```\n\n### +layout.ts\n\n`+layout.svelte`が呼ばれる前に実行されます。\n使い方は`+page.ts`と同じです。\n\n## デモで使われていないもの\n\n### [パラメータ]\n\n`/user/1`の`1`や、`store/tokyo`の`tokyo`の値をパラメータとするようなルーティングを実装するときは\n\n`routes/user/[id]`や、`routes/store/[place]`のようにディレクトリを作成し、その下に`+page.svelte`を作成する。\n\n例) `about/:id`\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/3a49caf2-2065-5abe-f296-469d1f17db0b.png)\n\n`+page.ts`では、次のようにしてパラメータを取得することができる\n\n```typescript\n// +page.ts\nimport { error } from '@sveltejs/kit';\n \n/** @type {import('./$types').PageLoad} */\nexport function load({ params }) {\n  if (params.id === '1') {\n    return {\n      title: 'Hello 1号！',\n      content: 'Welcome to our blog. Lorem ipsum dolor sit amet...'\n    };\n  }\n  \n  // id: 1以外は404エラー等...\n  throw error(404, 'Not found');\n}\n```\n\nそして先ほどと同じやり方で`+page.svelte`に値を渡し、表示させることができる\n\n```vue\n// +page.svelte\n\n<script>\n  /** @type {import('./$types').PageData} */\n  export let data;\n<\/script>\n\n<h1>{data.title}</h1>\n<div>{@html data.content}</div>\n```\n\nlocalhost:8080/about/1\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/ce368964-7426-68b4-d944-ffd007cfb92a.png)\n\n\n\n### server.ts\n\nデータベースから値を取得したり、環境変数にアクセスするような、\nサーバーサイドで実行したい処理を実行する場合には`server.ts`を使う\n\n`+page.ts`ならば、`+page.server.ts`\n`+layout.ts`ならば`+layout.server.ts`を使う。\n\n```typescript\n// +page.server.ts\nimport { error } from '@sveltejs/kit';\nimport { getData } from './common'\n \n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n  const post = await getData(params);\n \n  if (post) {\n    return post;\n  }\n \n  throw error(404, 'Not found');\n}\n```\n\n### +error.svelte\n\nページロード中にエラーが発生した場合に表示させるページ。\n`$app/store`というモジュールに`page`というのものが用意されており、\n組み合わせて使うことで、良い感じのエラーページを表示させることができる。\n\n```vue\n<script>\n  import { page } from '$app/stores';\n<\/script>\n\n<h1>{$page.status}</h1>\n<h1>{$page.error.message}</h1>\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/006bf54a-0414-d5c0-489f-4ef4e6b85111.png)\n\n\n### $types\n\nこれまでの例で`/** @type {import('./$types').PageData} */`が度々登場してましたが、\n`+page.svelte`や`+layout.svelte`で`export let data;`の前の行にこのアノテーションを付けると、その型は`load`関数の戻り値ということをTypeScriptに伝えることができます。\n\nTypeScriptを使う人は正しく型をつけるためにも積極的につけていきましょう\n\n\n# 次回\n\n次回は`goto`等、`$app/navigation`について解説していきます。\n",coediting:!1,comments_count:0,created_at:"2022-12-07T07:22:53+09:00",group:null,id:"870f7f4a473d7c5fac28",likes_count:2,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Svelte",versions:[]},{name:"SvelteKit",versions:[]}],title:"SvelteKit デモアプリからルーティングについて解説する",updated_at:"2022-12-07T20:07:56+09:00",url:"https://qiita.com/maaaashi/items/870f7f4a473d7c5fac28",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:1012,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-5:22"><code>SvelteKit</code>での開発をはじめ、<br>\nどのUIコンポーネントライブラリを使おうか悩んだところ、<br>\n<code>Skeleton</code>を発見。</p>\n<p data-sourcepos="7:1-7:45">面白そうだし使ってみることに。</p>\n<p data-sourcepos="9:1-9:72">せっかくなので、SvelteKitの導入から書いていきます。</p>\n<p data-sourcepos="11:1-11:122"><a href="https://camo.qiitausercontent.com/3dddacced19e7cff9cd0723e6ef8670f93526ac6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f63316535666533302d633937652d646333632d356265362d3739303165356563613436652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fc1e5fe30-c97e-dc3c-5be6-7901e5eca46e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=737158a5f3cea472837b771af5163350" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/c1e5fe30-c97e-dc3c-5be6-7901e5eca46e.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fc1e5fe30-c97e-dc3c-5be6-7901e5eca46e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ed74740793cf4fb7d0aa76da26f86b93 1x" loading="lazy"></a></p>\n<h1 data-sourcepos="14:1-14:8">\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h1>\n<ul data-sourcepos="16:1-18:0">\n<li data-sourcepos="16:1-16:18">node.js v18.12.1</li>\n<li data-sourcepos="17:1-18:0">npm</li>\n</ul>\n<h1 data-sourcepos="19:1-19:14">\n<span id="導入方法" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>導入方法</h1>\n<ol data-sourcepos="21:1-129:0">\n<li data-sourcepos="21:1-48:0">\n<p data-sourcepos="21:4-21:20"><code>SvelteKit</code>構築</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="23:5-47:7"><div class="highlight"><pre><code><span class="nv">$ </span>npm create svelte@latest\nNeed to <span class="nb">install </span>the following packages:\n  create-svelte@2.0.0-next.198\nOk to proceed? <span class="o">(</span>y<span class="o">)</span> y\n\ncreate-svelte version 2.0.0-next.198\n\nWelcome to SvelteKit!\n\nThis is release candidate software<span class="p">;</span> expect bugs and missing features.\n\nProblems? Open an issue on https://github.com/sveltejs/kit/issues <span class="k">if </span>none exists already.\n\n✔ Where should we create your project?\n  <span class="o">(</span>leave blank to use current directory<span class="o">)</span> … \n✔ Which Svelte app template? › SvelteKit demo app\n✔ Add <span class="nb">type </span>checking with TypeScript? › Yes, using TypeScript syntax\n✔ Add ESLint <span class="k">for </span>code linting? … No / Yes ›  No\n✔ Add Prettier <span class="k">for </span>code formatting? … No / Yes ›  No\n✔ Add Playwright <span class="k">for </span>browser testing? … No / Yes ›  No\n✔ Add Vitest <span class="k">for </span>unit testing? … No / Yes ›  No\n\n<span class="nv">$ </span>npm <span class="nb">install</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="49:1-70:0">\n<p data-sourcepos="49:4-49:47">localhost:8080で開くように調整する</p>\n<div class="code-frame" data-lang="javascript" data-sourcepos="51:5-67:7"><div class="highlight"><pre><code><span class="c1">// vite.config.js</span>\n\n<span class="k">import</span> <span class="p">{</span> <span class="nx">sveltekit</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@sveltejs/kit/vite</span><span class="dl">\'</span><span class="p">;</span>\n\n<span class="cm">/** @type {import(\'vite\').UserConfig} */</span>\n<span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>\n\t<span class="na">darkMode</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">class</span><span class="dl">\'</span><span class="p">,</span>\n\t<span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nf">sveltekit</span><span class="p">()],</span>\n\t<span class="na">server</span><span class="p">:</span> <span class="p">{</span>          <span class="c1">// 追加</span>\n\t\t<span class="na">host</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>    <span class="c1">// 追加</span>\n\t\t<span class="na">port</span><span class="p">:</span> <span class="mi">8080</span>     <span class="c1">// 追加</span>\n\t<span class="p">}</span>                  <span class="c1">// 追加</span>\n<span class="p">};</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="nx">config</span><span class="p">;</span>\n</code></pre></div></div>\n<p data-sourcepos="69:5-69:85"><code>8080</code>以外のポートを開けたい場合は<code>port</code>の部分を調整する。</p>\n</li>\n<li data-sourcepos="71:1-76:0">\n<p data-sourcepos="71:4-71:38">Skeletonをインストールする</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="73:5-75:7"><div class="highlight"><pre><code><span class="nv">$ </span>npm i @skeletonlabs/skeleton <span class="nt">--save-dev</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="77:1-83:0">\n<p data-sourcepos="77:4-77:64"><code>svelte-add</code>を使い、<code>Tailwind</code>を使えるようにする</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="79:5-82:7"><div class="highlight"><pre><code><span class="nv">$ </span>npx svelte-add@latest tailwindcss\n<span class="nv">$ </span>npm <span class="nb">install</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="84:1-107:0">\n<p data-sourcepos="84:4-84:37"><code>Tailwind</code>の設定を調整する</p>\n<div class="code-frame" data-lang="javascript" data-sourcepos="86:5-106:7"><div class="highlight"><pre><code><span class="c1">// tailwind.config.cjs</span>\n\n<span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">darkMode</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">class</span><span class="dl">\'</span><span class="p">,</span>    <span class="c1">// 追加</span>\n  <span class="na">content</span><span class="p">:</span> <span class="p">[</span>\n    <span class="nf">require</span><span class="p">(</span><span class="dl">\'</span><span class="s1">path</span><span class="dl">\'</span><span class="p">).</span><span class="nf">join</span><span class="p">(</span>                            <span class="c1">// 追加</span>\n        <span class="nx">require</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="dl">\'</span><span class="s1">@skeletonlabs/skeleton</span><span class="dl">\'</span><span class="p">),</span>   <span class="c1">// 追加</span>\n        <span class="dl">\'</span><span class="s1">../**/*.{html,js,svelte,ts}</span><span class="dl">\'</span>                <span class="c1">// 追加</span>\n    <span class="p">)</span>                                                <span class="c1">// 追加</span>\n  <span class="p">],</span>\n  <span class="na">theme</span><span class="p">:</span> <span class="p">{</span>\n    <span class="na">extend</span><span class="p">:</span> <span class="p">{},</span>\n  <span class="p">},</span>\n  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>\n    <span class="nf">require</span><span class="p">(</span><span class="dl">\'</span><span class="s1">@skeletonlabs/skeleton/tailwind/theme.cjs</span><span class="dl">\'</span><span class="p">)</span>  <span class="c1">// 追加</span>\n  <span class="p">]</span>\n<span class="p">};</span>\n\n<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="108:1-120:0">\n<p data-sourcepos="108:4-108:23">app.postcssの修正</p>\n<p data-sourcepos="110:5-113:28">以下記述を削除<br>\n<del><a href="/tailwind" class="user-mention js-hovercard" title="tailwind" data-hovercard-target-type="user" data-hovercard-target-name="tailwind">@tailwind</a> base;</del><br>\n<del><a href="/tailwind" class="user-mention js-hovercard" title="tailwind" data-hovercard-target-type="user" data-hovercard-target-name="tailwind">@tailwind</a> components;</del><br>\n<del><a href="/tailwind" class="user-mention js-hovercard" title="tailwind" data-hovercard-target-type="user" data-hovercard-target-name="tailwind">@tailwind</a> utilities;</del></p>\n<div class="code-frame" data-lang="markdown" data-sourcepos="115:5-117:7"><div class="highlight"><pre><code>html, body { @apply h-full overflow-hidden; }\n</code></pre></div></div>\n<p data-sourcepos="119:5-119:52">これでSvelteKitとSkeletonの設定は完了!</p>\n</li>\n<li data-sourcepos="121:1-129:0">\n<p data-sourcepos="121:4-121:21">サーバー起動</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="123:5-125:7"><div class="highlight"><pre><code><span class="nv">$ </span>npm run dev\n</code></pre></div></div>\n<p data-sourcepos="127:5-128:43"><a href="http://localhost:8080" rel="nofollow noopener" target="_blank">localhost:8080</a>開くことを確認。<br>\n早速テーマを変更してみる。</p>\n</li>\n</ol>\n<h1 data-sourcepos="130:1-130:11">\n<span id="テーマ" class="fragment"></span><a href="#%E3%83%86%E3%83%BC%E3%83%9E"><i class="fa fa-link"></i></a>テーマ</h1>\n<h2 data-sourcepos="132:1-132:9">\n<span id="before" class="fragment"></span><a href="#before"><i class="fa fa-link"></i></a>before</h2>\n<p data-sourcepos="134:1-134:122"><a href="https://camo.qiitausercontent.com/e550f552bf28628369eded4190ffc3bc16c190b2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f32643339346564652d373764322d393031332d316235642d6463623438336632623139332e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F2d394ede-77d2-9013-1b5d-dcb483f2b193.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f8bbf884c38d3d834390478df0085961" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/2d394ede-77d2-9013-1b5d-dcb483f2b193.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F2d394ede-77d2-9013-1b5d-dcb483f2b193.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8e023d40713f660cbd9f6b9dccb12f18 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="136:1-136:33">\n<span id="afterskeletonテーマ使用" class="fragment"></span><a href="#afterskeleton%E3%83%86%E3%83%BC%E3%83%9E%E4%BD%BF%E7%94%A8"><i class="fa fa-link"></i></a>After(Skeletonテーマ使用)</h2>\n<p data-sourcepos="138:1-138:122"><a href="https://camo.qiitausercontent.com/a248b22c96ac4fff90082e5820bd21d5595f6135/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f34616430303666312d343636642d623630362d356233652d6537363932356465613439382e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4ad006f1-466d-b606-5b3e-e76925dea498.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f0b2ec0c17c904ae5c9638b62d4354bb" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4ad006f1-466d-b606-5b3e-e76925dea498.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4ad006f1-466d-b606-5b3e-e76925dea498.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=560ca31e53fec6c82774287475270643 1x" loading="lazy"></a></p>\n<p data-sourcepos="140:1-140:45">ん、、？ちょっと変わった、、？</p>\n<p data-sourcepos="142:1-142:96">わかりやすくするために公式が用意しているデモ画面を実装してみる。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="144:1-204:3"><div class="highlight"><pre><code>// +layout.svelte\n\n<span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="c1">// テーマを使うときにコメントイン</span>\n  <span class="c1">// import \'@skeletonlabs/skeleton/themes/theme-skeleton.css\';</span>\n  <span class="c1">// import \'@skeletonlabs/skeleton/styles/all.css\';</span>\n  <span class="c1">// import \'../app.postcss\';</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">AppShell</span><span class="p">,</span> <span class="nx">AppBar</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@skeletonlabs/skeleton</span><span class="dl">\'</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;AppShell&gt;</span>\n  <span class="nt">&lt;svelte:fragment</span> <span class="na">slot=</span><span class="s">"header"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;AppBar&gt;</span>\n      <span class="nt">&lt;svelte:fragment</span> <span class="na">slot=</span><span class="s">"lead"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;h1&gt;</span>Skeleton<span class="nt">&lt;/h1&gt;</span>\n      <span class="nt">&lt;/svelte:fragment&gt;</span>\n      <span class="nt">&lt;svelte:fragment</span> <span class="na">slot=</span><span class="s">"trail"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"btn btn-sm"</span> <span class="na">href=</span><span class="s">"https://github.com/"</span> <span class="na">target=</span><span class="s">"_blank"</span> <span class="na">rel=</span><span class="s">"noreferrer"</span><span class="nt">&gt;</span>GitHub<span class="nt">&lt;/a&gt;</span>\n      <span class="nt">&lt;/svelte:fragment&gt;</span>\n    <span class="nt">&lt;/AppBar&gt;</span>\n  <span class="nt">&lt;/svelte:fragment&gt;</span>\n  <span class="nt">&lt;svelte:fragment</span> <span class="na">slot=</span><span class="s">"sidebarLeft"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;AppShell</span> <span class="na">slotSidebarLeft=</span><span class="s">"bg-surface-500/5 w-56 p-4"</span><span class="nt">&gt;</span>\n      <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">"list-nav"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;ul&gt;</span>\n          <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"/"</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>\n          <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"/about"</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>\n        <span class="nt">&lt;/ul&gt;</span>\n      <span class="nt">&lt;/nav&gt;</span>\n    <span class="nt">&lt;/AppShell&gt;</span>\n  <span class="nt">&lt;/svelte:fragment&gt;</span>\n  <span class="nt">&lt;slot</span> <span class="nt">/&gt;</span>\n  <span class="nt">&lt;/AppShell&gt;</span>\n\n\n// +page.svelte\n\n<span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n\t<span class="k">import</span> <span class="p">{</span> <span class="nx">GradientHeading</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@skeletonlabs/skeleton</span><span class="dl">\'</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;GradientHeading</span> <span class="na">tag=</span><span class="s">"h1"</span> <span class="na">direction=</span><span class="s">"bg-gradient-to-r"</span> <span class="na">from=</span><span class="s">"from-primary-500"</span> <span class="na">to=</span><span class="s">"to-accent-500"</span><span class="nt">&gt;</span>\n\tHomepage\n<span class="nt">&lt;/GradientHeading&gt;</span>\n\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container mx-auto p-8 space-y-8"</span><span class="nt">&gt;</span>\n\t<span class="nt">&lt;h1&gt;</span>Hello Skeleton<span class="nt">&lt;/h1&gt;</span>\n\t<span class="nt">&lt;p&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit.<span class="nt">&lt;/p&gt;</span>\n\t<span class="nt">&lt;hr</span> <span class="nt">/&gt;</span>\n\t<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"card card-body"</span><span class="nt">&gt;</span>\n\t\t<span class="nt">&lt;p&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit.<span class="nt">&lt;/p&gt;</span>\n\t<span class="nt">&lt;/section&gt;</span>\n\t<span class="nt">&lt;hr</span> <span class="nt">/&gt;</span>\n\t<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"flex space-x-2"</span><span class="nt">&gt;</span>\n\t\t<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"btn btn-filled-primary"</span> <span class="na">href=</span><span class="s">"https://kit.svelte.dev/"</span> <span class="na">target=</span><span class="s">"_blank"</span> <span class="na">rel=</span><span class="s">"noreferrer"</span><span class="nt">&gt;</span>SvelteKit<span class="nt">&lt;/a&gt;</span>\n\t\t<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"btn btn-filled-accent"</span> <span class="na">href=</span><span class="s">"https://tailwindcss.com/"</span> <span class="na">target=</span><span class="s">"_blank"</span> <span class="na">rel=</span><span class="s">"noreferrer"</span><span class="nt">&gt;</span>Tailwind<span class="nt">&lt;/a&gt;</span>\n\t\t<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"btn btn-filled-tertiary"</span> <span class="na">href=</span><span class="s">"https://github.com/"</span> <span class="na">target=</span><span class="s">"_blank"</span> <span class="na">rel=</span><span class="s">"noreferrer"</span><span class="nt">&gt;</span>GitHub<span class="nt">&lt;/a&gt;</span>\n\t<span class="nt">&lt;/section&gt;</span>\n<span class="nt">&lt;/div&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="206:1-206:39">よし、これで比べてみるぞ。</p>\n<h3 data-sourcepos="208:1-208:19">\n<span id="テーマ無し" class="fragment"></span><a href="#%E3%83%86%E3%83%BC%E3%83%9E%E7%84%A1%E3%81%97"><i class="fa fa-link"></i></a>テーマ無し</h3>\n<p data-sourcepos="210:1-210:122"><a href="https://camo.qiitausercontent.com/a37b257b55a69f606ab612dcec0a4baa8d8c3211/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f37616235376166322d343738652d326163622d363130622d3364303962653231353437632e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F7ab57af2-478e-2acb-610b-3d09be21547c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1d0945fef5ea293e886da9ae749015cb" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/7ab57af2-478e-2acb-610b-3d09be21547c.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F7ab57af2-478e-2acb-610b-3d09be21547c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2d7153e3d070d10d5227b30de460b20a 1x" loading="lazy"></a></p>\n<h3 data-sourcepos="212:1-212:27">\n<span id="skeletonテーマ使用" class="fragment"></span><a href="#skeleton%E3%83%86%E3%83%BC%E3%83%9E%E4%BD%BF%E7%94%A8"><i class="fa fa-link"></i></a>Skeletonテーマ使用</h3>\n<p data-sourcepos="214:1-214:94"><code>+layout.svelte</code>のテーマを使うときにコメントインの部分をコメントイン</p>\n<p data-sourcepos="216:1-216:122"><a href="https://camo.qiitausercontent.com/55ed46201a785488aeaee0291e0aa025b63f3638/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f62613836313065622d323536652d376364382d366361622d3839623639643635363865612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fba8610eb-256e-7cd8-6cab-89b69d6568ea.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=eeefda7f15804107b22128518bb1b8bd" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/ba8610eb-256e-7cd8-6cab-89b69d6568ea.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fba8610eb-256e-7cd8-6cab-89b69d6568ea.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4b1ac023c00a6374bb6ac369ae6ee8b5 1x" loading="lazy"></a></p>\n<p data-sourcepos="218:1-218:27"><strong>かなり変わった!!</strong></p>\n<h1 data-sourcepos="220:1-220:32">\n<span id="各テーマを比べてみる" class="fragment"></span><a href="#%E5%90%84%E3%83%86%E3%83%BC%E3%83%9E%E3%82%92%E6%AF%94%E3%81%B9%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>各テーマを比べてみる</h1>\n<h2 data-sourcepos="222:1-222:11">\n<span id="skeleton" class="fragment"></span><a href="#skeleton"><i class="fa fa-link"></i></a>skeleton</h2>\n<div class="code-frame" data-lang="typescript" data-sourcepos="224:1-226:3"><div class="highlight"><pre><code><span class="k">import</span> <span class="dl">\'</span><span class="s1">@skeletonlabs/skeleton/themes/theme-skeleton.css</span><span class="dl">\'</span><span class="p">;</span>\n</code></pre></div></div>\n<p data-sourcepos="228:1-228:122"><a href="https://camo.qiitausercontent.com/ae43b4d5aee2dccae0a2dc4ab31e8b266d3096ae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f65353465353935612d306238662d633430632d666534642d3438646363356432633430332e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe54e595a-0b8f-c40c-fe4d-48dcc5d2c403.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=008b3a39ba4f7ac9ee71a435d0eed232" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e54e595a-0b8f-c40c-fe4d-48dcc5d2c403.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe54e595a-0b8f-c40c-fe4d-48dcc5d2c403.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d466784681662557111ec038795fcd84 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="230:1-230:9">\n<span id="rocket" class="fragment"></span><a href="#rocket"><i class="fa fa-link"></i></a>rocket</h2>\n<div class="code-frame" data-lang="typescript" data-sourcepos="232:1-234:3"><div class="highlight"><pre><code><span class="k">import</span> <span class="dl">\'</span><span class="s1">@skeletonlabs/skeleton/themes/theme-rocket.css</span><span class="dl">\'</span><span class="p">;</span>\n</code></pre></div></div>\n<p data-sourcepos="236:1-236:122"><a href="https://camo.qiitausercontent.com/8149807756b9e84bc2a5591886ba134825df722f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f62666164343962392d663165322d643633662d616135302d6462643036313930653966332e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fbfad49b9-f1e2-d63f-aa50-dbd06190e9f3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=525d5e613aea4a02be155896a0aaee4c" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/bfad49b9-f1e2-d63f-aa50-dbd06190e9f3.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fbfad49b9-f1e2-d63f-aa50-dbd06190e9f3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0fb6b63ea5f74e63d8e4d2931b5c70d7 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="238:1-238:10">\n<span id="vintage" class="fragment"></span><a href="#vintage"><i class="fa fa-link"></i></a>vintage</h2>\n<div class="code-frame" data-lang="typescript" data-sourcepos="240:1-242:3"><div class="highlight"><pre><code><span class="k">import</span> <span class="dl">\'</span><span class="s1">@skeletonlabs/skeleton/themes/theme-vintage.css</span><span class="dl">\'</span><span class="p">;</span>\n</code></pre></div></div>\n<p data-sourcepos="244:1-244:122"><a href="https://camo.qiitausercontent.com/9d6c4eccc66e8dd6449c569f9faf2c980155c87b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f32363338363862322d393833362d636135622d616539372d6638373733653362636335382e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F263868b2-9836-ca5b-ae97-f8773e3bcc58.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=35f6f0073cbdda47bbf6f03365591d9d" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/263868b2-9836-ca5b-ae97-f8773e3bcc58.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F263868b2-9836-ca5b-ae97-f8773e3bcc58.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ecc7ec343190ee3f71ebef4f99cfc158 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="246:1-246:9">\n<span id="modern" class="fragment"></span><a href="#modern"><i class="fa fa-link"></i></a>modern</h2>\n<div class="code-frame" data-lang="typescript" data-sourcepos="248:1-250:3"><div class="highlight"><pre><code><span class="k">import</span> <span class="dl">\'</span><span class="s1">@skeletonlabs/skeleton/themes/theme-modern.css</span><span class="dl">\'</span><span class="p">;</span>\n</code></pre></div></div>\n<p data-sourcepos="252:1-252:122"><a href="https://camo.qiitausercontent.com/f332cbac7d3940b158a9b46324def46de795ef62/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f65333834326433352d366161642d313761382d386461372d3238363932306333353735342e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe3842d35-6aad-17a8-8da7-286920c35754.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=41ce772cc70b17a8c5d92e4bfe7d7082" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e3842d35-6aad-17a8-8da7-286920c35754.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fe3842d35-6aad-17a8-8da7-286920c35754.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e57665da1a4635c32d95682218694609 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="254:1-254:9">\n<span id="sahara" class="fragment"></span><a href="#sahara"><i class="fa fa-link"></i></a>sahara</h2>\n<div class="code-frame" data-lang="typescript" data-sourcepos="256:1-258:3"><div class="highlight"><pre><code><span class="k">import</span> <span class="dl">\'</span><span class="s1">@skeletonlabs/skeleton/themes/theme-sahara.css</span><span class="dl">\'</span><span class="p">;</span>\n</code></pre></div></div>\n<p data-sourcepos="260:1-260:122"><a href="https://camo.qiitausercontent.com/05e1177f30692a041f8b52483eed28d1f632902b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f35623838396663642d653030612d353336642d643063372d6337373134373734383330662e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F5b889fcd-e00a-536d-d0c7-c7714774830f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=24aa3349c7ce083895f4545261eecdb5" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/5b889fcd-e00a-536d-d0c7-c7714774830f.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F5b889fcd-e00a-536d-d0c7-c7714774830f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3ac79557044f16dc269ab4a4c0f362cb 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="262:1-262:10">\n<span id="seafoam" class="fragment"></span><a href="#seafoam"><i class="fa fa-link"></i></a>seafoam</h2>\n<div class="code-frame" data-lang="typescript" data-sourcepos="264:1-266:3"><div class="highlight"><pre><code><span class="k">import</span> <span class="dl">\'</span><span class="s1">@skeletonlabs/skeleton/themes/theme-seafoam.css</span><span class="dl">\'</span><span class="p">;</span>\n</code></pre></div></div>\n<p data-sourcepos="268:1-268:122"><a href="https://camo.qiitausercontent.com/31f83016c0431148bfde6b237a477ce463f7ed69/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f33323965353930632d306538642d393564612d326233392d6436653838383037333838322e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F329e590c-0e8d-95da-2b39-d6e888073882.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=24b329e8537b4f45e7f88b0093dc69af" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/329e590c-0e8d-95da-2b39-d6e888073882.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F329e590c-0e8d-95da-2b39-d6e888073882.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=cd297e143108db3483b02c2fc7f0e1e7 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="270:1-270:13">\n<span id="hamlindigo" class="fragment"></span><a href="#hamlindigo"><i class="fa fa-link"></i></a>hamlindigo</h2>\n<div class="code-frame" data-lang="typescript" data-sourcepos="272:1-274:3"><div class="highlight"><pre><code><span class="k">import</span> <span class="dl">\'</span><span class="s1">@skeletonlabs/skeleton/themes/theme-hamlindigo.css</span><span class="dl">\'</span><span class="p">;</span>\n</code></pre></div></div>\n<p data-sourcepos="276:1-276:122"><a href="https://camo.qiitausercontent.com/788a8a7c2451a2b9b20c9617ea5c72c8a0aa295f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f33363232346632352d363530302d383634372d333562662d6539313134323936306233612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F36224f25-6500-8647-35bf-e91142960b3a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3e84cb1df731eb18d01378159f01f93d" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/36224f25-6500-8647-35bf-e91142960b3a.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F36224f25-6500-8647-35bf-e91142960b3a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e299dc997b54004b84719e42f2e9da00 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="278:1-278:15">\n<span id="gold-nouveau" class="fragment"></span><a href="#gold-nouveau"><i class="fa fa-link"></i></a>gold-nouveau</h2>\n<div class="code-frame" data-lang="typescript" data-sourcepos="280:1-282:3"><div class="highlight"><pre><code><span class="k">import</span> <span class="dl">\'</span><span class="s1">@skeletonlabs/skeleton/themes/theme-gold-nouveau.css</span><span class="dl">\'</span><span class="p">;</span>\n</code></pre></div></div>\n<p data-sourcepos="284:1-284:122"><a href="https://camo.qiitausercontent.com/6e2b1338aeca3dc372712b0a6c1e25ee4d82f55c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f30313530666464302d383434352d393538662d393430662d6432393362363063376662392e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0150fdd0-8445-958f-940f-d293b60c7fb9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=99c1e1a819ccd74b2406808fd688b517" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0150fdd0-8445-958f-940f-d293b60c7fb9.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0150fdd0-8445-958f-940f-d293b60c7fb9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=584ced75240a2224106b1e014e6251bb 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="286:1-286:10">\n<span id="crimson" class="fragment"></span><a href="#crimson"><i class="fa fa-link"></i></a>crimson</h2>\n<div class="code-frame" data-lang="typescript" data-sourcepos="288:1-290:3"><div class="highlight"><pre><code><span class="k">import</span> <span class="dl">\'</span><span class="s1">@skeletonlabs/skeleton/themes/theme-crimson.css</span><span class="dl">\'</span><span class="p">;</span>\n</code></pre></div></div>\n<p data-sourcepos="292:1-292:122"><a href="https://camo.qiitausercontent.com/679e8134794423f88c432a02d96f12387492c1ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31616230363338372d303464642d363561642d393533372d3338633865373933623334612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1ab06387-04dd-65ad-9537-38c8e793b34a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ebae27b23c997b67a82b0fa8673962f8" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1ab06387-04dd-65ad-9537-38c8e793b34a.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1ab06387-04dd-65ad-9537-38c8e793b34a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=50becce6912d4bcccab64aa7d41be943 1x" loading="lazy"></a></p>\n<h4 data-sourcepos="294:1-294:47">\n<span id="なんと自分でも作れるのです" class="fragment"></span><a href="#%E3%81%AA%E3%82%93%E3%81%A8%E8%87%AA%E5%88%86%E3%81%A7%E3%82%82%E4%BD%9C%E3%82%8C%E3%82%8B%E3%81%AE%E3%81%A7%E3%81%99"><i class="fa fa-link"></i></a>なんと自分でも作れるのです。</h4>\n<p data-sourcepos="296:1-296:48"><iframe id="qiita-embed-content__bb046408c8c78462f54b2c0be53ba85e" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__bb046408c8c78462f54b2c0be53ba85e" data-content="https%3A%2F%2Fwww.skeleton.dev%2Fguides%2Fthemes%2Fgenerator" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<p data-sourcepos="298:1-298:122"><a href="https://camo.qiitausercontent.com/26b54487f5d6150a1971414a1bff00bc5eb22f55/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f63643666343637362d363939662d396139302d363531302d3366326430653865653763632e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fcd6f4676-699f-9a90-6510-3f2d0e8ee7cc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6af7f322d2a3104e69572585a00ee73e" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/cd6f4676-699f-9a90-6510-3f2d0e8ee7cc.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fcd6f4676-699f-9a90-6510-3f2d0e8ee7cc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ef0c1428130621e1f8692b69f9ffb25b 1x" loading="lazy"></a></p>\n<p data-sourcepos="301:1-301:54">気になった方はぜひ試してみてください</p>\n',body:'# はじめに\n\n`SvelteKit`での開発をはじめ、\nどのUIコンポーネントライブラリを使おうか悩んだところ、\n`Skeleton`を発見。\n\n面白そうだし使ってみることに。\n\nせっかくなので、SvelteKitの導入から書いていきます。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/c1e5fe30-c97e-dc3c-5be6-7901e5eca46e.png)\n\n\n# 環境\n\n* node.js v18.12.1\n* npm \n\n# 導入方法\n\n1. `SvelteKit`構築\n\n    ```bash\n    $ npm create svelte@latest\n    Need to install the following packages:\n      create-svelte@2.0.0-next.198\n    Ok to proceed? (y) y\n    \n    create-svelte version 2.0.0-next.198\n    \n    Welcome to SvelteKit!\n    \n    This is release candidate software; expect bugs and missing features.\n    \n    Problems? Open an issue on https://github.com/sveltejs/kit/issues if none exists already.\n    \n    ✔ Where should we create your project?\n      (leave blank to use current directory) … \n    ✔ Which Svelte app template? › SvelteKit demo app\n    ✔ Add type checking with TypeScript? › Yes, using TypeScript syntax\n    ✔ Add ESLint for code linting? … No / Yes ›  No\n    ✔ Add Prettier for code formatting? … No / Yes ›  No\n    ✔ Add Playwright for browser testing? … No / Yes ›  No\n    ✔ Add Vitest for unit testing? … No / Yes ›  No\n    \n    $ npm install\n    ```\n\n1. localhost:8080で開くように調整する\n\n    ```javascript\n    // vite.config.js\n\n    import { sveltekit } from \'@sveltejs/kit/vite\';\n    \n    /** @type {import(\'vite\').UserConfig} */\n    const config = {\n    \tdarkMode: \'class\',\n    \tplugins: [sveltekit()],\n    \tserver: {          // 追加\n    \t\thost: true,    // 追加\n    \t\tport: 8080     // 追加\n    \t}                  // 追加\n    };\n    \n    export default config;\n    ```\n\n    `8080`以外のポートを開けたい場合は`port`の部分を調整する。\n\n1. Skeletonをインストールする\n\n    ```bash\n    $ npm i @skeletonlabs/skeleton --save-dev\n    ```\n\n1. `svelte-add`を使い、`Tailwind`を使えるようにする\n    \n    ```bash\n    $ npx svelte-add@latest tailwindcss\n    $ npm install\n    ```\n\n1. `Tailwind`の設定を調整する\n\n    ```javascript\n    // tailwind.config.cjs\n    \n    const config = {\n      darkMode: \'class\',    // 追加\n      content: [\n        require(\'path\').join(                            // 追加\n            require.resolve(\'@skeletonlabs/skeleton\'),   // 追加\n            \'../**/*.{html,js,svelte,ts}\'                // 追加\n        )                                                // 追加\n      ],\n      theme: {\n        extend: {},\n      },\n      plugins: [\n        require(\'@skeletonlabs/skeleton/tailwind/theme.cjs\')  // 追加\n      ]\n    };\n    \n    module.exports = config;\n    ```\n\n1. app.postcssの修正\n    \n    以下記述を削除\n    ~~@tailwind base;~~\n    ~~@tailwind components;~~\n    ~~@tailwind utilities;~~\n    \n    ```markdown\n    html, body { @apply h-full overflow-hidden; }\n    ```\n\n    これでSvelteKitとSkeletonの設定は完了!\n\n1. サーバー起動\n\n    ```bash\n    $ npm run dev\n    ```\n\n    [localhost:8080](http://localhost:8080)開くことを確認。\n    早速テーマを変更してみる。\n\n# テーマ\n\n## before\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/2d394ede-77d2-9013-1b5d-dcb483f2b193.png)\n\n## After(Skeletonテーマ使用)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4ad006f1-466d-b606-5b3e-e76925dea498.png)\n\nん、、？ちょっと変わった、、？\n\nわかりやすくするために公式が用意しているデモ画面を実装してみる。\n\n```vue\n// +layout.svelte\n\n<script lang="ts">\n  // テーマを使うときにコメントイン\n  // import \'@skeletonlabs/skeleton/themes/theme-skeleton.css\';\n  // import \'@skeletonlabs/skeleton/styles/all.css\';\n  // import \'../app.postcss\';\n  import { AppShell, AppBar } from \'@skeletonlabs/skeleton\';\n<\/script>\n\n<AppShell>\n  <svelte:fragment slot="header">\n    <AppBar>\n      <svelte:fragment slot="lead">\n        <h1>Skeleton</h1>\n      </svelte:fragment>\n      <svelte:fragment slot="trail">\n        <a class="btn btn-sm" href="https://github.com/" target="_blank" rel="noreferrer">GitHub</a>\n      </svelte:fragment>\n    </AppBar>\n  </svelte:fragment>\n  <svelte:fragment slot="sidebarLeft">\n    <AppShell slotSidebarLeft="bg-surface-500/5 w-56 p-4">\n      <nav class="list-nav">\n        <ul>\n          <li><a href="/">Home</a></li>\n          <li><a href="/about">About</a></li>\n        </ul>\n      </nav>\n    </AppShell>\n  </svelte:fragment>\n  <slot />\n  </AppShell>\n\n\n// +page.svelte\n\n<script lang="ts">\n\timport { GradientHeading } from \'@skeletonlabs/skeleton\';\n<\/script>\n\n<GradientHeading tag="h1" direction="bg-gradient-to-r" from="from-primary-500" to="to-accent-500">\n\tHomepage\n</GradientHeading>\n\n<div class="container mx-auto p-8 space-y-8">\n\t<h1>Hello Skeleton</h1>\n\t<p>Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>\n\t<hr />\n\t<section class="card card-body">\n\t\t<p>Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>\n\t</section>\n\t<hr />\n\t<section class="flex space-x-2">\n\t\t<a class="btn btn-filled-primary" href="https://kit.svelte.dev/" target="_blank" rel="noreferrer">SvelteKit</a>\n\t\t<a class="btn btn-filled-accent" href="https://tailwindcss.com/" target="_blank" rel="noreferrer">Tailwind</a>\n\t\t<a class="btn btn-filled-tertiary" href="https://github.com/" target="_blank" rel="noreferrer">GitHub</a>\n\t</section>\n</div>\n```\n\nよし、これで比べてみるぞ。\n\n### テーマ無し\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/7ab57af2-478e-2acb-610b-3d09be21547c.png)\n\n### Skeletonテーマ使用\n\n`+layout.svelte`のテーマを使うときにコメントインの部分をコメントイン\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/ba8610eb-256e-7cd8-6cab-89b69d6568ea.png)\n\n**かなり変わった!!**\n\n# 各テーマを比べてみる\n\n## skeleton\n\n```typescript\nimport \'@skeletonlabs/skeleton/themes/theme-skeleton.css\';\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e54e595a-0b8f-c40c-fe4d-48dcc5d2c403.png)\n\n## rocket\n\n```typescript\nimport \'@skeletonlabs/skeleton/themes/theme-rocket.css\';\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/bfad49b9-f1e2-d63f-aa50-dbd06190e9f3.png)\n\n## vintage\n\n```typescript\nimport \'@skeletonlabs/skeleton/themes/theme-vintage.css\';\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/263868b2-9836-ca5b-ae97-f8773e3bcc58.png)\n\n## modern\n\n```typescript\nimport \'@skeletonlabs/skeleton/themes/theme-modern.css\';\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/e3842d35-6aad-17a8-8da7-286920c35754.png)\n\n## sahara\n\n```typescript\nimport \'@skeletonlabs/skeleton/themes/theme-sahara.css\';\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/5b889fcd-e00a-536d-d0c7-c7714774830f.png)\n\n## seafoam\n\n```typescript\nimport \'@skeletonlabs/skeleton/themes/theme-seafoam.css\';\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/329e590c-0e8d-95da-2b39-d6e888073882.png)\n\n## hamlindigo\n\n```typescript\nimport \'@skeletonlabs/skeleton/themes/theme-hamlindigo.css\';\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/36224f25-6500-8647-35bf-e91142960b3a.png)\n\n## gold-nouveau\n\n```typescript\nimport \'@skeletonlabs/skeleton/themes/theme-gold-nouveau.css\';\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0150fdd0-8445-958f-940f-d293b60c7fb9.png)\n\n## crimson\n\n```typescript\nimport \'@skeletonlabs/skeleton/themes/theme-crimson.css\';\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1ab06387-04dd-65ad-9537-38c8e793b34a.png)\n\n#### なんと自分でも作れるのです。\n\nhttps://www.skeleton.dev/guides/themes/generator\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/cd6f4676-699f-9a90-6510-3f2d0e8ee7cc.png)\n\n\n気になった方はぜひ試してみてください\n\n',coediting:!1,comments_count:0,created_at:"2022-12-06T08:57:44+09:00",group:null,id:"7aaaaf08488b16c01e53",likes_count:2,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"skeleton",versions:[]},{name:"Svelte",versions:[]},{name:"SvelteKit",versions:[]}],title:"SvelteKitの構築と、SkeletonUI実装とテーマについて",updated_at:"2022-12-06T09:28:07+09:00",url:"https://qiita.com/maaaashi/items/7aaaaf08488b16c01e53",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:1208,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:51">svelte/storeについてのまとめを作りたかった<br>\n今回は<code>derivered</code> <code>custom</code> <code>binding</code>について</p>\n<h1 data-sourcepos="6:1-6:17">\n<span id="使ったもの" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>使ったもの</h1>\n<ul data-sourcepos="8:1-10:0">\n<li data-sourcepos="8:1-8:28">Vite + Svelte + Typescript</li>\n<li data-sourcepos="9:1-10:0">skelton</li>\n</ul>\n<h1 data-sourcepos="11:1-11:44">\n<span id="前回writable-auto-subscribe-readable" class="fragment"></span><a href="#%E5%89%8D%E5%9B%9Ewritable-auto-subscribe-readable"><i class="fa fa-link"></i></a>前回(writable, Auto-subscribe, readable)</h1>\n<p data-sourcepos="13:1-13:55"><iframe id="qiita-embed-content__ac99c0c5dd6ce4a8c53360bdfeed185e" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__ac99c0c5dd6ce4a8c53360bdfeed185e" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2F774dda71a18fd3a61f58" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<h1 data-sourcepos="15:1-15:11">\n<span id="derivered" class="fragment"></span><a href="#derivered"><i class="fa fa-link"></i></a>derivered</h1>\n<p data-sourcepos="17:1-19:72"><code>store</code>されている値が変化した時に一緒に変化させるメソッド。<br>\n<code>computed</code>みたいな感じ？<br>\n公式では時計と、所要時間という風に使ってました。</p>\n<p data-sourcepos="21:1-21:124"><a href="https://camo.qiitausercontent.com/f8b5b23236bb7f63e88456360a443acd7a0e0d2f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f62316238376464312d646139302d343039652d623339382d6161656637306530303665652e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fb1b87dd1-da90-409e-b398-aaef70e006ee.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8da73fb156a1865a7b9f72f5faeadb52" alt="deliver.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/b1b87dd1-da90-409e-b398-aaef70e006ee.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fb1b87dd1-da90-409e-b398-aaef70e006ee.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1967fc6792365b56bd10007167df6339 1x" loading="lazy"></a></p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="24:1-44:3"><div class="highlight"><pre><code><span class="c1">// src/store.ts</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">readable</span><span class="p">,</span> <span class="nx">derived</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">svelte/store</span><span class="dl">\'</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="nf">readable</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kd">set</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">1</span>\n  <span class="kd">const</span> <span class="nx">interval</span> <span class="o">=</span> <span class="nf">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="nf">set</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>\n    <span class="nx">c</span><span class="o">++</span>\n  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>\n\n  <span class="k">return</span> <span class="kd">function</span> <span class="nf">stop</span><span class="p">()</span> <span class="p">{</span>\n    <span class="nf">clearInterval</span><span class="p">(</span><span class="nx">interval</span><span class="p">);</span>\n  <span class="p">};</span>\n<span class="p">});</span>\n\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">double</span> <span class="o">=</span> <span class="nf">derived</span><span class="p">(</span>\n  <span class="nx">count</span><span class="p">,</span>\n  <span class="nx">$count</span> <span class="o">=&gt;</span> <span class="nx">$count</span> <span class="o">*</span> <span class="mi">2</span>\n<span class="p">)</span>\n</code></pre></div></div>\n<div class="code-frame" data-lang="vue" data-sourcepos="47:1-54:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n\t<span class="k">import</span> <span class="p">{</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">double</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../store</span><span class="dl">"</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;div&gt;</span>現在: {$count}<span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;div&gt;</span>２倍: {$double}<span class="nt">&lt;/div&gt;</span>\n</code></pre></div></div>\n<h1 data-sourcepos="56:1-56:8">\n<span id="custom" class="fragment"></span><a href="#custom"><i class="fa fa-link"></i></a>custom</h1>\n<p data-sourcepos="58:1-59:118"><code>store</code>をカスタマイズすることができ、自前のメソッド等を<code>store</code>に持たせることができる。<br>\n<code>store</code>の使い方が固定されている場合はカスタマイズした方が再利用性が高くなりそう。</p>\n<p data-sourcepos="61:1-61:123"><a href="https://camo.qiitausercontent.com/e29c22bf8663118699cb09eb95a3f60178212693/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f66636466613334392d303863312d613763632d346132362d3739306637303832636363362e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Ffcdfa349-08c1-a7cc-4a26-790f7082ccc6.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fb2aa9554ed202cf54b5d2304b7b7a80" alt="custom.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/fcdfa349-08c1-a7cc-4a26-790f7082ccc6.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Ffcdfa349-08c1-a7cc-4a26-790f7082ccc6.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=02e8e710892f4f4a23f7314b3fd10863 1x" loading="lazy"></a></p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="64:1-81:3"><div class="highlight"><pre><code><span class="c1">// src/store.ts</span>\n\n<span class="k">import</span> <span class="p">{</span> <span class="nx">writable</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">svelte/store</span><span class="dl">\'</span><span class="p">;</span>\n\n<span class="kd">function</span> <span class="nf">createCount</span><span class="p">()</span> <span class="p">{</span>\n  <span class="kd">const</span> <span class="p">{</span> <span class="nx">subscribe</span><span class="p">,</span> <span class="kd">set</span><span class="p">,</span> <span class="nx">update</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">writable</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>\n\n  <span class="k">return</span> <span class="p">{</span>\n    <span class="nx">subscribe</span><span class="p">,</span>\n    <span class="na">increment</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">update</span><span class="p">(</span><span class="nx">n</span> <span class="o">=&gt;</span> <span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>\n    <span class="na">decrement</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">update</span><span class="p">(</span><span class="nx">n</span> <span class="o">=&gt;</span> <span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span>\n    <span class="na">reset</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">set</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>\n  <span class="p">};</span>\n<span class="p">}</span>\n\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="nf">createCount</span><span class="p">();</span>\n</code></pre></div></div>\n<div class="code-frame" data-lang="vue" data-sourcepos="83:1-96:3"><div class="highlight"><pre><code>// src/Home.svelte\n<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">count</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./store</span><span class="dl">"</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;div&gt;</span>\n  The count is {$count}\n<span class="nt">&lt;/div&gt;</span>\n\n<span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn btn-filled-surface"</span> <span class="na">on:click=</span><span class="s">{count.increment}</span><span class="nt">&gt;</span>+<span class="nt">&lt;/button&gt;</span>\n<span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn btn-filled-surface"</span> <span class="na">on:click=</span><span class="s">{count.decrement}</span><span class="nt">&gt;</span>-<span class="nt">&lt;/button&gt;</span>\n<span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn btn-filled-surface"</span> <span class="na">on:click=</span><span class="s">{count.reset}</span><span class="nt">&gt;</span>reset<span class="nt">&lt;/button&gt;</span>\n</code></pre></div></div>\n<h1 data-sourcepos="98:1-98:9">\n<span id="binding" class="fragment"></span><a href="#binding"><i class="fa fa-link"></i></a>binding</h1>\n<p data-sourcepos="100:1-102:40"><code>store</code>が書き込み可能な状態(<code>subscribe</code>や、<code>Auto-subscribe</code>)の時は、<br>\n他の変数と同じように<code>bind</code>が使えます。<br>\n<code>input</code>の要素を変えてみます。</p>\n<p data-sourcepos="104:1-104:124"><a href="https://camo.qiitausercontent.com/77ef75289e5194e5b7c33a531a3f76b9528a3bb3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f39393435666564332d643465612d366461612d663436362d6562666538316335366664652e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F9945fed3-d4ea-6daa-f466-ebfe81c56fde.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d33359a07ed3df23bd700cd880b8624d" alt="binding.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/9945fed3-d4ea-6daa-f466-ebfe81c56fde.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F9945fed3-d4ea-6daa-f466-ebfe81c56fde.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f54917a8d005ff80d77f59edd05fc72e 1x" loading="lazy"></a></p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="107:1-112:3"><div class="highlight"><pre><code><span class="c1">// src/store.ts</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">writable</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">svelte/store</span><span class="dl">\'</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">text</span> <span class="o">=</span> <span class="nf">writable</span><span class="p">(</span><span class="dl">\'\'</span><span class="p">);</span>\n</code></pre></div></div>\n<div class="code-frame" data-lang="vue" data-sourcepos="114:1-138:3"><div class="highlight"><pre><code>// src/Home.svelte\n<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">text</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">./store</span><span class="dl">\'</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"text"</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"text"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span&gt;</span>テキスト<span class="nt">&lt;/span&gt;</span>\n    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">id=</span><span class="s">"text"</span> <span class="na">bind:value=</span><span class="s">{$text}</span> <span class="na">minlength=</span><span class="s">"2"</span> <span class="na">required</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;/label&gt;</span>\n<span class="nt">&lt;/label&gt;</span>\n\n<span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn btn-filled-surface"</span> <span class="na">on:click=</span><span class="s">{()</span> <span class="err">=</span><span class="nt">&gt;</span> $text += \'こんにちは。\'}&gt;こんにちは。<span class="nt">&lt;/button&gt;</span>\n<span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn btn-filled-surface"</span> <span class="na">on:click=</span><span class="s">{()</span> <span class="err">=</span><span class="nt">&gt;</span> $text = \'\'}&gt;リセット<span class="nt">&lt;/button&gt;</span>\n\n<span class="nt">&lt;</span><span class="k">style</span><span class="nt">&gt;</span>\n  <span class="nt">input</span> <span class="p">{</span>\n    <span class="nl">width</span><span class="p">:</span> <span class="m">245px</span><span class="p">;</span>\n  <span class="p">}</span>\n  <span class="nt">button</span> <span class="p">{</span>\n    <span class="nl">margin-top</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>\n  <span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">style</span><span class="nt">&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="140:1-140:42">コードがかなり減りそうです。</p>\n',body:'# はじめに\n\nsvelte/storeについてのまとめを作りたかった\n今回は`derivered` `custom` `binding`について\n\n# 使ったもの\n\n* Vite + Svelte + Typescript\n* skelton\n\n# 前回(writable, Auto-subscribe, readable)\n\nhttps://qiita.com/doyaseizin/items/774dda71a18fd3a61f58\n\n# derivered\n\n`store`されている値が変化した時に一緒に変化させるメソッド。\n`computed`みたいな感じ？\n公式では時計と、所要時間という風に使ってました。\n\n![deliver.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/b1b87dd1-da90-409e-b398-aaef70e006ee.gif)\n\n\n```typescript\n// src/store.ts\nimport { readable, derived } from \'svelte/store\';\n\nexport const count = readable(0, (set) => {\n  let c = 1\n  const interval = setInterval(() => {\n    set(c);\n    c++\n  }, 1000);\n\n  return function stop() {\n    clearInterval(interval);\n  };\n});\n\nexport const double = derived(\n  count,\n  $count => $count * 2\n)\n```\n\n\n```vue\n<script lang="ts">\n\timport { count, double } from "../../store";\n<\/script>\n\n<div>現在: {$count}</div>\n<div>２倍: {$double}</div>\n```\n\n# custom\n\n`store`をカスタマイズすることができ、自前のメソッド等を`store`に持たせることができる。\n`store`の使い方が固定されている場合はカスタマイズした方が再利用性が高くなりそう。\n\n![custom.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/fcdfa349-08c1-a7cc-4a26-790f7082ccc6.gif)\n\n\n```typescript\n// src/store.ts\n\nimport { writable } from \'svelte/store\';\n\nfunction createCount() {\n  const { subscribe, set, update } = writable(0);\n\n  return {\n    subscribe,\n    increment: () => update(n => n + 1),\n    decrement: () => update(n => n - 1),\n    reset: () => set(0)\n  };\n}\n\nexport const count = createCount();\n```\n\n```vue\n// src/Home.svelte\n<script>\n  import { count } from "./store"\n<\/script>\n\n<div>\n  The count is {$count}\n</div>\n\n<button class="btn btn-filled-surface" on:click={count.increment}>+</button>\n<button class="btn btn-filled-surface" on:click={count.decrement}>-</button>\n<button class="btn btn-filled-surface" on:click={count.reset}>reset</button>\n```\n\n# binding\n\n`store`が書き込み可能な状態(`subscribe`や、`Auto-subscribe`)の時は、\n他の変数と同じように`bind`が使えます。\n`input`の要素を変えてみます。\n\n![binding.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/9945fed3-d4ea-6daa-f466-ebfe81c56fde.gif)\n\n\n```typescript\n// src/store.ts\nimport { writable } from \'svelte/store\';\n\nexport const text = writable(\'\');\n```\n\n```vue\n// src/Home.svelte\n<script>\n  import { text } from \'./store\';\n<\/script>\n\n<label for="text">\n  <label for="text">\n    <span>テキスト</span>\n    <input type="text" id="text" bind:value={$text} minlength="2" required>\n  </label>\n</label>\n\n<button class="btn btn-filled-surface" on:click={() => $text += \'こんにちは。\'}>こんにちは。</button>\n<button class="btn btn-filled-surface" on:click={() => $text = \'\'}>リセット</button>\n\n<style>\n  input {\n    width: 245px;\n  }\n  button {\n    margin-top: 10px;\n  }\n</style>\n```\n\nコードがかなり減りそうです。\n',coediting:!1,comments_count:0,created_at:"2022-12-05T17:44:42+09:00",group:null,id:"3b34aa1c8c090adbeacb",likes_count:1,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Svelte",versions:[]},{name:"SvelteKit",versions:[]}],title:"svelte/storeについてのまとめ - 後編",updated_at:"2022-12-05T20:17:13+09:00",url:"https://qiita.com/maaaashi/items/3b34aa1c8c090adbeacb",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:612,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:59">svelte/storeについてのまとめを作りたかった<br>\n今回は<code>writable</code> <code>Auto-subscribe</code> <code>readable</code>について</p>\n<h1 data-sourcepos="6:1-6:17">\n<span id="使ったもの" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>使ったもの</h1>\n<ul data-sourcepos="8:1-10:0">\n<li data-sourcepos="8:1-8:31">Vite + SvelteKit + Typescript</li>\n<li data-sourcepos="9:1-10:0">skelton</li>\n</ul>\n<h1 data-sourcepos="11:1-11:10">\n<span id="writable" class="fragment"></span><a href="#writable"><i class="fa fa-link"></i></a>writable</h1>\n<p data-sourcepos="13:1-14:71">書き込み可能な状態を表す。<br>\n<code>subscribe</code> <code>update</code> <code>set</code>のメソッドが使えるようになる。</p>\n<p data-sourcepos="16:1-18:67"><code>subscribe</code>: 状態が変化したときに反応するメソッド。<br>\n<code>update</code>: 状態を今の状態から変化させたいときに使用するメソッド。<br>\n<code>set</code>: 固定値に変化させたいときに使うメソッド。</p>\n<p data-sourcepos="20:1-20:125"><a href="https://camo.qiitausercontent.com/493862ca03d7470ec5cc06ecff0abe2b5e2c5dc9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f30343333353836652d346239622d323336332d303939322d3534626462663065396365302e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0433586e-4b9b-2363-0992-54bdbf0e9ce0.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9a7753de77dc95f983246c21897e5f76" alt="writable.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0433586e-4b9b-2363-0992-54bdbf0e9ce0.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0433586e-4b9b-2363-0992-54bdbf0e9ce0.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3dd49940d895bd94db8d190c18dd021c 1x" loading="lazy"></a></p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="22:1-27:3"><div class="highlight"><pre><code><span class="c1">// src/store.js</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">writable</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">svelte/store</span><span class="dl">\'</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="nf">writable</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>\n</code></pre></div></div>\n<div class="code-frame" data-lang="vue" data-sourcepos="29:1-64:3"><div class="highlight"><pre><code>// src/routes/+page.svelte\n<span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n\t<span class="k">import</span> <span class="p">{</span> <span class="nx">count</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../store</span><span class="dl">"</span><span class="p">;</span>\n\n\t<span class="kd">let</span> <span class="nx">countValue</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n\t<span class="nx">count</span><span class="p">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nx">value</span> <span class="o">=&gt;</span> <span class="p">{</span>\n\t\t<span class="nx">countValue</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>\n\t<span class="p">})</span>\n\n\t<span class="kd">const</span> <span class="nx">increase</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n\t\t<span class="nx">count</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="nx">n</span> <span class="o">=&gt;</span> <span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>\n\t<span class="p">}</span>\n\n\t<span class="kd">const</span> <span class="nx">decrease</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n\t\t<span class="nx">count</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="nx">n</span> <span class="o">=&gt;</span> <span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>\n\t<span class="p">}</span>\n\n\t<span class="kd">const</span> <span class="nx">reset</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n\t\t<span class="nx">count</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>\n\t<span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;div&gt;</span>現在: {countValue}<span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"display: flex;"</span><span class="nt">&gt;</span>\n\t<span class="nt">&lt;button</span> <span class="na">on:click=</span><span class="s">{increase}</span><span class="nt">&gt;</span>＋<span class="nt">&lt;/button&gt;</span>\n\t<span class="nt">&lt;button</span> <span class="na">on:click=</span><span class="s">{decrease}</span><span class="nt">&gt;</span>ー<span class="nt">&lt;/button&gt;</span>\n\t<span class="nt">&lt;button</span> <span class="na">on:click=</span><span class="s">{reset}</span><span class="nt">&gt;</span>リセット<span class="nt">&lt;/button&gt;</span>\n<span class="nt">&lt;/div&gt;</span>\n\n<span class="nt">&lt;</span><span class="k">style</span><span class="nt">&gt;</span>\n    <span class="nt">button</span> <span class="p">{</span>\n        <span class="nl">width</span><span class="p">:</span> <span class="n">fit-content</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">style</span><span class="nt">&gt;</span>\n</code></pre></div></div>\n<h1 data-sourcepos="66:1-66:19">\n<span id="auto-subscription" class="fragment"></span><a href="#auto-subscription"><i class="fa fa-link"></i></a>Auto-subscription</h1>\n<p data-sourcepos="68:1-68:213">実は<code>subscribe</code>は一度実行すると<code>unsubscribe</code>を実行するまでは、そのコンポーネントが表示されなくてもずっと追ってしまい、メモリリークにつながってしまう。</p>\n<p data-sourcepos="70:1-70:75"><code>$</code>をつけることで自動でサブスクリプションしてくれる</p>\n<p data-sourcepos="72:1-72:125"><a href="https://camo.qiitausercontent.com/2bf91b158c9a723f53df63a6893b3841b250bfa3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f37303361646431302d656437622d313261332d623035342d3339636138323635376131302e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F703add10-ed7b-12a3-b054-39ca82657a10.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0679b98e6b48e246fda34421e81cf918" alt="writable.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/703add10-ed7b-12a3-b054-39ca82657a10.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F703add10-ed7b-12a3-b054-39ca82657a10.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2e49f60e8bc57fcdd54b92d775b532d5 1x" loading="lazy"></a></p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="74:1-79:3"><div class="highlight"><pre><code><span class="c1">// src/store.js</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">writable</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">svelte/store</span><span class="dl">\'</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="nf">writable</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>\n</code></pre></div></div>\n<div class="code-frame" data-lang="vue" data-sourcepos="81:1-111:3"><div class="highlight"><pre><code>// src/routes/+page.svelte\n<span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n\t<span class="k">import</span> <span class="p">{</span> <span class="nx">count</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../store</span><span class="dl">"</span><span class="p">;</span>\n\n\t<span class="kd">const</span> <span class="nx">increase</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n\t\t<span class="nx">count</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="nx">n</span> <span class="o">=&gt;</span> <span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>\n\t<span class="p">}</span>\n\n\t<span class="kd">const</span> <span class="nx">decrease</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n\t\t<span class="nx">count</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="nx">n</span> <span class="o">=&gt;</span> <span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>\n\t<span class="p">}</span>\n\n\t<span class="kd">const</span> <span class="nx">reset</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n\t\t<span class="nx">count</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>\n\t<span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;div&gt;</span>現在: {$count}<span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"display: flex;"</span><span class="nt">&gt;</span>\n\t<span class="nt">&lt;button</span> <span class="na">on:click=</span><span class="s">{increase}</span><span class="nt">&gt;</span>＋<span class="nt">&lt;/button&gt;</span>\n\t<span class="nt">&lt;button</span> <span class="na">on:click=</span><span class="s">{decrease}</span><span class="nt">&gt;</span>ー<span class="nt">&lt;/button&gt;</span>\n\t<span class="nt">&lt;button</span> <span class="na">on:click=</span><span class="s">{reset}</span><span class="nt">&gt;</span>リセット<span class="nt">&lt;/button&gt;</span>\n<span class="nt">&lt;/div&gt;</span>\n\n<span class="nt">&lt;</span><span class="k">style</span><span class="nt">&gt;</span>\n\t<span class="nt">button</span> <span class="p">{</span>\n\t\t<span class="nl">width</span><span class="p">:</span> <span class="n">fit-content</span><span class="p">;</span>\n\t<span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">style</span><span class="nt">&gt;</span>\n</code></pre></div></div>\n<h1 data-sourcepos="113:1-113:10">\n<span id="readable" class="fragment"></span><a href="#readable"><i class="fa fa-link"></i></a>readable</h1>\n<p data-sourcepos="115:1-116:63">ユーザーが外部から定義してはいけないものは<code>readable</code>を使い、読み込み専用にする。<br>\n例えば、タイマーや、マウス位置、時間など。</p>\n<p data-sourcepos="118:1-118:86">先ほどのカウンターを1秒ごとに1増えるようなものにしてみる。</p>\n<p data-sourcepos="120:1-120:125"><a href="https://camo.qiitausercontent.com/2a04f0783d5875a85488df754b1ef03323886a3c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f62313462633866652d356239642d313034322d626565662d3464663363373234303630382e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fb14bc8fe-5b9d-1042-beef-4df3c7240608.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8536e5a5cc4ff930ea73351385b1d615" alt="readable.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/b14bc8fe-5b9d-1042-beef-4df3c7240608.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fb14bc8fe-5b9d-1042-beef-4df3c7240608.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ec699c5a90f44ca3169dc6cc1bbdc882 1x" loading="lazy"></a></p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="123:1-138:3"><div class="highlight"><pre><code><span class="c1">// src/store.js</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">readable</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">svelte/store</span><span class="dl">\'</span><span class="p">;</span>\n\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="nf">readable</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kd">set</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">1</span>\n  <span class="kd">const</span> <span class="nx">interval</span> <span class="o">=</span> <span class="nf">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n\t\t<span class="nf">set</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>\n    <span class="nx">c</span><span class="o">++</span>\n\t<span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>\n\n\t<span class="k">return</span> <span class="kd">function</span> <span class="nf">stop</span><span class="p">()</span> <span class="p">{</span>\n\t\t<span class="nf">clearInterval</span><span class="p">(</span><span class="nx">interval</span><span class="p">);</span>\n\t<span class="p">};</span>\n<span class="p">});</span>\n</code></pre></div></div>\n<div class="code-frame" data-lang="vue" data-sourcepos="140:1-147:3"><div class="highlight"><pre><code>// src/routes/+page.svelte\n<span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n\t<span class="k">import</span> <span class="p">{</span> <span class="nx">count</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../store</span><span class="dl">"</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;div&gt;</span>現在: {$count}<span class="nt">&lt;/div&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="149:1-149:69">次回は<code>derivered</code> <code>custom</code> <code>binding</code>についてまとめます。</p>\n<h3 data-sourcepos="151:1-151:10">\n<span id="追記" class="fragment"></span><a href="#%E8%BF%BD%E8%A8%98"><i class="fa fa-link"></i></a>追記</h3>\n<p data-sourcepos="153:1-153:21">後編上げました</p>\n<p data-sourcepos="155:1-155:55"><iframe id="qiita-embed-content__10f83946ada4e9e51390b04827ed5260" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__10f83946ada4e9e51390b04827ed5260" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2F3b34aa1c8c090adbeacb" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n',body:'# はじめに\n\nsvelte/storeについてのまとめを作りたかった\n今回は`writable` `Auto-subscribe` `readable`について\n\n# 使ったもの\n\n* Vite + SvelteKit + Typescript\n* skelton\n\n# writable\n\n書き込み可能な状態を表す。\n`subscribe` `update` `set`のメソッドが使えるようになる。\n\n`subscribe`: 状態が変化したときに反応するメソッド。\n`update`: 状態を今の状態から変化させたいときに使用するメソッド。\n`set`: 固定値に変化させたいときに使うメソッド。\n\n![writable.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0433586e-4b9b-2363-0992-54bdbf0e9ce0.gif)\n\n```typescript\n// src/store.js\nimport { writable } from \'svelte/store\';\n\nexport const count = writable(0);\n```\n\n```vue\n// src/routes/+page.svelte\n<script lang="ts">\n\timport { count } from "../../store";\n\n\tlet countValue = 0;\n\tcount.subscribe(value => {\n\t\tcountValue = value;\n\t})\n\n\tconst increase = () => {\n\t\tcount.update(n => n + 1);\n\t}\n\n\tconst decrease = () => {\n\t\tcount.update(n => n - 1);\n\t}\n\n\tconst reset = () => {\n\t\tcount.set(0)\n\t}\n<\/script>\n\n<div>現在: {countValue}</div>\n<div style="display: flex;">\n\t<button on:click={increase}>＋</button>\n\t<button on:click={decrease}>ー</button>\n\t<button on:click={reset}>リセット</button>\n</div>\n\n<style>\n    button {\n        width: fit-content;\n    }\n</style>\n```\n\n# Auto-subscription\n\n実は`subscribe`は一度実行すると`unsubscribe`を実行するまでは、そのコンポーネントが表示されなくてもずっと追ってしまい、メモリリークにつながってしまう。\n\n`$`をつけることで自動でサブスクリプションしてくれる\n\n![writable.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/703add10-ed7b-12a3-b054-39ca82657a10.gif)\n\n```typescript\n// src/store.js\nimport { writable } from \'svelte/store\';\n\nexport const count = writable(0);\n```\n\n```vue\n// src/routes/+page.svelte\n<script lang="ts">\n\timport { count } from "../../store";\n\n\tconst increase = () => {\n\t\tcount.update(n => n + 1);\n\t}\n\n\tconst decrease = () => {\n\t\tcount.update(n => n - 1);\n\t}\n\n\tconst reset = () => {\n\t\tcount.set(0)\n\t}\n<\/script>\n\n<div>現在: {$count}</div>\n<div style="display: flex;">\n\t<button on:click={increase}>＋</button>\n\t<button on:click={decrease}>ー</button>\n\t<button on:click={reset}>リセット</button>\n</div>\n\n<style>\n\tbutton {\n\t\twidth: fit-content;\n\t}\n</style>\n```\n\n# readable\n\nユーザーが外部から定義してはいけないものは`readable`を使い、読み込み専用にする。\n例えば、タイマーや、マウス位置、時間など。\n\n先ほどのカウンターを1秒ごとに1増えるようなものにしてみる。\n\n![readable.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/b14bc8fe-5b9d-1042-beef-4df3c7240608.gif)\n\n\n```typescript\n// src/store.js\nimport { readable } from \'svelte/store\';\n\nexport const count = readable(0, (set) => {\n  let c = 1\n  const interval = setInterval(() => {\n\t\tset(c);\n    c++\n\t}, 1000);\n\n\treturn function stop() {\n\t\tclearInterval(interval);\n\t};\n});\n```\n\n```vue\n// src/routes/+page.svelte\n<script lang="ts">\n\timport { count } from "../../store";\n<\/script>\n\n<div>現在: {$count}</div>\n```\n\n次回は`derivered` `custom` `binding`についてまとめます。\n\n### 追記\n\n後編上げました\n\nhttps://qiita.com/doyaseizin/items/3b34aa1c8c090adbeacb\n',coediting:!1,comments_count:0,created_at:"2022-12-04T12:50:22+09:00",group:null,id:"774dda71a18fd3a61f58",likes_count:1,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Svelte",versions:[]},{name:"SvelteKit",versions:[]}],title:"svelte/storeについてのまとめ - 前編",updated_at:"2022-12-05T17:45:39+09:00",url:"https://qiita.com/maaaashi/items/774dda71a18fd3a61f58",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:785,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:169">私は都内のweb系の企業でエンジニアをしています。<br>\n業務で学んだこと、気づいたことをお互いにアウトプットする<strong>文化の形成</strong>のために行っている取り組みについて話します。</p>\n<h1 data-sourcepos="6:1-6:46">\n<span id="その１---定期勉強会を開く失敗" class="fragment"></span><a href="#%E3%81%9D%E3%81%AE%EF%BC%91---%E5%AE%9A%E6%9C%9F%E5%8B%89%E5%BC%B7%E4%BC%9A%E3%82%92%E9%96%8B%E3%81%8F%E5%A4%B1%E6%95%97"><i class="fa fa-link"></i></a>その１ - 定期勉強会を開く(失敗)</h1>\n<h2 data-sourcepos="8:1-8:9">\n<span id="目的" class="fragment"></span><a href="#%E7%9B%AE%E7%9A%84"><i class="fa fa-link"></i></a>目的</h2>\n<ul data-sourcepos="10:1-11:0">\n<li data-sourcepos="10:1-11:0">定期的にいろいろな分野の勉強会を軽い感じで自分が開けば後に続いてくれたりするかも！</li>\n</ul>\n<h2 data-sourcepos="12:1-12:27">\n<span id="数か月続けた結果" class="fragment"></span><a href="#%E6%95%B0%E3%81%8B%E6%9C%88%E7%B6%9A%E3%81%91%E3%81%9F%E7%B5%90%E6%9E%9C"><i class="fa fa-link"></i></a>数か月続けた結果</h2>\n<p data-sourcepos="14:1-14:84">⇒ <font color="red"><strong>勉強会を開くおじさんになりました。</strong></font></p>\n<p data-sourcepos="16:1-18:66">私は勉強会を開く人。<br>\n周りのチーム員は聞く側。<br>\nという風に役割が固定してしまいました。。。。</p>\n<h1 data-sourcepos="20:1-20:64">\n<span id="その２---勉強会を持ち回り制にしてみた失敗" class="fragment"></span><a href="#%E3%81%9D%E3%81%AE%EF%BC%92---%E5%8B%89%E5%BC%B7%E4%BC%9A%E3%82%92%E6%8C%81%E3%81%A1%E5%9B%9E%E3%82%8A%E5%88%B6%E3%81%AB%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E5%A4%B1%E6%95%97"><i class="fa fa-link"></i></a>その２ - 勉強会を持ち回り制にしてみた(失敗)</h1>\n<h2 data-sourcepos="22:1-22:9">\n<span id="目的-1" class="fragment"></span><a href="#%E7%9B%AE%E7%9A%84-1"><i class="fa fa-link"></i></a>目的</h2>\n<ul data-sourcepos="24:1-25:0">\n<li data-sourcepos="24:1-25:0">私だけに役割を固定せずに、<strong>みんなが勉強会を開く人</strong>の役割になる</li>\n</ul>\n<h2 data-sourcepos="26:1-26:9">\n<span id="結果" class="fragment"></span><a href="#%E7%B5%90%E6%9E%9C"><i class="fa fa-link"></i></a>結果</h2>\n<p data-sourcepos="28:1-28:51">⇒ <font color="red"><strong>開催されない</strong></font></p>\n<p data-sourcepos="30:1-30:78">ん～、勉強会ってハードルが高かったのかもしれません...</p>\n<ul data-sourcepos="32:1-36:0">\n<li data-sourcepos="32:1-32:20">忙しいから...</li>\n<li data-sourcepos="33:1-36:0">話す内容が見つからなくて...<br>\nなどの理由でなかなか開催されない...</li>\n</ul>\n<h1 data-sourcepos="37:1-37:92">\n<span id="その３---数分のltライトニングトークで技術紹介をしてみた失敗" class="fragment"></span><a href="#%E3%81%9D%E3%81%AE%EF%BC%93---%E6%95%B0%E5%88%86%E3%81%AElt%E3%83%A9%E3%82%A4%E3%83%88%E3%83%8B%E3%83%B3%E3%82%B0%E3%83%88%E3%83%BC%E3%82%AF%E3%81%A7%E6%8A%80%E8%A1%93%E7%B4%B9%E4%BB%8B%E3%82%92%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E5%A4%B1%E6%95%97"><i class="fa fa-link"></i></a>その３ - 数分のLT(ライトニングトーク)で技術紹介をしてみた(失敗)</h1>\n<h2 data-sourcepos="39:1-39:9">\n<span id="目的-2" class="fragment"></span><a href="#%E7%9B%AE%E7%9A%84-2"><i class="fa fa-link"></i></a>目的</h2>\n<ol data-sourcepos="41:1-45:0">\n<li data-sourcepos="41:1-41:48">技術者の創作意欲をかき立てる！</li>\n<li data-sourcepos="42:1-42:21">何かを作る！</li>\n<li data-sourcepos="43:1-43:56">それをLTでいいから聞かせてとねだる！</li>\n<li data-sourcepos="44:1-45:0">アウトプットを狙う</li>\n</ol>\n<h2 data-sourcepos="46:1-46:9">\n<span id="結果-1" class="fragment"></span><a href="#%E7%B5%90%E6%9E%9C-1"><i class="fa fa-link"></i></a>結果</h2>\n<ul data-sourcepos="48:1-49:0">\n<li data-sourcepos="48:1-49:0"><strong><font color="red">1. 技術者の創作意欲をかき立てる！までしか進まない...</font></strong></li>\n</ul>\n<p data-sourcepos="50:1-50:23">LTの感想としては</p>\n<ul data-sourcepos="51:1-54:0">\n<li data-sourcepos="51:1-51:32">作ってみたくなった！</li>\n<li data-sourcepos="52:1-52:35">これくらいなら話せそう</li>\n<li data-sourcepos="53:1-54:0">学習意欲が高まりました</li>\n</ul>\n<p data-sourcepos="55:1-56:58">のような割と良い意見が出ており、これはいい流れか！と思ったのですが、<br>\n<font color="red">結局続きませんでした...</font></p>\n<h1 data-sourcepos="58:1-58:50">\n<span id="今行っている取り組み---いい感じ" class="fragment"></span><a href="#%E4%BB%8A%E8%A1%8C%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF---%E3%81%84%E3%81%84%E6%84%9F%E3%81%98"><i class="fa fa-link"></i></a>今行っている取り組み - いい感じ？</h1>\n<h2 data-sourcepos="60:1-60:87">\n<span id="12月いっぱいで何か1つのwebアプリケーションを作ってみよう" class="fragment"></span><a href="#12%E6%9C%88%E3%81%84%E3%81%A3%E3%81%B1%E3%81%84%E3%81%A7%E4%BD%95%E3%81%8B1%E3%81%A4%E3%81%AEweb%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86"><i class="fa fa-link"></i></a>12月いっぱいで何か1つのwebアプリケーションを作ってみよう！</h2>\n<ul data-sourcepos="62:1-65:0">\n<li data-sourcepos="62:1-62:44">何を作れば良いかわからない。</li>\n<li data-sourcepos="63:1-63:35">作りたいものが特にない</li>\n<li data-sourcepos="64:1-65:0">使いたい技術もわからない</li>\n</ul>\n<p data-sourcepos="66:1-68:93">上記のような理由で学習から遠ざかっていた人が多かった。<br>\nそういった人にテーマ決めから技術選定まで付き合い、<br>\n一人一つ何かのwebアプリケーションを作ってみようとしております。</p>\n<p data-sourcepos="70:1-70:93">今のところいい感じに全員が動いているので、今月末が楽しみです！</p>\n<p data-sourcepos="73:1-73:10">※ 追記</p>\n<p data-sourcepos="75:1-76:46">全員が完成まではいきませんでしたが、<br>\n全員が手を動かしてくれました👍</p>\n<p data-sourcepos="78:1-78:60">来年からもチームビルディング頑張ります！</p>\n',body:'# はじめに\n\n私は都内のweb系の企業でエンジニアをしています。\n業務で学んだこと、気づいたことをお互いにアウトプットする**文化の形成**のために行っている取り組みについて話します。\n\n# その１ - 定期勉強会を開く(失敗)\n\n## 目的\n\n* 定期的にいろいろな分野の勉強会を軽い感じで自分が開けば後に続いてくれたりするかも！\n\n## 数か月続けた結果\n\n⇒ <font color="red">**勉強会を開くおじさんになりました。**</font>\n\n私は勉強会を開く人。\n周りのチーム員は聞く側。\nという風に役割が固定してしまいました。。。。\n\n# その２ - 勉強会を持ち回り制にしてみた(失敗)\n\n## 目的\n\n* 私だけに役割を固定せずに、**みんなが勉強会を開く人**の役割になる\n\n## 結果\n\n⇒ <font color="red">**開催されない**</font>\n\nん～、勉強会ってハードルが高かったのかもしれません...\n\n* 忙しいから...\n* 話す内容が見つからなくて...\nなどの理由でなかなか開催されない...\n\n\n# その３ - 数分のLT(ライトニングトーク)で技術紹介をしてみた(失敗)\n\n## 目的\n\n1. 技術者の創作意欲をかき立てる！\n1. 何かを作る！\n1. それをLTでいいから聞かせてとねだる！\n1. アウトプットを狙う\n\n## 結果\n\n* **<font color="red">1. 技術者の創作意欲をかき立てる！までしか進まない...</font>**\n\nLTの感想としては\n* 作ってみたくなった！\n* これくらいなら話せそう\n* 学習意欲が高まりました\n\nのような割と良い意見が出ており、これはいい流れか！と思ったのですが、\n<font color="red">結局続きませんでした...</font>\n\n# 今行っている取り組み - いい感じ？\n\n## 12月いっぱいで何か1つのwebアプリケーションを作ってみよう！\n\n* 何を作れば良いかわからない。\n* 作りたいものが特にない\n* 使いたい技術もわからない\n\n上記のような理由で学習から遠ざかっていた人が多かった。\nそういった人にテーマ決めから技術選定まで付き合い、\n一人一つ何かのwebアプリケーションを作ってみようとしております。\n\n今のところいい感じに全員が動いているので、今月末が楽しみです！\n\n\n※ 追記\n\n全員が完成まではいきませんでしたが、\n全員が手を動かしてくれました👍\n\n来年からもチームビルディング頑張ります！\n',coediting:!1,comments_count:0,created_at:"2022-12-04T11:53:35+09:00",group:null,id:"6a29d4349bcf5acc0df6",likes_count:9,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"アウトプット",versions:[]}],title:"チームにアウトプットの文化を作ろうとしている話",updated_at:"2023-02-24T14:50:23+09:00",url:"https://qiita.com/maaaashi/items/6a29d4349bcf5acc0df6",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:730,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:20">\n<span id="easing関数とは" class="fragment"></span><a href="#easing%E9%96%A2%E6%95%B0%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>easing関数とは</h1>\n<p data-sourcepos="3:1-5:146">transitionやanimationなどを使うときに、<br>\n時間の経過とともにオブジェクトがどのような速度で、変化するかを指定するもので、<br>\n10種類のeaseing関数がそれぞれ<code>in</code>、<code>out</code>、<code>inout</code>のバリエーションと、<code>linear</code>の合計31種類が用意されています。</p>\n<p data-sourcepos="7:1-9:60"><code>In</code>は消えるときの変化。<br>\n<code>Out</code>は表示時の変化。<br>\n日本語的には逆に勘違いしそうなので注意。</p>\n<p data-sourcepos="11:1-11:73"><code>InOut</code>は消えるとき、表示時両方に変化をつける方法。</p>\n<p data-sourcepos="13:1-14:93"><a href="https://svelte.jp/examples/easing" rel="nofollow noopener" target="_blank">公式</a>が速度変化のグラフを用意してくれているが、<br>\n正直表示してみないとよくわからないので、今回は表示させてみた。</p>\n<table data-sourcepos="17:1-28:49">\n<thead>\n<tr data-sourcepos="17:1-17:26">\n<th data-sourcepos="17:2-17:7">番号</th>\n<th data-sourcepos="17:9-17:12">ease</th>\n<th data-sourcepos="17:14-17:15">in</th>\n<th data-sourcepos="17:17-17:19">out</th>\n<th data-sourcepos="17:21-17:25">inOut</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos="19:1-19:48">\n<td data-sourcepos="19:2-19:2">1</td>\n<td data-sourcepos="19:4-19:10">back</td>\n<td data-sourcepos="19:12-19:22"><code>backIn</code></td>\n<td data-sourcepos="19:24-19:35"><code>backOut</code></td>\n<td data-sourcepos="19:37-19:47"><code>backInOut</code></td>\n</tr>\n<tr data-sourcepos="20:1-20:50">\n<td data-sourcepos="20:2-20:2">2</td>\n<td data-sourcepos="20:4-20:10">bounce</td>\n<td data-sourcepos="20:12-20:22"><code>bounceIN</code></td>\n<td data-sourcepos="20:24-20:35"><code>bounceOut</code></td>\n<td data-sourcepos="20:37-20:49"><code>bounceInOut</code></td>\n</tr>\n<tr data-sourcepos="21:1-21:48">\n<td data-sourcepos="21:2-21:2">3</td>\n<td data-sourcepos="21:4-21:10">circ</td>\n<td data-sourcepos="21:12-21:22"><code>circIN</code></td>\n<td data-sourcepos="21:24-21:35"><code>circOut</code></td>\n<td data-sourcepos="21:37-21:47"><code>circInOut</code></td>\n</tr>\n<tr data-sourcepos="22:1-22:49">\n<td data-sourcepos="22:2-22:2">4</td>\n<td data-sourcepos="22:4-22:10">cubic</td>\n<td data-sourcepos="22:12-22:22"><code>cubicIN</code></td>\n<td data-sourcepos="22:24-22:35"><code>cubicOut</code></td>\n<td data-sourcepos="22:37-22:48"><code>cubicInOut</code></td>\n</tr>\n<tr data-sourcepos="23:1-23:51">\n<td data-sourcepos="23:2-23:2">5</td>\n<td data-sourcepos="23:4-23:10">elastic</td>\n<td data-sourcepos="23:12-23:22"><code>elasticIN</code></td>\n<td data-sourcepos="23:24-23:35"><code>elasticOut</code></td>\n<td data-sourcepos="23:37-23:50"><code>elasticInOut</code></td>\n</tr>\n<tr data-sourcepos="24:1-24:48">\n<td data-sourcepos="24:2-24:2">6</td>\n<td data-sourcepos="24:4-24:10">expo</td>\n<td data-sourcepos="24:12-24:22"><code>expoIN</code></td>\n<td data-sourcepos="24:24-24:35"><code>expoOut</code></td>\n<td data-sourcepos="24:37-24:47"><code>expoInOut</code></td>\n</tr>\n<tr data-sourcepos="25:1-25:48">\n<td data-sourcepos="25:2-25:2">7</td>\n<td data-sourcepos="25:4-25:10">quad</td>\n<td data-sourcepos="25:12-25:22"><code>quadIN</code></td>\n<td data-sourcepos="25:24-25:35"><code>quadOut</code></td>\n<td data-sourcepos="25:37-25:47"><code>quadInOut</code></td>\n</tr>\n<tr data-sourcepos="26:1-26:49">\n<td data-sourcepos="26:2-26:2">8</td>\n<td data-sourcepos="26:4-26:10">quart</td>\n<td data-sourcepos="26:12-26:22"><code>quartIN</code></td>\n<td data-sourcepos="26:24-26:35"><code>quartOut</code></td>\n<td data-sourcepos="26:37-26:48"><code>quartInOut</code></td>\n</tr>\n<tr data-sourcepos="27:1-27:49">\n<td data-sourcepos="27:2-27:2">9</td>\n<td data-sourcepos="27:4-27:10">quint</td>\n<td data-sourcepos="27:12-27:22"><code>quintIN</code></td>\n<td data-sourcepos="27:24-27:35"><code>quintOut</code></td>\n<td data-sourcepos="27:37-27:48"><code>quintInOut</code></td>\n</tr>\n<tr data-sourcepos="28:1-28:49">\n<td data-sourcepos="28:2-28:3">10</td>\n<td data-sourcepos="28:5-28:11">sine</td>\n<td data-sourcepos="28:13-28:23"><code>sineIN</code></td>\n<td data-sourcepos="28:25-28:36"><code>sineOut</code></td>\n<td data-sourcepos="28:38-28:48"><code>sineInOut</code></td>\n</tr>\n</tbody>\n</table>\n<h2 data-sourcepos="30:1-30:18">\n<span id="使ったもの" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>使ったもの</h2>\n<ul data-sourcepos="32:1-33:0">\n<li data-sourcepos="32:1-33:0">Vite + Svelte + Typescript</li>\n</ul>\n<h2 data-sourcepos="34:1-34:27">\n<span id="検証コード画面" class="fragment"></span><a href="#%E6%A4%9C%E8%A8%BC%E3%82%B3%E3%83%BC%E3%83%89%E7%94%BB%E9%9D%A2"><i class="fa fa-link"></i></a>検証コード・画面</h2>\n<p data-sourcepos="36:1-36:69">最初に載せると見づらくなるので最後に載せます。</p>\n<h1 data-sourcepos="38:1-38:41">\n<span id="easing関数を全て試していく" class="fragment"></span><a href="#easing%E9%96%A2%E6%95%B0%E3%82%92%E5%85%A8%E3%81%A6%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%84%E3%81%8F"><i class="fa fa-link"></i></a>easing関数を全て試していく。</h1>\n<h2 data-sourcepos="40:1-40:10">\n<span id="1-back" class="fragment"></span><a href="#1-back"><i class="fa fa-link"></i></a>1. back</h2>\n<p data-sourcepos="42:1-42:126"><a href="https://camo.qiitausercontent.com/989954825f972e3cf853ba43817a7baae95f3ea7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f62643862303464322d643064322d313631622d383039332d3762343335333233343437372e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fbd8b04d2-d0d2-161b-8093-7b4353234477.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=36a238bfee5855b90c08016326bcb82c" alt="backInOut.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/bd8b04d2-d0d2-161b-8093-7b4353234477.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fbd8b04d2-d0d2-161b-8093-7b4353234477.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=de09ce234ed5913471b793bdcf755c03 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="44:1-44:12">\n<span id="2-bounce" class="fragment"></span><a href="#2-bounce"><i class="fa fa-link"></i></a>2. bounce</h2>\n<p data-sourcepos="46:1-46:128"><a href="https://camo.qiitausercontent.com/1cd8b956ed68c957235de0b5eba4c3f911a31618/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f34396639373537312d376233622d383566382d353361612d3962343862396431316331362e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F49f97571-7b3b-85f8-53aa-9b48b9d11c16.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=09253846b3918962d1e1182de4952720" alt="bounceInOut.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/49f97571-7b3b-85f8-53aa-9b48b9d11c16.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F49f97571-7b3b-85f8-53aa-9b48b9d11c16.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6363feb07e9af9d31adb488b77175429 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="48:1-48:10">\n<span id="3-circ" class="fragment"></span><a href="#3-circ"><i class="fa fa-link"></i></a>3. circ</h2>\n<p data-sourcepos="50:1-50:126"><a href="https://camo.qiitausercontent.com/3f4fc231c3d7190f97dd7b9dccbd7cd3c94deaae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31353135353163312d383931392d646162322d646430642d3434643566353563613738382e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F151551c1-8919-dab2-dd0d-44d5f55ca788.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0a94d38ce8f56fb4c37457d0155ad3c8" alt="circInOut.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/151551c1-8919-dab2-dd0d-44d5f55ca788.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F151551c1-8919-dab2-dd0d-44d5f55ca788.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b50758a296344031b2833d782dde98c6 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="52:1-52:11">\n<span id="4-cubic" class="fragment"></span><a href="#4-cubic"><i class="fa fa-link"></i></a>4. cubic</h2>\n<p data-sourcepos="54:1-54:127"><a href="https://camo.qiitausercontent.com/1e45d6580eb4a7ea01f5be2164bcb33276d0b3f4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f61333963323037342d333430622d643466392d613932312d3238316561396364386132392e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa39c2074-340b-d4f9-a921-281ea9cd8a29.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=29361907da86e87a3b6c71bbbbb42ac2" alt="cubicInOut.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a39c2074-340b-d4f9-a921-281ea9cd8a29.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fa39c2074-340b-d4f9-a921-281ea9cd8a29.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=acffb16d8573e6c84d20bf2251d41a4b 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="56:1-56:13">\n<span id="5-elastic" class="fragment"></span><a href="#5-elastic"><i class="fa fa-link"></i></a>5. elastic</h2>\n<p data-sourcepos="58:1-58:129"><a href="https://camo.qiitausercontent.com/58bf26095fb961222bf2a8da786f93a3842cff44/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f39303038386236382d363863652d376466342d373138652d3163623034623062303163302e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F90088b68-68ce-7df4-718e-1cb04b0b01c0.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7112236d3554f43bb4a751e060b3424d" alt="elasticInOut.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/90088b68-68ce-7df4-718e-1cb04b0b01c0.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F90088b68-68ce-7df4-718e-1cb04b0b01c0.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=532dbad200371695a4e92d918db05250 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="60:1-60:10">\n<span id="6-expo" class="fragment"></span><a href="#6-expo"><i class="fa fa-link"></i></a>6. expo</h2>\n<p data-sourcepos="62:1-62:126"><a href="https://camo.qiitausercontent.com/b3db03e75e317d97d8f79f13ff1d8b1f672aa4af/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f38613735346661352d613733302d343638352d623038392d3434373233643037303739612e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F8a754fa5-a730-4685-b089-44723d07079a.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2b25bf74d56a69495f194203468851da" alt="expoInOut.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/8a754fa5-a730-4685-b089-44723d07079a.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F8a754fa5-a730-4685-b089-44723d07079a.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5b57d6648245737b11813b17cd307eb1 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="64:1-64:10">\n<span id="7-quad" class="fragment"></span><a href="#7-quad"><i class="fa fa-link"></i></a>7. quad</h2>\n<p data-sourcepos="66:1-66:126"><a href="https://camo.qiitausercontent.com/4e1eec44c9d2f8245c973c308e5c0f52fe3311b0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f31373139616137632d663563622d373561642d313038332d6562346364633137373464312e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1719aa7c-f5cb-75ad-1083-eb4cdc1774d1.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=92b4f64d0089355484d66a69c37f2e95" alt="quadInOut.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1719aa7c-f5cb-75ad-1083-eb4cdc1774d1.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F1719aa7c-f5cb-75ad-1083-eb4cdc1774d1.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1ed5a854f0590c1d8d0fc08586f28032 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="68:1-68:11">\n<span id="8-quart" class="fragment"></span><a href="#8-quart"><i class="fa fa-link"></i></a>8. quart</h2>\n<p data-sourcepos="70:1-70:127"><a href="https://camo.qiitausercontent.com/36731b2d602731ae01bc0fba5f9558cefd11a642/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f32363664393533332d303263642d663863662d383431302d6135316362626434666538362e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F266d9533-02cd-f8cf-8410-a51cbbd4fe86.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3c61cc0ed20a0c881046dbc3b0eadc3d" alt="quartInOut.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/266d9533-02cd-f8cf-8410-a51cbbd4fe86.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F266d9533-02cd-f8cf-8410-a51cbbd4fe86.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c04645a82f97810fa9854ff7459420fd 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="72:1-72:11">\n<span id="9-quint" class="fragment"></span><a href="#9-quint"><i class="fa fa-link"></i></a>9. quint</h2>\n<p data-sourcepos="74:1-74:127"><a href="https://camo.qiitausercontent.com/4741985ed3db5a3e0d40c400690147d5efc273bc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f39666538336366392d303239612d653062362d646330332d3765633731346162353034362e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F9fe83cf9-029a-e0b6-dc03-7ec714ab5046.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c1b6665d3f33e5e2826e5f81fef700be" alt="quintInOut.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/9fe83cf9-029a-e0b6-dc03-7ec714ab5046.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F9fe83cf9-029a-e0b6-dc03-7ec714ab5046.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=810432c3e19d72a260076546ca474de3 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="76:1-76:11">\n<span id="10-sine" class="fragment"></span><a href="#10-sine"><i class="fa fa-link"></i></a>10. sine</h2>\n<p data-sourcepos="78:1-78:126"><a href="https://camo.qiitausercontent.com/daac81fd3f7a4e244b394a126f05872a644fc86e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f34626533623862362d323262362d303838372d373364652d3134643935303636383363342e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4be3b8b6-22b6-0887-73de-14d9506683c4.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5b88f2c152db4fadb9a4456ce45c8da5" alt="sineInOut.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4be3b8b6-22b6-0887-73de-14d9506683c4.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4be3b8b6-22b6-0887-73de-14d9506683c4.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c99823440262fa6c755e840a8fc82df8 1x" loading="lazy"></a></p>\n<h1 data-sourcepos="80:1-80:8">\n<span id="結論" class="fragment"></span><a href="#%E7%B5%90%E8%AB%96"><i class="fa fa-link"></i></a>結論</h1>\n<h2 data-sourcepos="82:1-82:113">\n<span id="よく差がわかりません--ムムムこだわらないならどれでもよい印象ｗ" class="fragment"></span><a href="#%E3%82%88%E3%81%8F%E5%B7%AE%E3%81%8C%E3%82%8F%E3%81%8B%E3%82%8A%E3%81%BE%E3%81%9B%E3%82%93--%E3%83%A0%E3%83%A0%E3%83%A0%E3%81%93%E3%81%A0%E3%82%8F%E3%82%89%E3%81%AA%E3%81%84%E3%81%AA%E3%82%89%E3%81%A9%E3%82%8C%E3%81%A7%E3%82%82%E3%82%88%E3%81%84%E5%8D%B0%E8%B1%A1%EF%BD%97"><i class="fa fa-link"></i></a>よく差がわかりません..."(-""-)"ムムム。<br>(こだわらないならどれでもよい印象ｗ)</h2>\n<h2 data-sourcepos="85:1-85:18">\n<span id="検証コード" class="fragment"></span><a href="#%E6%A4%9C%E8%A8%BC%E3%82%B3%E3%83%BC%E3%83%89"><i class="fa fa-link"></i></a>検証コード</h2>\n<div class="code-frame" data-lang="vue" data-sourcepos="87:1-157:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n\t<span class="k">import</span> <span class="p">{</span> <span class="nx">backIn</span><span class="p">,</span> <span class="nx">backOut</span><span class="p">,</span> <span class="nx">backInOut</span><span class="p">,</span> <span class="nx">bounceIn</span><span class="p">,</span> <span class="nx">bounceOut</span><span class="p">,</span> <span class="nx">bounceInOut</span><span class="p">,</span> <span class="nx">circIn</span><span class="p">,</span> <span class="nx">circOut</span><span class="p">,</span> <span class="nx">circInOut</span><span class="p">,</span> <span class="nx">cubicIn</span><span class="p">,</span> <span class="nx">cubicOut</span><span class="p">,</span> <span class="nx">cubicInOut</span><span class="p">,</span> <span class="nx">elasticIn</span><span class="p">,</span> <span class="nx">elasticOut</span><span class="p">,</span> <span class="nx">elasticInOut</span><span class="p">,</span> <span class="nx">expoIn</span><span class="p">,</span> <span class="nx">expoOut</span><span class="p">,</span> <span class="nx">expoInOut</span><span class="p">,</span> <span class="nx">quadIn</span><span class="p">,</span> <span class="nx">quadOut</span><span class="p">,</span> <span class="nx">quadInOut</span><span class="p">,</span> <span class="nx">quartIn</span><span class="p">,</span> <span class="nx">quartOut</span><span class="p">,</span> <span class="nx">quartInOut</span><span class="p">,</span> <span class="nx">quintIn</span><span class="p">,</span> <span class="nx">quintOut</span><span class="p">,</span> <span class="nx">quintInOut</span><span class="p">,</span> <span class="nx">sineIn</span><span class="p">,</span> <span class="nx">sineOut</span><span class="p">,</span> <span class="nx">sineInOut</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">svelte/easing</span><span class="dl">\'</span><span class="p">;</span>\n\t<span class="k">import</span> <span class="p">{</span> <span class="nx">crossfade</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">svelte/transition</span><span class="dl">\'</span><span class="p">;</span>\n\n    <span class="kd">const</span> <span class="nx">title</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">backIn</span><span class="dl">\'</span>\n\n\t<span class="kd">const</span> <span class="p">[</span><span class="nx">send</span><span class="p">,</span> <span class="nx">receive</span><span class="p">]</span> <span class="o">=</span> <span class="nf">crossfade</span><span class="p">({</span>\n\t\t<span class="na">duration</span><span class="p">:</span> <span class="nx">d</span> <span class="o">=&gt;</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nx">d</span> <span class="o">*</span> <span class="mi">200</span><span class="p">),</span>\n\n\t\t<span class="nf">fallback</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="p">{</span>\n\t\t\t<span class="kd">const</span> <span class="nx">style</span> <span class="o">=</span> <span class="nf">getComputedStyle</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>\n\t\t\t<span class="kd">const</span> <span class="nx">transform</span> <span class="o">=</span> <span class="nx">style</span><span class="p">.</span><span class="nx">transform</span> <span class="o">===</span> <span class="dl">\'</span><span class="s1">none</span><span class="dl">\'</span> <span class="p">?</span> <span class="dl">\'\'</span> <span class="p">:</span> <span class="nx">style</span><span class="p">.</span><span class="nx">transform</span><span class="p">;</span>\n\n\t\t\t<span class="k">return</span> <span class="p">{</span>\n\t\t\t\t<span class="na">duration</span><span class="p">:</span> <span class="mi">1000</span><span class="p">,</span>\n\t\t\t\t<span class="na">easing</span><span class="p">:</span> <span class="nx">quintOut</span><span class="p">,</span>\n\t\t\t\t<span class="na">css</span><span class="p">:</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="s2">`\n\t\t\t\t\ttransform: </span><span class="p">${</span><span class="nx">transform</span><span class="p">}</span><span class="s2"> scale(</span><span class="p">${</span><span class="nx">t</span><span class="p">}</span><span class="s2">);\n\t\t\t\t\topacity: </span><span class="p">${</span><span class="nx">t</span><span class="p">}</span><span class="s2">\n\t\t\t\t`</span>\n\t\t\t<span class="p">};</span>\n\t\t<span class="p">}</span>\n\t<span class="p">});</span>\n\n\t<span class="kr">interface</span> <span class="nx">Todo</span> <span class="p">{</span>\n\t\t<span class="nl">id</span><span class="p">:</span> <span class="nx">number</span>\n\t\t<span class="nx">content</span><span class="p">:</span> <span class="nx">string</span>\n\t<span class="p">}</span>\n\n\t<span class="kd">let</span> <span class="nx">todos</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">Todo</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[];</span>\n\n\t<span class="kd">const</span> <span class="nx">click</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n\t\t<span class="nx">todos</span><span class="p">.</span><span class="nf">push</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">content</span><span class="p">:</span> <span class="nx">title</span> <span class="p">})</span>\n\t\t<span class="nx">todos</span> <span class="o">=</span> <span class="nx">todos</span>\n\t\t<span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="nx">todos</span> <span class="o">=</span> <span class="p">[]},</span> <span class="mi">2000</span><span class="p">)</span>\n\t<span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;button</span> <span class="na">on:click=</span><span class="s">{click}</span><span class="nt">&gt;</span>実行<span class="nt">&lt;/button&gt;</span>\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">\'m-auto\'</span><span class="nt">&gt;</span>\n\t<span class="nt">&lt;div&gt;</span>\n\t\t{#each todos as todo (todo.id)}\n\t\t\t<span class="nt">&lt;p</span>\n\t\t\t\t<span class="na">in:receive=</span><span class="s">"{{key: todo.id}}"</span>\n\t\t\t\t<span class="na">out:send=</span><span class="s">"{{key: todo.id}}"</span>\n\t\t\t<span class="nt">&gt;</span>\n\t\t\t\t{todo.content}\n\t\t\t<span class="nt">&lt;/p&gt;</span>\n\t\t{/each}\n\t<span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/div&gt;</span>\n\n<span class="nt">&lt;</span><span class="k">style</span><span class="nt">&gt;</span>\n\t<span class="nc">.m-auto</span> <span class="p">{</span>\n\t\t<span class="nl">margin</span><span class="p">:</span> <span class="nb">auto</span><span class="p">;</span>\n\t<span class="p">}</span>\n\n\t<span class="nt">p</span> <span class="p">{</span>\n\t\t<span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>\n\t\t<span class="nl">line-height</span><span class="p">:</span> <span class="m">1.2</span><span class="p">;</span>\n\t\t<span class="nl">padding</span><span class="p">:</span> <span class="m">0.5em</span> <span class="m">2.5em</span> <span class="m">0.5em</span> <span class="m">2em</span><span class="p">;</span>\n\t\t<span class="nl">margin</span><span class="p">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0.5em</span> <span class="m">0</span><span class="p">;</span>\n\t\t<span class="nl">border-radius</span><span class="p">:</span> <span class="m">2px</span><span class="p">;</span>\n\t\t<span class="py">user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>\n\t\t<span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="n">hsl</span><span class="p">(</span><span class="m">240</span><span class="p">,</span> <span class="m">8%</span><span class="p">,</span> <span class="m">70%</span><span class="p">);</span>\n\t\t<span class="nl">background-color</span><span class="p">:</span><span class="n">hsl</span><span class="p">(</span><span class="m">240</span><span class="p">,</span> <span class="m">8%</span><span class="p">,</span> <span class="m">93%</span><span class="p">);</span>\n\t\t<span class="nl">color</span><span class="p">:</span> <span class="m">#333</span><span class="p">;</span>\n\t<span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">style</span><span class="nt">&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="159:1-159:122"><a href="https://camo.qiitausercontent.com/69e67c787af8f4f093c35ed95b4eb79608d277ce/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f30613761636334642d643265332d306637642d343863382d3037666231343130646163632e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0a7acc4d-d2e3-0f7d-48c8-07fb1410dacc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8ceffad3db06727d3136b906e438d082" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0a7acc4d-d2e3-0f7d-48c8-07fb1410dacc.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F0a7acc4d-d2e3-0f7d-48c8-07fb1410dacc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9026db61eef5491ced6f05545531eaec 1x" loading="lazy"></a></p>\n',body:"# easing関数とは\n\ntransitionやanimationなどを使うときに、\n時間の経過とともにオブジェクトがどのような速度で、変化するかを指定するもので、\n10種類のeaseing関数がそれぞれ`in`、`out`、`inout`のバリエーションと、`linear`の合計31種類が用意されています。\n\n`In`は消えるときの変化。\n`Out`は表示時の変化。\n日本語的には逆に勘違いしそうなので注意。\n\n`InOut`は消えるとき、表示時両方に変化をつける方法。\n\n[公式](https://svelte.jp/examples/easing)が速度変化のグラフを用意してくれているが、\n正直表示してみないとよくわからないので、今回は表示させてみた。\n\n\n|番号|ease|in|out|inOut|\n|----|----|----|----|----|\n|1|back   |`backIn`   |`backOut`   |`backInOut`|\n|2|bounce |`bounceIN` |`bounceOut` |`bounceInOut`|\n|3|circ   |`circIN`   |`circOut`   |`circInOut`|\n|4|cubic  |`cubicIN`  |`cubicOut`  |`cubicInOut`|\n|5|elastic|`elasticIN`|`elasticOut`|`elasticInOut`|\n|6|expo   |`expoIN`   |`expoOut`   |`expoInOut`|\n|7|quad   |`quadIN`   |`quadOut`   |`quadInOut`|\n|8|quart  |`quartIN`  |`quartOut`  |`quartInOut`|\n|9|quint  |`quintIN`  |`quintOut`  |`quintInOut`|\n|10|sine   |`sineIN`   |`sineOut`   |`sineInOut`|\n\n## 使ったもの\n\n* Vite + Svelte + Typescript\n\n## 検証コード・画面\n\n最初に載せると見づらくなるので最後に載せます。\n\n# easing関数を全て試していく。\n\n## 1. back\n\n![backInOut.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/bd8b04d2-d0d2-161b-8093-7b4353234477.gif)\n\n## 2. bounce\n\n![bounceInOut.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/49f97571-7b3b-85f8-53aa-9b48b9d11c16.gif)\n\n## 3. circ\n\n![circInOut.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/151551c1-8919-dab2-dd0d-44d5f55ca788.gif)\n\n## 4. cubic\n\n![cubicInOut.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/a39c2074-340b-d4f9-a921-281ea9cd8a29.gif)\n\n## 5. elastic\n\n![elasticInOut.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/90088b68-68ce-7df4-718e-1cb04b0b01c0.gif)\n\n## 6. expo\n\n![expoInOut.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/8a754fa5-a730-4685-b089-44723d07079a.gif)\n\n## 7. quad\n\n![quadInOut.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/1719aa7c-f5cb-75ad-1083-eb4cdc1774d1.gif)\n\n## 8. quart\n\n![quartInOut.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/266d9533-02cd-f8cf-8410-a51cbbd4fe86.gif)\n\n## 9. quint\n\n![quintInOut.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/9fe83cf9-029a-e0b6-dc03-7ec714ab5046.gif)\n\n## 10. sine\n\n![sineInOut.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4be3b8b6-22b6-0887-73de-14d9506683c4.gif)\n\n# 結論\n\n## よく差がわかりません...\"(-\"\"-)\"ムムム。<br>(こだわらないならどれでもよい印象ｗ)\n\n\n## 検証コード\n\n```vue\n<script lang=\"ts\">\n\timport { backIn, backOut, backInOut, bounceIn, bounceOut, bounceInOut, circIn, circOut, circInOut, cubicIn, cubicOut, cubicInOut, elasticIn, elasticOut, elasticInOut, expoIn, expoOut, expoInOut, quadIn, quadOut, quadInOut, quartIn, quartOut, quartInOut, quintIn, quintOut, quintInOut, sineIn, sineOut, sineInOut } from 'svelte/easing';\n\timport { crossfade } from 'svelte/transition';\n\n    const title = 'backIn'\n\n\tconst [send, receive] = crossfade({\n\t\tduration: d => Math.sqrt(d * 200),\n\n\t\tfallback(node, params) {\n\t\t\tconst style = getComputedStyle(node);\n\t\t\tconst transform = style.transform === 'none' ? '' : style.transform;\n\n\t\t\treturn {\n\t\t\t\tduration: 1000,\n\t\t\t\teasing: quintOut,\n\t\t\t\tcss: t => `\n\t\t\t\t\ttransform: ${transform} scale(${t});\n\t\t\t\t\topacity: ${t}\n\t\t\t\t`\n\t\t\t};\n\t\t}\n\t});\n\n\tinterface Todo {\n\t\tid: number\n\t\tcontent: string\n\t}\n\n\tlet todos: Array<Todo> = [];\n\n\tconst click = () => {\n\t\ttodos.push({ id: 1, content: title })\n\t\ttodos = todos\n\t\tsetTimeout(() => {todos = []}, 2000)\n\t}\n<\/script>\n\n<button on:click={click}>実行</button>\n<div class='m-auto'>\n\t<div>\n\t\t{#each todos as todo (todo.id)}\n\t\t\t<p\n\t\t\t\tin:receive=\"{{key: todo.id}}\"\n\t\t\t\tout:send=\"{{key: todo.id}}\"\n\t\t\t>\n\t\t\t\t{todo.content}\n\t\t\t</p>\n\t\t{/each}\n\t</div>\n</div>\n\n<style>\n\t.m-auto {\n\t\tmargin: auto;\n\t}\n\n\tp {\n\t\tposition: relative;\n\t\tline-height: 1.2;\n\t\tpadding: 0.5em 2.5em 0.5em 2em;\n\t\tmargin: 0 0 0.5em 0;\n\t\tborder-radius: 2px;\n\t\tuser-select: none;\n\t\tborder: 1px solid hsl(240, 8%, 70%);\n\t\tbackground-color:hsl(240, 8%, 93%);\n\t\tcolor: #333;\n\t}\n</style>\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/0a7acc4d-d2e3-0f7d-48c8-07fb1410dacc.png)\n",coediting:!1,comments_count:0,created_at:"2022-12-03T22:12:09+09:00",group:null,id:"cdc38ef72a903251383e",likes_count:1,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Svelte",versions:[]},{name:"SvelteKit",versions:[]}],title:"SvelteKit svelte/easing関数すべて試してみた。",updated_at:"2022-12-06T09:07:00+09:00",url:"https://qiita.com/maaaashi/items/cdc38ef72a903251383e",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:675,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:112">Baas(Backend As A Service)で何かサービスを構築してみたいと思い、<br>\nfirebaseを触ってみようと思ったところ、Firebase の代替と謳われているsupabaseを発見。</p>\n<p data-sourcepos="6:1-7:63">簡単なTodoアプリを公式を参考に構築していた際、<br>\n作成日で検索できる機能を実装した時のメモ。</p>\n<p data-sourcepos="9:1-9:85">簡単なTodoアプリの構築に関してはこちらで解説しております。</p>\n<p data-sourcepos="11:1-11:55"><iframe id="qiita-embed-content__00b11d3a85f0777cac39add8000eb9b0" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__00b11d3a85f0777cac39add8000eb9b0" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2F8820a095a433d09f300d" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<p data-sourcepos="13:1-13:55"><iframe id="qiita-embed-content__7a4cbd850165ffa1fb4f77c0112e1acd" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__7a4cbd850165ffa1fb4f77c0112e1acd" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2Fd6e0237b700448cc1826" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<p data-sourcepos="15:1-15:55"><iframe id="qiita-embed-content__fc94e04004cf19cd24a2eaa12ea9d5d3" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__fc94e04004cf19cd24a2eaa12ea9d5d3" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2F2afe8df35e0a7adc7e00" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<p data-sourcepos="17:1-17:55"><iframe id="qiita-embed-content__c6079b14ff138bfd95d0e0fd0fcd3012" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__c6079b14ff138bfd95d0e0fd0fcd3012" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2Ffad493559bd5fad22f02" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<h1 data-sourcepos="20:1-20:17">\n<span id="使ったもの" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>使ったもの</h1>\n<ul data-sourcepos="22:1-31:0">\n<li data-sourcepos="22:1-26:0">\n<p data-sourcepos="22:3-22:28">Vite + Svelte + Typescript</p>\n<ul data-sourcepos="23:5-26:0">\n<li data-sourcepos="23:5-23:27">@supabase/supabase-js</li>\n<li data-sourcepos="24:5-24:18">tailwind css</li>\n<li data-sourcepos="25:5-26:0">date-picker-svelte</li>\n</ul>\n</li>\n<li data-sourcepos="27:1-31:0">\n<p data-sourcepos="27:3-27:10">supabase</p>\n<ul data-sourcepos="28:5-31:0">\n<li data-sourcepos="28:5-28:10">auth</li>\n<li data-sourcepos="29:5-29:8">db</li>\n<li data-sourcepos="30:5-31:0">realtime</li>\n</ul>\n</li>\n</ul>\n<h2 data-sourcepos="32:1-32:9">\n<span id="前提" class="fragment"></span><a href="#%E5%89%8D%E6%8F%90"><i class="fa fa-link"></i></a>前提</h2>\n<h3 data-sourcepos="34:1-34:22">\n<span id="テーブル概要" class="fragment"></span><a href="#%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>テーブル概要</h3>\n<table data-sourcepos="35:1-41:23">\n<thead>\n<tr data-sourcepos="35:1-35:12">\n<th data-sourcepos="35:2-35:7">項目</th>\n<th data-sourcepos="35:9-35:11">型</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos="37:1-37:9">\n<td data-sourcepos="37:2-37:3">id</td>\n<td data-sourcepos="37:5-37:8">uuid</td>\n</tr>\n<tr data-sourcepos="38:1-38:14">\n<td data-sourcepos="38:2-38:8">user_id</td>\n<td data-sourcepos="38:10-38:13">uuid</td>\n</tr>\n<tr data-sourcepos="39:1-39:14">\n<td data-sourcepos="39:2-39:8">content</td>\n<td data-sourcepos="39:10-39:13">text</td>\n</tr>\n<tr data-sourcepos="40:1-40:17">\n<td data-sourcepos="40:2-40:8">is_done</td>\n<td data-sourcepos="40:10-40:16">boolean</td>\n</tr>\n<tr data-sourcepos="41:1-41:23">\n<td data-sourcepos="41:2-41:11">created_at</td>\n<td data-sourcepos="41:13-41:22">timestampz</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos="43:1-43:49">created_atで検索をかける場合を考える</p>\n<h2 data-sourcepos="45:1-45:30">\n<span id="date-picker-svelteの導入" class="fragment"></span><a href="#date-picker-svelte%E3%81%AE%E5%B0%8E%E5%85%A5"><i class="fa fa-link"></i></a>date-picker-svelteの導入</h2>\n<div class="code-frame" data-lang="bash" data-sourcepos="47:1-49:3"><div class="highlight"><pre><code><span class="nv">$ </span>npm <span class="nb">install </span>date-picker-svelte\n</code></pre></div></div>\n<div class="code-frame" data-lang="vue" data-sourcepos="51:1-58:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">DateInput</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">date-picker-svelte</span><span class="dl">\'</span>\n  <span class="kd">let</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">()</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;DateInput</span> <span class="na">bind:value=</span><span class="s">{date}</span> <span class="nt">/&gt;</span>\n</code></pre></div></div>\n<h3 data-sourcepos="60:1-60:9">\n<span id="props" class="fragment"></span><a href="#props"><i class="fa fa-link"></i></a>Props</h3>\n<table data-sourcepos="61:1-73:198">\n<thead>\n<tr data-sourcepos="61:1-61:190">\n<th data-sourcepos="61:2-61:25">Prop</th>\n<th data-sourcepos="61:27-61:40">Type</th>\n<th data-sourcepos="61:42-61:92">default</th>\n<th data-sourcepos="61:94-61:189">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos="63:1-63:188">\n<td data-sourcepos="63:2-63:25">value</td>\n<td data-sourcepos="63:27-63:40">Date | null</td>\n<td data-sourcepos="63:42-63:92">null</td>\n<td data-sourcepos="63:94-63:187">value</td>\n</tr>\n<tr data-sourcepos="64:1-64:206">\n<td data-sourcepos="64:2-64:25">min</td>\n<td data-sourcepos="64:27-64:40">Date</td>\n<td data-sourcepos="64:42-64:99">2002-01-01でした。<br>10年前？</td>\n<td data-sourcepos="64:101-64:205">入力可能な範囲の最小値</td>\n</tr>\n<tr data-sourcepos="65:1-65:209">\n<td data-sourcepos="65:2-65:25">max</td>\n<td data-sourcepos="65:27-65:40">Date</td>\n<td data-sourcepos="65:42-65:102">2022-12-31でした。<br>今年の最後？</td>\n<td data-sourcepos="65:104-65:208">入力可能な範囲の最大値</td>\n</tr>\n<tr data-sourcepos="66:1-66:211">\n<td data-sourcepos="66:2-66:25">placeholder</td>\n<td data-sourcepos="66:27-66:40">string</td>\n<td data-sourcepos="66:42-66:105">2020-12-31 23:00:00でした。<br>これも今年の最後？</td>\n<td data-sourcepos="66:107-66:210">プレースホルダーの値</td>\n</tr>\n<tr data-sourcepos="67:1-67:223">\n<td data-sourcepos="67:2-67:25">valid</td>\n<td data-sourcepos="67:27-67:40">bool</td>\n<td data-sourcepos="67:42-67:94">不明</td>\n<td data-sourcepos="67:96-67:222">テキスト入力を受け付けるかどうか。<br>らしいですが、<strong>動きませんでした。</strong>\n</td>\n</tr>\n<tr data-sourcepos="68:1-68:192">\n<td data-sourcepos="68:2-68:25">format</td>\n<td data-sourcepos="68:27-68:40">string</td>\n<td data-sourcepos="68:42-68:94"><code>yyyy-MM-dd hh:mm:ss</code></td>\n<td data-sourcepos="68:96-68:191">"yyyy-MM-dd"など</td>\n</tr>\n<tr data-sourcepos="69:1-69:190">\n<td data-sourcepos="69:2-69:25">visible</td>\n<td data-sourcepos="69:27-69:40">string</td>\n<td data-sourcepos="69:42-69:92">false</td>\n<td data-sourcepos="69:94-69:189">"yyyy-MM-dd"など</td>\n</tr>\n<tr data-sourcepos="70:1-70:188">\n<td data-sourcepos="70:2-70:25">disabled</td>\n<td data-sourcepos="70:27-70:40">string</td>\n<td data-sourcepos="70:42-70:92">false</td>\n<td data-sourcepos="70:94-70:187">disabled</td>\n</tr>\n<tr data-sourcepos="71:1-71:210">\n<td data-sourcepos="71:2-71:25">closeOnSelection</td>\n<td data-sourcepos="71:27-71:40">bool</td>\n<td data-sourcepos="71:42-71:92"></td>\n<td data-sourcepos="71:94-71:209">日付が選択されたらカレンダーを閉じるかどうか</td>\n</tr>\n<tr data-sourcepos="72:1-72:217">\n<td data-sourcepos="72:2-72:25">browseWithoutSelecting</td>\n<td data-sourcepos="72:27-72:40">bool</td>\n<td data-sourcepos="72:42-72:104">よく分かりませんでしたｗ</td>\n<td data-sourcepos="72:106-72:216">よく分かりませんでした。。<br>(公式より)Wait with updating the date until a date is selected</td>\n</tr>\n<tr data-sourcepos="73:1-73:198">\n<td data-sourcepos="73:2-73:25">locale</td>\n<td data-sourcepos="73:27-73:40">Locale</td>\n<td data-sourcepos="73:42-73:92">-</td>\n<td data-sourcepos="73:94-73:197">ロケールオブジェクト</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos="75:1-75:98">localの説明等は<a href="https://date-picker-svelte.kasper.space/docs" rel="nofollow noopener" target="_blank">公式</a>が詳しいので割愛</p>\n<p data-sourcepos="77:1-78:81">今回はこんな感じで使用しました<br>\n日付ライブラリは<a href="https://date-fns.org/" rel="nofollow noopener" target="_blank">date-fns</a>を使用しました。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="80:1-96:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">DateInput</span><span class="p">,</span> <span class="nx">localeFromDateFnsLocale</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">date-picker-svelte</span><span class="dl">\'</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">ja</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">date-fns/locale</span><span class="dl">\'</span>\n\n  <span class="kd">const</span> <span class="nx">locale</span> <span class="o">=</span> <span class="nf">localeFromDateFnsLocale</span><span class="p">(</span><span class="nx">ja</span><span class="p">)</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;DateInput</span>\n  <span class="na">closeOnSelection=</span><span class="s">{true}</span>\n  <span class="na">browseWithoutSelecting=</span><span class="s">{true}</span>\n  <span class="na">format=</span><span class="s">"yyyy-MM-dd"</span>\n  <span class="err">{</span><span class="na">locale</span><span class="err">}</span>\n  <span class="na">placeholder=</span><span class="s">\'日付を選択\'</span>\n  <span class="na">bind:value=</span><span class="s">{date}</span><span class="nt">&gt;</span>\n<span class="nt">&lt;/DateInput&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="98:1-99:122">いい感じ👍<br>\n<a href="https://camo.qiitausercontent.com/3dd07aec8517adf901a9de718364bce656a371e2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f34363031393938642d346666622d646238302d383338352d6335393866613362643130622e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4601998d-4ffb-db80-8385-c598fa3bd10b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=47371d9efa27ce2b54dd36dc6dca571e" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4601998d-4ffb-db80-8385-c598fa3bd10b.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4601998d-4ffb-db80-8385-c598fa3bd10b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ffbd91a953698fc6e596ddf5f16466bd 1x" loading="lazy"></a></p>\n<h2 data-sourcepos="102:1-102:40">\n<span id="本題-supabaseで検索をかける" class="fragment"></span><a href="#%E6%9C%AC%E9%A1%8C-supabase%E3%81%A7%E6%A4%9C%E7%B4%A2%E3%82%92%E3%81%8B%E3%81%91%E3%82%8B"><i class="fa fa-link"></i></a>本題: supabaseで検索をかける</h2>\n<h3 data-sourcepos="104:1-104:35">\n<span id="結論-gt以上lt以下" class="fragment"></span><a href="#%E7%B5%90%E8%AB%96-gt%E4%BB%A5%E4%B8%8Alt%E4%BB%A5%E4%B8%8B"><i class="fa fa-link"></i></a>結論: <code>gt</code>以上<code>lt</code>以下。</h3>\n<p data-sourcepos="106:1-106:41">例) 2022/12/2で検索をしたい場合</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="108:1-136:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">DateInput</span><span class="p">,</span> <span class="nx">localeFromDateFnsLocale</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">date-picker-svelte</span><span class="dl">\'</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">ja</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">date-fns/locale</span><span class="dl">\'</span>\n\n  <span class="kd">const</span> <span class="nx">searchTodo</span> <span class="o">=</span> <span class="nf">async</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="kd">const</span> <span class="nx">start</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">2022-12-2 00:00:00</span><span class="dl">"</span>\n    <span class="kd">const</span> <span class="nx">end</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">2022-12-2 23:59:59</span><span class="dl">"</span>\n    <span class="kd">let</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">supabase</span>\n      <span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="dl">\'</span><span class="s1">tasks</span><span class="dl">\'</span><span class="p">)</span>\n      <span class="p">.</span><span class="nf">select</span><span class="p">()</span>\n      <span class="p">.</span><span class="nf">gt</span><span class="p">(</span><span class="nx">column</span><span class="p">,</span> <span class="nx">start</span><span class="p">)</span>\n      <span class="p">.</span><span class="nf">lt</span><span class="p">(</span><span class="nx">column</span><span class="p">,</span> <span class="nx">end</span><span class="p">)</span>\n      <span class="p">.</span><span class="nf">order</span><span class="p">(</span><span class="dl">\'</span><span class="s1">created_at</span><span class="dl">\'</span><span class="p">,</span> <span class="p">{</span> <span class="na">ascending</span><span class="p">:</span> <span class="nx">sort</span> <span class="p">})</span>\n    <span class="k">await</span> <span class="nx">query</span>\n  <span class="p">}</span>\n\n  <span class="kd">const</span> <span class="nx">locale</span> <span class="o">=</span> <span class="nf">localeFromDateFnsLocale</span><span class="p">(</span><span class="nx">ja</span><span class="p">);</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;DateInput</span>\n  <span class="na">closeOnSelection=</span><span class="s">{true}</span>\n  <span class="na">browseWithoutSelecting=</span><span class="s">{true}</span>\n  <span class="na">format=</span><span class="s">"yyyy-MM-dd"</span>\n  <span class="err">{</span><span class="na">locale</span><span class="err">}</span>\n  <span class="na">placeholder=</span><span class="s">\'日付を選択\'</span>\n  <span class="na">bind:value=</span><span class="s">{date}</span><span class="nt">&gt;</span>\n<span class="nt">&lt;/DateInput&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="138:1-139:78">startとendで範囲検索もそのままできる。<br>\n<code>.eq</code>とかを使うのかと思いましたが、これで行けました👍</p>\n',body:"# はじめに\n\nBaas(Backend As A Service)で何かサービスを構築してみたいと思い、\nfirebaseを触ってみようと思ったところ、Firebase の代替と謳われているsupabaseを発見。\n\n簡単なTodoアプリを公式を参考に構築していた際、\n作成日で検索できる機能を実装した時のメモ。\n\n簡単なTodoアプリの構築に関してはこちらで解説しております。\n\nhttps://qiita.com/doyaseizin/items/8820a095a433d09f300d\n\nhttps://qiita.com/doyaseizin/items/d6e0237b700448cc1826\n\nhttps://qiita.com/doyaseizin/items/2afe8df35e0a7adc7e00\n\nhttps://qiita.com/doyaseizin/items/fad493559bd5fad22f02\n\n\n# 使ったもの\n\n* Vite + Svelte + Typescript\n    * @supabase/supabase-js\n    * tailwind css\n    * date-picker-svelte\n\n* supabase\n    * auth\n    * db\n    * realtime\n\n## 前提\n\n### テーブル概要\n|項目|型|\n|----|----|\n|id|uuid|\n|user_id|uuid|\n|content|text|\n|is_done|boolean|\n|created_at|timestampz|\n\ncreated_atで検索をかける場合を考える\n\n## date-picker-svelteの導入\n\n```bash\n$ npm install date-picker-svelte\n```\n\n```vue\n<script>\n  import { DateInput } from 'date-picker-svelte'\n  let date = new Date()\n<\/script>\n\n<DateInput bind:value={date} />\n```\n\n### Props\n| Prop                   | Type         | default                                           | 説明                                                                                         |\n| ---------------------- | ------------ | ------------------------------------------------- | -------------------------------------------------------------------------------------------- |\n| value                  | Date \\| null | null                                              | value                                                                                        |\n| min                    | Date         | 2002-01-01でした。<br>10年前？                    | 入力可能な範囲の最小値                                                                       |\n| max                    | Date         | 2022-12-31でした。<br>今年の最後？                | 入力可能な範囲の最大値                                                                       |\n| placeholder            | string       | 2020-12-31 23:00:00でした。<br>これも今年の最後？ | プレースホルダーの値                                                                         |\n| valid                  | bool         | 不明                                              | テキスト入力を受け付けるかどうか。<br>らしいですが、**動きませんでした。**                   |\n| format                 | string       | `yyyy-MM-dd hh:mm:ss`                               | \"yyyy-MM-dd\"など                                                                             |\n| visible                | string       | false                                             | \"yyyy-MM-dd\"など                                                                             |\n| disabled               | string       | false                                             | disabled                                                                                     |\n| closeOnSelection       | bool         |                                                   | 日付が選択されたらカレンダーを閉じるかどうか                                                 |\n| browseWithoutSelecting | bool         | よく分かりませんでしたｗ                          | よく分かりませんでした。。<br>(公式より)Wait with updating the date until a date is selected |\n| locale                 | Locale       | -                                                 | ロケールオブジェクト                                                                         |\n\nlocalの説明等は[公式](https://date-picker-svelte.kasper.space/docs)が詳しいので割愛\n\n今回はこんな感じで使用しました\n日付ライブラリは[date-fns](https://date-fns.org/)を使用しました。\n\n```vue\n<script lang=\"ts\">\n  import { DateInput, localeFromDateFnsLocale } from 'date-picker-svelte'\n  import { ja } from 'date-fns/locale'\n\n  const locale = localeFromDateFnsLocale(ja)\n<\/script>\n\n<DateInput\n  closeOnSelection={true}\n  browseWithoutSelecting={true}\n  format=\"yyyy-MM-dd\"\n  {locale}\n  placeholder='日付を選択'\n  bind:value={date}>\n</DateInput>\n```\n\nいい感じ👍\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4601998d-4ffb-db80-8385-c598fa3bd10b.png)\n\n\n## 本題: supabaseで検索をかける\n\n### 結論: `gt`以上`lt`以下。\n\n例) 2022/12/2で検索をしたい場合\n\n```vue\n<script lang=\"ts\">\n  import { DateInput, localeFromDateFnsLocale } from 'date-picker-svelte'\n  import { ja } from 'date-fns/locale'\n\n  const searchTodo = async() => {\n    const start = \"2022-12-2 00:00:00\"\n    const end = \"2022-12-2 23:59:59\"\n    let query = supabase\n      .from('tasks')\n      .select()\n      .gt(column, start)\n      .lt(column, end)\n      .order('created_at', { ascending: sort })\n    await query\n  }\n\n  const locale = localeFromDateFnsLocale(ja);\n<\/script>\n\n<DateInput\n  closeOnSelection={true}\n  browseWithoutSelecting={true}\n  format=\"yyyy-MM-dd\"\n  {locale}\n  placeholder='日付を選択'\n  bind:value={date}>\n</DateInput>\n```\n\nstartとendで範囲検索もそのままできる。\n`.eq`とかを使うのかと思いましたが、これで行けました👍\n\n",coediting:!1,comments_count:0,created_at:"2022-12-02T14:00:37+09:00",group:null,id:"904b412a1b14b0d4dccc",likes_count:1,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"BaaS",versions:[]},{name:"Svelte",versions:[]},{name:"Supabase",versions:[]}],title:"date-picker-svelte と supabase-js で作成日で検索ができるように",updated_at:"2023-02-21T08:15:55+09:00",url:"https://qiita.com/maaaashi/items/904b412a1b14b0d4dccc",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:716,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:59">\n<span id="なぜコンポーネント化しようと思ったのか" class="fragment"></span><a href="#%E3%81%AA%E3%81%9C%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E5%8C%96%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%8B"><i class="fa fa-link"></i></a>なぜコンポーネント化しようと思ったのか</h1>\n<p data-sourcepos="3:1-5:28">同じデザインのボタンがサイト上にたくさん出てくるのにもかかわらず、<br>\nそれぞれのボタンに長いcssを割り当てていた。つまり冗長化しちゃってた、<br>\n(tailwindのあるある？)</p>\n<div class="code-frame" data-lang="html" data-sourcepos="7:1-19:3"><div class="highlight"><pre><code><span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"ml-1 shadow bg-yellow-500 hover:bg-yellow-400 focus:shadow-outline focus:outline-none text-white font-bold rounded"</span><span class="nt">&gt;</span>\n  ボタン①\n<span class="nt">&lt;/button&gt;</span>\n\n<span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"ml-1 shadow bg-yellow-500 hover:bg-yellow-400 focus:shadow-outline focus:outline-none text-white font-bold rounded"</span><span class="nt">&gt;</span>\n  ボタン②\n<span class="nt">&lt;/button&gt;</span>\n\n<span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"ml-1 shadow bg-yellow-500 hover:bg-yellow-400 focus:shadow-outline focus:outline-none text-white font-bold rounded"</span><span class="nt">&gt;</span>\n  ボタン③\n<span class="nt">&lt;/button&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="21:1-21:126">そのためにデザインを変えたいときに全てのボタンで変える必要があり、とても手間だった。</p>\n<h3 data-sourcepos="23:1-23:77">\n<span id="共通部品化したい--コンポーネント化してみよう" class="fragment"></span><a href="#%E5%85%B1%E9%80%9A%E9%83%A8%E5%93%81%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84--%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E5%8C%96%E3%81%97%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86"><i class="fa fa-link"></i></a>共通部品化したい！ =&gt; コンポーネント化してみよう！</h3>\n<h1 data-sourcepos="26:1-26:17">\n<span id="開発の流れ" class="fragment"></span><a href="#%E9%96%8B%E7%99%BA%E3%81%AE%E6%B5%81%E3%82%8C"><i class="fa fa-link"></i></a>開発の流れ</h1>\n<ol data-sourcepos="28:1-34:0">\n<li data-sourcepos="28:1-28:83">とりあえず一つのページの部品(コンポーネント)を洗い出す</li>\n<li data-sourcepos="29:1-29:45">それぞれのファイルを作成する</li>\n<li data-sourcepos="30:1-30:42">呼び出して使えるようにする</li>\n<li data-sourcepos="31:1-31:54">他のぺージでも使える部分へ適用する</li>\n<li data-sourcepos="32:1-32:65">他のページの部品(コンポーネント)を洗い出す</li>\n<li data-sourcepos="33:1-34:0">2へ戻る</li>\n</ol>\n<p data-sourcepos="35:1-35:80">(本来であれば画面設計の段階で考えるべきだったと後悔...)</p>\n<h1 data-sourcepos="38:1-38:35">\n<span id="実際に部品化してみる" class="fragment"></span><a href="#%E5%AE%9F%E9%9A%9B%E3%81%AB%E9%83%A8%E5%93%81%E5%8C%96%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>実際に部品化してみる！</h1>\n<h2 data-sourcepos="40:1-40:86">\n<span id="1-とりあえず一つのページの部品コンポーネントを洗い出す" class="fragment"></span><a href="#1-%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E4%B8%80%E3%81%A4%E3%81%AE%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E9%83%A8%E5%93%81%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E6%B4%97%E3%81%84%E5%87%BA%E3%81%99"><i class="fa fa-link"></i></a>1. とりあえず一つのページの部品(コンポーネント)を洗い出す</h2>\n<ul data-sourcepos="42:1-45:0">\n<li data-sourcepos="42:1-42:41">ログイン画面をよく見てみる</li>\n<li data-sourcepos="43:1-45:0">見えてきた！部品だ！<br>\n<a href="https://camo.qiitausercontent.com/04242257be1fdb39c027e98188038423c90c1b2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f64346330383261622d323765372d306135302d623266612d3839653061643934356266642e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fd4c082ab-27e7-0a50-b2fa-89e0ad945bfd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9c39ab6ed76105221a492a0b0d224749" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/d4c082ab-27e7-0a50-b2fa-89e0ad945bfd.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fd4c082ab-27e7-0a50-b2fa-89e0ad945bfd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c3838c4d5e00e2427a0cf19ccc6ecbd4 1x" loading="lazy"></a>\n</li>\n</ul>\n<p data-sourcepos="46:1-46:120">ということでメールアドレス用フォーム、パスワード用、Submit用ボタンを作成することに</p>\n<h2 data-sourcepos="48:1-48:48">\n<span id="2-それぞれのファイルを作成する" class="fragment"></span><a href="#2-%E3%81%9D%E3%82%8C%E3%81%9E%E3%82%8C%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>2. それぞれのファイルを作成する</h2>\n<div class="code-frame" data-lang="text" data-sourcepos="50:1-60:3"><div class="highlight"><pre><code>(いろいろ省略)\n- lib\n   |- Login.svelte\n   |- Parts\n        |- Buttons\n        |    |- Submit.svelte\n        |- Forms\n             |- Email.svelte\n             |- Password.svelte\n</code></pre></div></div>\n<h2 data-sourcepos="62:1-62:45">\n<span id="3-呼び出して使えるようにする" class="fragment"></span><a href="#3-%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E3%81%A6%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>3. 呼び出して使えるようにする</h2>\n<p data-sourcepos="64:1-65:99">ここで気が付く。<br>\nあれ、、ボタンデザインは使いまわしたいけど、テキストは毎回違うな...</p>\n<p data-sourcepos="67:1-67:111">ということでテキストやプレースホルダーは呼び出すときに渡して変数としよう！</p>\n<h3 data-sourcepos="69:1-69:22">\n<span id="submit用ボタン" class="fragment"></span><a href="#submit%E7%94%A8%E3%83%9C%E3%82%BF%E3%83%B3"><i class="fa fa-link"></i></a>Submit用ボタン</h3>\n<div class="code-frame" data-lang="vue" data-sourcepos="71:1-81:3"><div class="highlight"><pre><code>// Submit.svelte\n<span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">export</span> <span class="kd">let</span> <span class="nx">text</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">決定！</span><span class="dl">\'</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;button</span>\n  <span class="na">class=</span><span class="s">"w-full h-full shadow mx-auto bg-yellow-500 hover:bg-yellow-400 focus:shadow-outline focus:outline-none hover:border-yellow-400 text-white font-bold py-2 px-4 rounded"</span>\n  <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>{text}\n<span class="nt">&lt;/button&gt;</span>\n</code></pre></div></div>\n<div class="code-frame" data-lang="vue" data-sourcepos="83:1-90:3"><div class="highlight"><pre><code>// Login.svelte\n<span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="nx">SubmitButton</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">./Parts/Buttons/Submit.svelte</span><span class="dl">\'</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;SubmitButton</span> <span class="na">text=</span><span class="s">\'ログイン\'</span> <span class="nt">/&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="92:1-93:59"><code>export let</code>で定義することで親から渡された変数を受け取れるんですね～！<br>\n便利ですね！初期値は<code>決定！</code>にしました。</p>\n<h3 data-sourcepos="96:1-96:243">\n<span id="あれtypeも変数にすればわざわざtypeごとにコンポーネントを分ける必要もないんじゃないか-ダメでしたtypeは変数にしてはいけないそうです" class="fragment"></span><a href="#%E3%81%82%E3%82%8Ctype%E3%82%82%E5%A4%89%E6%95%B0%E3%81%AB%E3%81%99%E3%82%8C%E3%81%B0%E3%82%8F%E3%81%96%E3%82%8F%E3%81%96type%E3%81%94%E3%81%A8%E3%81%AB%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E5%88%86%E3%81%91%E3%82%8B%E5%BF%85%E8%A6%81%E3%82%82%E3%81%AA%E3%81%84%E3%82%93%E3%81%98%E3%82%83%E3%81%AA%E3%81%84%E3%81%8B-%E3%83%80%E3%83%A1%E3%81%A7%E3%81%97%E3%81%9Ftype%E3%81%AF%E5%A4%89%E6%95%B0%E3%81%AB%E3%81%97%E3%81%A6%E3%81%AF%E3%81%84%E3%81%91%E3%81%AA%E3%81%84%E3%81%9D%E3%81%86%E3%81%A7%E3%81%99"><i class="fa fa-link"></i></a>あれ？<br>typeも変数にすればわざわざtypeごとにコンポーネントを分ける必要もないんじゃないか？<br><br>⇒ <font color="red">ダメでした。</font>typeは変数にしてはいけないそうです。</h3>\n<hr data-sourcepos="98:1-99:0">\n<h3 data-sourcepos="100:1-100:13">\n<span id="emailform" class="fragment"></span><a href="#emailform"><i class="fa fa-link"></i></a>EmailForm</h3>\n<p data-sourcepos="102:1-103:127">emailのフォームは変数を渡すだけではなく、入力された値を親コンポーネントに渡す必要もあるので、<code>dispatch</code>を使って実現！<br>\nプレースホルダーも場合によっては親コンポーネントから受け取ってもいいかもしれません👍</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="105:1-124:3"><div class="highlight"><pre><code>// Email.svelte\n<span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">createEventDispatcher</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">svelte</span><span class="dl">\'</span><span class="p">;</span>\n  <span class="k">export</span> <span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="dl">\'\'</span><span class="p">;</span>\n\n  <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nf">createEventDispatcher</span><span class="p">();</span>\n  <span class="nl">$</span><span class="p">:</span> <span class="nf">dispatch</span><span class="p">(</span><span class="dl">\'</span><span class="s1">updateChild</span><span class="dl">\'</span><span class="p">,</span> <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="nx">value</span> <span class="p">});</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;input</span>\n  <span class="na">class=</span><span class="s">"bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500"</span>\n  <span class="na">id=</span><span class="s">"inline-full-name"</span>\n  <span class="na">placeholder=</span><span class="s">"emailを入力..."</span>\n  <span class="na">name=</span><span class="s">\'email\'</span>\n  <span class="na">type=</span><span class="s">\'email\'</span>\n  <span class="na">required</span>\n  <span class="na">bind:value=</span><span class="s">"{value}"</span>\n<span class="nt">/&gt;</span>\n</code></pre></div></div>\n<div class="code-frame" data-lang="vue" data-sourcepos="126:1-140:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="nx">EmailForm</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../Parts/EmailForm.svelte</span><span class="dl">"</span>\n  <span class="kd">let</span> <span class="nx">email</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="dl">\'\'</span><span class="p">;</span>\n\n  <span class="kd">const</span> <span class="nx">updateValue</span> <span class="o">=</span> <span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="nx">key</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">detail</span><span class="p">.</span><span class="nx">value</span>\n  <span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;EmailForm</span>\n  <span class="na">value=</span><span class="s">{email}</span>\n  <span class="na">on:updateChild=</span><span class="s">{(event)</span> <span class="err">=</span><span class="nt">&gt;</span> {updateValue(email, event.detail.value)}}\n/&gt;\n</code></pre></div></div>\n<p data-sourcepos="142:1-142:92">passwordのフォームも同じように<code>type=password</code>で同じように作りました！</p>\n<h2 data-sourcepos="145:1-145:57">\n<span id="4-他のぺージでも使える部分へ適用する" class="fragment"></span><a href="#4-%E4%BB%96%E3%81%AE%E3%81%BA%E3%83%BC%E3%82%B8%E3%81%A7%E3%82%82%E4%BD%BF%E3%81%88%E3%82%8B%E9%83%A8%E5%88%86%E3%81%B8%E9%81%A9%E7%94%A8%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>4. 他のぺージでも使える部分へ適用する</h2>\n<p data-sourcepos="147:1-147:102">パスワードを忘れた場合のメール送信画面の部品も洗い出したところ、、、</p>\n<p data-sourcepos="149:1-149:122"><a href="https://camo.qiitausercontent.com/1630b591d95ef96e6a5c7ff2b710522abf6a9594/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f38623961336230612d653838322d663062312d333733362d3235343334623134356138372e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F8b9a3b0a-e882-f0b1-3736-25434b145a87.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=015e48c87c00882ca275a51883f57554" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/8b9a3b0a-e882-f0b1-3736-25434b145a87.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F8b9a3b0a-e882-f0b1-3736-25434b145a87.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a119bd6e79b489ddcce2761058564861 1x" loading="lazy"></a></p>\n<p data-sourcepos="151:1-152:39">先ほど作ったやつそのまま適用できるじやないか！<br>\nコードが半分になりました！</p>\n<p data-sourcepos="155:1-155:72">こんな感じでコンポーネント化をしたお話しでした。</p>\n',body:'# なぜコンポーネント化しようと思ったのか\n\n同じデザインのボタンがサイト上にたくさん出てくるのにもかかわらず、\nそれぞれのボタンに長いcssを割り当てていた。つまり冗長化しちゃってた、\n(tailwindのあるある？)\n\n```html\n<button class="ml-1 shadow bg-yellow-500 hover:bg-yellow-400 focus:shadow-outline focus:outline-none text-white font-bold rounded">\n  ボタン①\n</button>\n\n<button class="ml-1 shadow bg-yellow-500 hover:bg-yellow-400 focus:shadow-outline focus:outline-none text-white font-bold rounded">\n  ボタン②\n</button>\n\n<button class="ml-1 shadow bg-yellow-500 hover:bg-yellow-400 focus:shadow-outline focus:outline-none text-white font-bold rounded">\n  ボタン③\n</button>\n```\n\nそのためにデザインを変えたいときに全てのボタンで変える必要があり、とても手間だった。\n\n### 共通部品化したい！ => コンポーネント化してみよう！\n\n\n# 開発の流れ\n\n1. とりあえず一つのページの部品(コンポーネント)を洗い出す\n1. それぞれのファイルを作成する\n1. 呼び出して使えるようにする\n1. 他のぺージでも使える部分へ適用する\n1. 他のページの部品(コンポーネント)を洗い出す\n1. 2へ戻る\n\n(本来であれば画面設計の段階で考えるべきだったと後悔...)\n\n\n# 実際に部品化してみる！\n\n## 1. とりあえず一つのページの部品(コンポーネント)を洗い出す\n\n* ログイン画面をよく見てみる\n* 見えてきた！部品だ！\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/d4c082ab-27e7-0a50-b2fa-89e0ad945bfd.png)\n\nということでメールアドレス用フォーム、パスワード用、Submit用ボタンを作成することに\n\n## 2. それぞれのファイルを作成する\n\n```\n(いろいろ省略)\n- lib\n   |- Login.svelte\n   |- Parts\n        |- Buttons\n        |    |- Submit.svelte\n        |- Forms\n             |- Email.svelte\n             |- Password.svelte\n```\n\n## 3. 呼び出して使えるようにする\n\nここで気が付く。\nあれ、、ボタンデザインは使いまわしたいけど、テキストは毎回違うな...\n\nということでテキストやプレースホルダーは呼び出すときに渡して変数としよう！\n\n### Submit用ボタン\n\n```vue\n// Submit.svelte\n<script lang="ts">\n  export let text: string = \'決定！\';\n<\/script>\n\n<button\n  class="w-full h-full shadow mx-auto bg-yellow-500 hover:bg-yellow-400 focus:shadow-outline focus:outline-none hover:border-yellow-400 text-white font-bold py-2 px-4 rounded"\n  type="submit">{text}\n</button>\n```\n\n```vue\n// Login.svelte\n<script lang="ts">\n  import SubmitButton from \'./Parts/Buttons/Submit.svelte\'\n<\/script>\n\n<SubmitButton text=\'ログイン\' />\n```\n\n`export let`で定義することで親から渡された変数を受け取れるんですね～！\n便利ですね！初期値は`決定！`にしました。\n\n\n### あれ？<br>typeも変数にすればわざわざtypeごとにコンポーネントを分ける必要もないんじゃないか？<br><br>⇒ <font color="red">ダメでした。</font>typeは変数にしてはいけないそうです。\n\n---\n\n### EmailForm\n\nemailのフォームは変数を渡すだけではなく、入力された値を親コンポーネントに渡す必要もあるので、`dispatch`を使って実現！\nプレースホルダーも場合によっては親コンポーネントから受け取ってもいいかもしれません👍\n\n```vue\n// Email.svelte\n<script lang="ts">\n  import { createEventDispatcher } from \'svelte\';\n  export let value = \'\';\n\n  const dispatch = createEventDispatcher();\n  $: dispatch(\'updateChild\', { value: value });\n<\/script>\n\n<input\n  class="bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500"\n  id="inline-full-name"\n  placeholder="emailを入力..."\n  name=\'email\'\n  type=\'email\'\n  required\n  bind:value="{value}"\n/>\n```\n\n```vue\n<script lang="ts">\n  import EmailForm from "../Parts/EmailForm.svelte"\n  let email: string = \'\';\n\n  const updateValue = (key, value) => {\n    key = event.detail.value\n  }\n<\/script>\n\n<EmailForm\n  value={email}\n  on:updateChild={(event) => {updateValue(email, event.detail.value)}}\n/>\n```\n\npasswordのフォームも同じように`type=password`で同じように作りました！\n\n\n## 4. 他のぺージでも使える部分へ適用する\n\nパスワードを忘れた場合のメール送信画面の部品も洗い出したところ、、、\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/8b9a3b0a-e882-f0b1-3736-25434b145a87.png)\n\n先ほど作ったやつそのまま適用できるじやないか！\nコードが半分になりました！\n\n\nこんな感じでコンポーネント化をしたお話しでした。\n',coediting:!1,comments_count:0,created_at:"2022-12-01T15:30:18+09:00",group:null,id:"4f55cea627e66e70d73d",likes_count:2,private:!1,reactions_count:0,stocks_count:2,tags:[{name:"JavaScript",versions:[]},{name:"Svelte",versions:[]}],title:"フロントエンド開発: Webアプリケーションをコンポーネント化した話 - with Svelte",updated_at:"2022-12-06T19:35:11+09:00",url:"https://qiita.com/maaaashi/items/4f55cea627e66e70d73d",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:631,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:123">svelteJSを使ってアプリケーションを構築しており、<br>\nroutingの実装を<a href="https://github.com/EmilTholin/svelte-routing" rel="nofollow noopener" target="_blank">svelte-routing</a>で実装したのでその時のメモ。</p>\n<h1 data-sourcepos="6:1-6:17">\n<span id="使ったもの" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>使ったもの</h1>\n<ul data-sourcepos="8:1-10:0">\n<li data-sourcepos="8:1-10:0">Vite + Svelte + Typescript\n<ul data-sourcepos="9:5-10:0">\n<li data-sourcepos="9:5-10:0">svelte-routing</li>\n</ul>\n</li>\n</ul>\n<h2 data-sourcepos="11:1-11:9">\n<span id="前提" class="fragment"></span><a href="#%E5%89%8D%E6%8F%90"><i class="fa fa-link"></i></a>前提</h2>\n<p data-sourcepos="12:1-12:56">Dockerベースイメージ<code>node:18-alpine3.15</code>で構築</p>\n<h2 data-sourcepos="14:1-14:9">\n<span id="導入" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5"><i class="fa fa-link"></i></a>導入</h2>\n<ol data-sourcepos="15:1-60:0">\n<li data-sourcepos="15:1-25:0">\n<p data-sourcepos="15:4-15:28">Vite + Svelte環境構築</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="17:5-24:7"><div class="highlight"><pre><code><span class="nv">$ </span>npm init vite@latest\n✔ Project name: … &lt;任意の名前&gt;\n✔ Select a framework: › Svelte\n✔ Select a variant: › TypeScript\n\n<span class="nv">$ </span>npm <span class="nb">install</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="26:1-42:0">\n<p data-sourcepos="26:4-26:26">vite.config.tsを修正</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="28:5-41:7"><div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">defineConfig</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">vite</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">svelte</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@sveltejs/vite-plugin-svelte</span><span class="dl">\'</span>\n\n<span class="c1">// https://vitejs.dev/config/</span>\n<span class="k">export</span> <span class="k">default</span> <span class="nf">defineConfig</span><span class="p">({</span>\n  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nf">svelte</span><span class="p">()],</span>\n  <span class="na">server</span><span class="p">:</span> <span class="p">{</span>       <span class="c1">// 追加</span>\n    <span class="na">host</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// 追加</span>\n    <span class="na">port</span><span class="p">:</span> <span class="mi">8080</span>    <span class="c1">// 追加</span>\n  <span class="p">}</span>               <span class="c1">// 追加</span>\n<span class="p">})</span>\n\n</code></pre></div></div>\n</li>\n<li data-sourcepos="43:1-54:0">\n<p data-sourcepos="43:4-43:21">サーバー起動</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="45:5-47:7"><div class="highlight"><pre><code><span class="nv">$ </span>npm run dev\n</code></pre></div></div>\n<p data-sourcepos="49:5-49:79">これで<a href="http://localhost:8080" rel="nofollow noopener" target="_blank">localhost:8080</a>で環境が開けるはず</p>\n<p data-sourcepos="51:5-51:126"><a href="https://camo.qiitausercontent.com/a8846ff5f06a716a7b93b95b7f9c27fad977f03e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f35353661373961362d356136632d343935332d383661612d3665306366363237326464622e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F556a79a6-5a6c-4953-86aa-6e0cf6272ddb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0af4142089a7e5384da24f6770e816e5" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/556a79a6-5a6c-4953-86aa-6e0cf6272ddb.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F556a79a6-5a6c-4953-86aa-6e0cf6272ddb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f3f7a6a16698dd0245f6e9611eb217c3 1x" loading="lazy"></a></p>\n<p data-sourcepos="53:5-53:19">こんな画面</p>\n</li>\n<li data-sourcepos="55:1-60:0">\n<p data-sourcepos="55:4-55:38">svelte-routingのインストール</p>\n<div class="code-frame" data-lang="bash" data-sourcepos="57:5-59:7"><div class="highlight"><pre><code><span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">--save</span> svelte-routing\n</code></pre></div></div>\n</li>\n</ol>\n<h1 data-sourcepos="61:1-61:28">\n<span id="svelte-routingの使い方" class="fragment"></span><a href="#svelte-routing%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>svelte-routingの使い方</h1>\n<div class="code-frame" data-lang="vue" data-sourcepos="63:1-78:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">Router</span><span class="p">,</span> <span class="nx">Link</span><span class="p">,</span> <span class="nx">Route</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">svelte-routing</span><span class="dl">"</span><span class="p">;</span>  <span class="c1">// svelte-routingの読み込み</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;Router&gt;</span>\n  <span class="nt">&lt;nav&gt;</span>\n    <span class="nt">&lt;Link</span> <span class="na">to=</span><span class="s">"home"</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/Link&gt;</span>\n    <span class="nt">&lt;Link</span> <span class="na">to=</span><span class="s">"about"</span><span class="nt">&gt;</span>About<span class="nt">&lt;/Link&gt;</span>\n  <span class="nt">&lt;/nav&gt;</span>\n  <span class="nt">&lt;div&gt;</span>\n    <span class="nt">&lt;Route</span> <span class="na">path=</span><span class="s">"home"</span><span class="nt">&gt;&lt;Home</span> <span class="nt">/&gt;&lt;/Route&gt;</span>\n    <span class="nt">&lt;Route</span> <span class="na">path=</span><span class="s">"blog"</span> <span class="na">component=</span><span class="s">"{Blog}"</span> <span class="nt">/&gt;</span>\n  <span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/Router&gt;</span>\n</code></pre></div></div>\n<ul data-sourcepos="80:1-81:0">\n<li data-sourcepos="80:1-81:0">\n<code>Router</code>コンポーネントの中で<code>Link</code>や<code>Route</code>を書いていきます。</li>\n</ul>\n<h2 data-sourcepos="82:1-82:7">\n<span id="link" class="fragment"></span><a href="#link"><i class="fa fa-link"></i></a>Link</h2>\n<ul data-sourcepos="84:1-89:0">\n<li data-sourcepos="84:1-84:57">イメージとしては<code>&lt;a href=""&gt;</code>みたいな感じ</li>\n<li data-sourcepos="85:1-85:64">クリック後、to=""で指定した先に遷移します。</li>\n<li data-sourcepos="86:1-86:151">基本的に<code>to="about"</code>と書くと現在のパスに追加でパスが増えていく。(同じRouterコンポーネント内では置き換わる)</li>\n<li data-sourcepos="87:1-87:74">\n<code>to="/page/about"</code>のように絶対パスで指定することも可能</li>\n<li data-sourcepos="88:1-89:0">また、<code>to="../about"</code>のように相対パスでもかける</li>\n</ul>\n<div class="code-frame" data-lang="vue" data-sourcepos="90:1-101:3"><div class="highlight"><pre><code>// http://localhost/home\n\n<span class="nt">&lt;Link</span> <span class="na">to=</span><span class="s">"about"</span><span class="nt">&gt;</span>About<span class="nt">&lt;/Link&gt;</span>\n// ⇒ http://localhost/home/about\n\n<span class="nt">&lt;Link</span> <span class="na">to=</span><span class="s">"/about"</span><span class="nt">&gt;</span>About<span class="nt">&lt;/Link&gt;</span>\n// ⇒ http://localhost/about\n\n<span class="nt">&lt;Link</span> <span class="na">to=</span><span class="s">"../about"</span><span class="nt">&gt;</span>About<span class="nt">&lt;/Link&gt;</span>\n// ⇒ http://localhost/about\n</code></pre></div></div>\n<h2 data-sourcepos="102:1-102:8">\n<span id="route" class="fragment"></span><a href="#route"><i class="fa fa-link"></i></a>Route</h2>\n<ul data-sourcepos="104:1-106:0">\n<li data-sourcepos="104:1-104:59">該当パスの時の表示コンポーネントを指定</li>\n<li data-sourcepos="105:1-106:0">コンポーネントが指定されていないときは子の要素がレンダリングされる</li>\n</ul>\n<div class="code-frame" data-lang="vue" data-sourcepos="107:1-120:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="nx">About</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./About.svelte</span><span class="dl">"</span><span class="p">;</span>\n  <span class="k">import</span> <span class="nx">Blog</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./Blog.svelte</span><span class="dl">"</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;Route</span> <span class="na">path=</span><span class="s">"about"</span> <span class="na">component=</span><span class="s">"{About}"</span> <span class="nt">/&gt;</span>\n<span class="nt">&lt;Route</span> <span class="na">path=</span><span class="s">"blog"</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;Blog</span> <span class="nt">/&gt;</span>\n<span class="nt">&lt;/Route&gt;</span>\n<span class="nt">&lt;Route</span> <span class="na">path=</span><span class="s">"/"</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;h3&gt;</span>メニューを選択してください。<span class="nt">&lt;/h3&gt;</span>\n<span class="nt">&lt;/Route&gt;</span>\n</code></pre></div></div>\n<h2 data-sourcepos="122:1-122:12">\n<span id="その他" class="fragment"></span><a href="#%E3%81%9D%E3%81%AE%E4%BB%96"><i class="fa fa-link"></i></a>その他</h2>\n<p data-sourcepos="124:1-124:106"><code>navigate</code>なども用意されており、ログイン後の遷移なども行えて便利そうです。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="126:1-136:3"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">navigate</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">svelte-routing</span><span class="dl">"</span><span class="p">;</span>\n\n  <span class="kd">function</span> <span class="nf">onSubmit</span><span class="p">()</span> <span class="p">{</span>\n    <span class="nf">login</span><span class="p">().</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n      <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/success</span><span class="dl">"</span><span class="p">);</span>\n    <span class="p">});</span>\n  <span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos="138:1-138:108">それぞれいろいろな<code>Properties</code>が用意されているのでいろいろ使ってみたいです。</p>\n',body:'# はじめに\n\nsvelteJSを使ってアプリケーションを構築しており、\nroutingの実装を[svelte-routing](https://github.com/EmilTholin/svelte-routing)で実装したのでその時のメモ。\n\n# 使ったもの\n\n* Vite + Svelte + Typescript\n    * svelte-routing\n\n## 前提\nDockerベースイメージ`node:18-alpine3.15`で構築\n\n## 導入\n1. Vite + Svelte環境構築\n    \n    ```bash\n    $ npm init vite@latest\n    ✔ Project name: … <任意の名前>\n    ✔ Select a framework: › Svelte\n    ✔ Select a variant: › TypeScript\n    \n    $ npm install\n    ```\n\n1. vite.config.tsを修正\n    \n    ```typescript\n    import { defineConfig } from \'vite\'\n    import { svelte } from \'@sveltejs/vite-plugin-svelte\'\n    \n    // https://vitejs.dev/config/\n    export default defineConfig({\n      plugins: [svelte()],\n      server: {       // 追加\n        host: true,   // 追加\n        port: 8080    // 追加\n      }               // 追加\n    })\n    \n    ```\n\n1. サーバー起動\n\n    ```bash\n    $ npm run dev\n    ```\n\n    これで[localhost:8080](http://localhost:8080)で環境が開けるはず\n\n    ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/556a79a6-5a6c-4953-86aa-6e0cf6272ddb.png)\n\n    こんな画面\n\n1. svelte-routingのインストール\n\n    ```bash\n    $ npm install --save svelte-routing\n    ```\n\n# svelte-routingの使い方\n\n```vue\n<script lang="ts">\n  import { Router, Link, Route } from "svelte-routing";  // svelte-routingの読み込み\n<\/script>\n\n<Router>\n  <nav>\n    <Link to="home">Home</Link>\n    <Link to="about">About</Link>\n  </nav>\n  <div>\n    <Route path="home"><Home /></Route>\n    <Route path="blog" component="{Blog}" />\n  </div>\n</Router>\n```\n\n* `Router`コンポーネントの中で`Link`や`Route`を書いていきます。\n\n## Link\n\n* イメージとしては`<a href="">`みたいな感じ\n* クリック後、to=""で指定した先に遷移します。\n* 基本的に`to="about"`と書くと現在のパスに追加でパスが増えていく。(同じRouterコンポーネント内では置き換わる)\n* `to="/page/about"`のように絶対パスで指定することも可能\n* また、`to="../about"`のように相対パスでもかける\n\n```vue\n// http://localhost/home\n\n<Link to="about">About</Link>\n// ⇒ http://localhost/home/about\n\n<Link to="/about">About</Link>\n// ⇒ http://localhost/about\n\n<Link to="../about">About</Link>\n// ⇒ http://localhost/about\n```\n## Route\n\n* 該当パスの時の表示コンポーネントを指定\n* コンポーネントが指定されていないときは子の要素がレンダリングされる\n\n```vue\n<script lang="ts">\n  import About from "./About.svelte";\n  import Blog from "./Blog.svelte";\n<\/script>\n\n<Route path="about" component="{About}" />\n<Route path="blog">\n  <Blog />\n</Route>\n<Route path="/">\n  <h3>メニューを選択してください。</h3>\n</Route>\n```\n\n## その他\n\n`navigate`なども用意されており、ログイン後の遷移なども行えて便利そうです。\n\n```vue\n<script>\n  import { navigate } from "svelte-routing";\n\n  function onSubmit() {\n    login().then(() => {\n      navigate("/success");\n    });\n  }\n<\/script>\n```\n\nそれぞれいろいろな`Properties`が用意されているのでいろいろ使ってみたいです。\n',coediting:!1,comments_count:0,created_at:"2022-11-30T22:27:11+09:00",group:null,id:"ea18187481bb3122294d",likes_count:1,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"Svelte",versions:[]}],title:"Svelte + Vite環境で、svelte-routingを使い、パスルーティングを実装する",updated_at:"2022-11-30T22:38:14+09:00",url:"https://qiita.com/maaaashi/items/ea18187481bb3122294d",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:903,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:112">Baas(Backend As A Service)で何かサービスを構築してみたいと思い、<br>\nfirebaseを触ってみようと思ったところ、Firebase の代替と謳われているsupabaseを発見。</p>\n<p data-sourcepos="6:1-7:87">簡単なTodoアプリを公式を参考に構築していた際、<br>\n条件によってネストしたテーブルでソートを実装した時のメモ。</p>\n<p data-sourcepos="10:1-10:85">簡単なTodoアプリの構築に関してはこちらで解説しております。</p>\n<p data-sourcepos="12:1-12:55"><iframe id="qiita-embed-content__4c91584cf5f815881517b2af557aa3d1" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__4c91584cf5f815881517b2af557aa3d1" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2F8820a095a433d09f300d" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<p data-sourcepos="14:1-14:55"><iframe id="qiita-embed-content__4f417676e6aae4af96cfc619d4c7bf2a" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__4f417676e6aae4af96cfc619d4c7bf2a" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2Fd6e0237b700448cc1826" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<p data-sourcepos="16:1-16:55"><iframe id="qiita-embed-content__c94395659f3bd918059d3e150e7178c9" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__c94395659f3bd918059d3e150e7178c9" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2F2afe8df35e0a7adc7e00" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<p data-sourcepos="18:1-18:55"><iframe id="qiita-embed-content__4aeac6608745118181b3f3fa9c02e046" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__4aeac6608745118181b3f3fa9c02e046" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2Ffad493559bd5fad22f02" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<h1 data-sourcepos="21:1-21:17">\n<span id="使ったもの" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>使ったもの</h1>\n<ul data-sourcepos="23:1-31:0">\n<li data-sourcepos="23:1-26:0">\n<p data-sourcepos="23:3-23:28">Vite + Svelte + Typescript</p>\n<ul data-sourcepos="24:5-26:0">\n<li data-sourcepos="24:5-24:27">@supabase/supabase-js</li>\n<li data-sourcepos="25:5-26:0">tailwind css</li>\n</ul>\n</li>\n<li data-sourcepos="27:1-31:0">\n<p data-sourcepos="27:3-27:10">supabase</p>\n<ul data-sourcepos="28:5-31:0">\n<li data-sourcepos="28:5-28:10">auth</li>\n<li data-sourcepos="29:5-29:8">db</li>\n<li data-sourcepos="30:5-31:0">realtime</li>\n</ul>\n</li>\n</ul>\n<h2 data-sourcepos="32:1-32:9">\n<span id="前提" class="fragment"></span><a href="#%E5%89%8D%E6%8F%90"><i class="fa fa-link"></i></a>前提</h2>\n<p data-sourcepos="34:1-34:62">次のような1:多のテーブルがあったとします。</p>\n<h4 data-sourcepos="36:1-36:23">\n<span id="authorテーブル" class="fragment"></span><a href="#author%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB"><i class="fa fa-link"></i></a>authorテーブル</h4>\n<table data-sourcepos="37:1-40:11">\n<thead>\n<tr data-sourcepos="37:1-37:12">\n<th data-sourcepos="37:2-37:7">項目</th>\n<th data-sourcepos="37:9-37:11">型</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos="39:1-39:9">\n<td data-sourcepos="39:2-39:3">id</td>\n<td data-sourcepos="39:5-39:8">uuid</td>\n</tr>\n<tr data-sourcepos="40:1-40:11">\n<td data-sourcepos="40:2-40:5">name</td>\n<td data-sourcepos="40:7-40:10">text</td>\n</tr>\n</tbody>\n</table>\n<h4 data-sourcepos="42:1-42:21">\n<span id="bookテーブル" class="fragment"></span><a href="#book%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB"><i class="fa fa-link"></i></a>bookテーブル</h4>\n<table data-sourcepos="43:1-48:17">\n<thead>\n<tr data-sourcepos="43:1-43:12">\n<th data-sourcepos="43:2-43:7">項目</th>\n<th data-sourcepos="43:9-43:11">型</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos="45:1-45:9">\n<td data-sourcepos="45:2-45:3">id</td>\n<td data-sourcepos="45:5-45:8">uuid</td>\n</tr>\n<tr data-sourcepos="46:1-46:16">\n<td data-sourcepos="46:2-46:10">author_id</td>\n<td data-sourcepos="46:12-46:15">uuid</td>\n</tr>\n<tr data-sourcepos="47:1-47:11">\n<td data-sourcepos="47:2-47:5">name</td>\n<td data-sourcepos="47:7-47:10">text</td>\n</tr>\n<tr data-sourcepos="48:1-48:17">\n<td data-sourcepos="48:2-48:11">publish_at</td>\n<td data-sourcepos="48:13-48:16">date</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos="50:1-50:75"><code>book</code>の<code>publish_at</code>順でソートしたいときの処理を考える。</p>\n<h2 data-sourcepos="52:1-52:9">\n<span id="実装" class="fragment"></span><a href="#%E5%AE%9F%E8%A3%85"><i class="fa fa-link"></i></a>実装</h2>\n<div class="code-frame" data-lang="javascript" data-sourcepos="54:1-59:3"><div class="highlight"><pre><code>  <span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">supabase</span>\n    <span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="dl">\'</span><span class="s1">author</span><span class="dl">\'</span><span class="p">)</span>\n    <span class="p">.</span><span class="nf">select</span><span class="p">(</span><span class="dl">\'</span><span class="s1">*, books(*)</span><span class="dl">\'</span><span class="p">)</span>\n    <span class="p">.</span><span class="nf">order</span><span class="p">(</span><span class="dl">\'</span><span class="s1">publish_at</span><span class="dl">\'</span><span class="p">,</span> <span class="p">{</span> <span class="na">foreignTable</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">books</span><span class="dl">\'</span><span class="p">,</span> <span class="na">ascending</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span>\n</code></pre></div></div>\n<p data-sourcepos="61:1-61:53"><code>ascending</code>で昇順降順を切り替えられる。</p>\n',body:"# はじめに\n\nBaas(Backend As A Service)で何かサービスを構築してみたいと思い、\nfirebaseを触ってみようと思ったところ、Firebase の代替と謳われているsupabaseを発見。\n\n簡単なTodoアプリを公式を参考に構築していた際、\n条件によってネストしたテーブルでソートを実装した時のメモ。\n\n\n簡単なTodoアプリの構築に関してはこちらで解説しております。\n\nhttps://qiita.com/doyaseizin/items/8820a095a433d09f300d\n\nhttps://qiita.com/doyaseizin/items/d6e0237b700448cc1826\n\nhttps://qiita.com/doyaseizin/items/2afe8df35e0a7adc7e00\n\nhttps://qiita.com/doyaseizin/items/fad493559bd5fad22f02\n\n\n# 使ったもの\n\n* Vite + Svelte + Typescript\n    * @supabase/supabase-js\n    * tailwind css\n\n* supabase\n    * auth\n    * db\n    * realtime\n\n## 前提\n\n次のような1:多のテーブルがあったとします。\n\n#### authorテーブル\n|項目|型|\n|----|----|\n|id|uuid|\n|name|text|\n\n#### bookテーブル\n|項目|型|\n|----|----|\n|id|uuid|\n|author_id|uuid|\n|name|text|\n|publish_at|date|\n\n`book`の`publish_at`順でソートしたいときの処理を考える。\n\n## 実装\n\n```javascript\n  const { data, error } = await supabase\n    .from('author')\n    .select('*, books(*)')\n    .order('publish_at', { foreignTable: 'books', ascending: true })\n```\n\n`ascending`で昇順降順を切り替えられる。\n\n",coediting:!1,comments_count:0,created_at:"2022-11-29T16:06:48+09:00",group:null,id:"edc1935b387566c576dd",likes_count:2,private:!1,reactions_count:0,stocks_count:1,tags:[{name:"JavaScript",versions:[]},{name:"BaaS",versions:[]},{name:"Svelte",versions:[]},{name:"Supabase",versions:[]}],title:"supabase-js ネストしたテーブルでソート",updated_at:"2022-11-29T16:47:18+09:00",url:"https://qiita.com/maaaashi/items/edc1935b387566c576dd",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:728,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:112">Baas(Backend As A Service)で何かサービスを構築してみたいと思い、<br>\nfirebaseを触ってみようと思ったところ、Firebase の代替と謳われているsupabaseを発見。</p>\n<p data-sourcepos="6:1-6:151">簡単なTodoアプリを公式を参考に構築してみましたが、パスワード再設定の部分で少し手こずったので書きます。</p>\n<p data-sourcepos="8:1-8:85">簡単なTodoアプリの構築に関してはこちらで解説しております。</p>\n<p data-sourcepos="10:1-10:55"><iframe id="qiita-embed-content__8031c9f44f5674f55c93abbc942df1ae" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__8031c9f44f5674f55c93abbc942df1ae" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2F8820a095a433d09f300d" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<p data-sourcepos="12:1-12:55"><iframe id="qiita-embed-content__dc715d57080b3dedb2455472b099af84" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__dc715d57080b3dedb2455472b099af84" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2Fd6e0237b700448cc1826" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<p data-sourcepos="14:1-14:55"><iframe id="qiita-embed-content__d29c5ff19add89e52c789c7d9de69130" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__d29c5ff19add89e52c789c7d9de69130" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2F2afe8df35e0a7adc7e00" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<p data-sourcepos="16:1-16:55"><iframe id="qiita-embed-content__eb97bf94647531efb7ca0fe47e9686f3" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__eb97bf94647531efb7ca0fe47e9686f3" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2Ffad493559bd5fad22f02" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<h1 data-sourcepos="19:1-19:17">\n<span id="使ったもの" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>使ったもの</h1>\n<ul data-sourcepos="21:1-30:0">\n<li data-sourcepos="21:1-24:0">\n<p data-sourcepos="21:3-21:28">Vite + Svelte + Typescript</p>\n<ul data-sourcepos="22:5-24:0">\n<li data-sourcepos="22:5-22:27">@supabase/supabase-js</li>\n<li data-sourcepos="23:5-24:0">tailwind css</li>\n</ul>\n</li>\n<li data-sourcepos="25:1-30:0">\n<p data-sourcepos="25:3-25:10">supabase</p>\n<ul data-sourcepos="26:5-30:0">\n<li data-sourcepos="26:5-26:10">auth</li>\n<li data-sourcepos="27:5-27:8">db</li>\n<li data-sourcepos="28:5-30:0">realtime</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos="31:1-31:20">\n<span id="詰まったこと" class="fragment"></span><a href="#%E8%A9%B0%E3%81%BE%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8"><i class="fa fa-link"></i></a>詰まったこと</h1>\n<ol data-sourcepos="33:1-38:0">\n<li data-sourcepos="33:1-34:49">パスワード再設定用メールの送信メソッドが叩けない\n<ul data-sourcepos="34:5-34:49">\n<li data-sourcepos="34:5-34:49"><code>supabase.auth.api.resetPasswordForEmail()</code></li>\n</ul>\n</li>\n<li data-sourcepos="35:1-35:90">パスワード再設定メール内のredirect_urlがサイトURLに引っ張られる</li>\n<li data-sourcepos="36:1-38:0">パスワード再設定メソッドが叩けない\n<ul data-sourcepos="37:5-38:0">\n<li data-sourcepos="37:5-38:0"><code>supabase.auth.update()</code></li>\n</ul>\n</li>\n</ol>\n<p data-sourcepos="39:1-39:59">1と3は同じ原因だったため先に解説します。</p>\n<h2 data-sourcepos="41:1-41:149">\n<span id="1-パスワード再設定用メールの送信メソッドが叩けない及び3-パスワード再設定メソッドが叩けない" class="fragment"></span><a href="#1-%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E5%86%8D%E8%A8%AD%E5%AE%9A%E7%94%A8%E3%83%A1%E3%83%BC%E3%83%AB%E3%81%AE%E9%80%81%E4%BF%A1%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%8C%E5%8F%A9%E3%81%91%E3%81%AA%E3%81%84%E5%8F%8A%E3%81%B33-%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E5%86%8D%E8%A8%AD%E5%AE%9A%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%8C%E5%8F%A9%E3%81%91%E3%81%AA%E3%81%84"><i class="fa fa-link"></i></a>1. パスワード再設定用メールの送信メソッドが叩けない。<br>及び<br>3. パスワード再設定メソッドが叩けない</h2>\n<h3 data-sourcepos="43:1-43:10">\n<span id="概要" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>概要</h3>\n<p data-sourcepos="45:1-47:155">公式リファレンスや、技術系の記事を読み、パスワード再設定用のEmailを送るために、<br>\n<code>supabase.auth.api.resetPasswordForEmail()</code>を実行してみたが、<code>undefinedエラー</code>になってしまった。<br>\nまた、パスワード情報を書き換えるために<code>supabase.auth.update()</code>をしたが、こちらも<code>undefinedエラー</code>になってしまった。</p>\n<h3 data-sourcepos="49:1-49:25">\n<span id="原因解決方法" class="fragment"></span><a href="#%E5%8E%9F%E5%9B%A0%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>原因・解決方法</h3>\n<p data-sourcepos="51:1-52:79">supabase-jsは2022年10月に<strong>v2</strong>がリリースされ、一部メソッド名が変更となり、<br>\n<code>resetPasswordForEmail</code>及び<code>update</code>のメソッドも変更されていた。</p>\n<p data-sourcepos="54:1-55:66">公式のリファレンスでは画面上部に<strong>v1</strong>と<strong>v2</strong>を切り替えるボックスが用意されているので、<br>\nこちらでリファレンスを切り替えて、確認した。</p>\n<p data-sourcepos="57:1-58:122">参考)<br>\n<a href="https://camo.qiitausercontent.com/0b24dd4ffc792d790abd30723fcb21fbe0d1b270/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f63326537363033372d383466322d373634662d306662352d3764623335636336316161642e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fc2e76037-84f2-764f-0fb5-7db35cc61aad.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d0f8b848eff0421fbd85e65891a35d4d" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/c2e76037-84f2-764f-0fb5-7db35cc61aad.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2Fc2e76037-84f2-764f-0fb5-7db35cc61aad.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=cb86a54608baabdf04e8d313f2a1d68a 1x" loading="lazy"></a></p>\n<div class="code-frame" data-lang="javascript" data-sourcepos="60:1-70:3"><div class="highlight"><pre><code><span class="c1">// sendEmail - v1</span>\n<span class="nx">supabase</span><span class="p">.</span><span class="nx">auth</span><span class="p">.</span><span class="nx">api</span><span class="p">.</span><span class="nf">resetPasswordForEmail</span><span class="p">()</span>\n<span class="c1">// sendEmail - v2</span>\n<span class="nx">supabase</span><span class="p">.</span><span class="nx">auth</span><span class="p">.</span><span class="nf">resetPasswordForEmail</span><span class="p">()</span>\n\n<span class="c1">// update - v1</span>\n<span class="nx">supabase</span><span class="p">.</span><span class="nx">auth</span><span class="p">.</span><span class="nf">update</span><span class="p">()</span>\n<span class="c1">// update - v2</span>\n<span class="nx">supabase</span><span class="p">.</span><span class="nx">auth</span><span class="p">.</span><span class="nf">updateUser</span><span class="p">()</span>\n</code></pre></div></div>\n<p data-sourcepos="72:1-72:108">他にも似たような名前で変更になっているものが多いので、注意が必要でした。</p>\n<h2 data-sourcepos="74:1-74:93">\n<span id="2-パスワード再設定メール内のredirect_urlがサイトurlに引っ張られる" class="fragment"></span><a href="#2-%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E5%86%8D%E8%A8%AD%E5%AE%9A%E3%83%A1%E3%83%BC%E3%83%AB%E5%86%85%E3%81%AEredirect_url%E3%81%8C%E3%82%B5%E3%82%A4%E3%83%88url%E3%81%AB%E5%BC%95%E3%81%A3%E5%BC%B5%E3%82%89%E3%82%8C%E3%82%8B"><i class="fa fa-link"></i></a>2. パスワード再設定メール内のredirect_urlがサイトURLに引っ張られる</h2>\n<h3 data-sourcepos="76:1-76:10">\n<span id="概要-1" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81-1"><i class="fa fa-link"></i></a>概要</h3>\n<p data-sourcepos="78:1-79:143">私の場合、無料枠を利用しているためプロジェクト数に限りがある。<br>\n節約のために、localの開発環境と展開しているproduction環境を同じsupabaseプロジェクトで管理していました。</p>\n<p data-sourcepos="81:1-82:150">local環境でsendEmailのメソッドを叩き、メールの内容を確認したところ、<br>\n<code>redirectUrl</code>を指定していたのにもかかわらず、<code>SITE URL</code>に登録しているproduction環境へリダイレクトしてしまった。</p>\n<p data-sourcepos="84:1-84:7">参考)</p>\n<div class="code-frame" data-lang="javascript" data-sourcepos="86:1-90:3"><div class="highlight"><pre><code><span class="nf">resetPasswordForEmail</span><span class="p">(</span><span class="nx">email</span><span class="p">,</span> <span class="p">{</span>\n    <span class="na">redirectTo</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">http://localhost:8080/reset-password</span><span class="dl">\'</span><span class="p">,</span>\n<span class="p">})</span>\n</code></pre></div></div>\n<h3 data-sourcepos="92:1-92:16">\n<span id="解決方法" class="fragment"></span><a href="#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>解決方法</h3>\n<ol data-sourcepos="94:1-97:0">\n<li data-sourcepos="94:1-94:62">supabaseの自分のプロジェクト管理画面を開く</li>\n<li data-sourcepos="95:1-95:58">サイドメニューから、<code>Authentication</code>を開く</li>\n<li data-sourcepos="96:1-97:0">\n<code>Configuration</code>内、<code>URL Configuration</code>を選択し、Redirect URLsに<code>http://localhost:8080/*</code>を追加する。</li>\n</ol>\n<p data-sourcepos="98:1-99:122">参考)<br>\n<a href="https://camo.qiitausercontent.com/a32c54fe9226b8f23371060a8f529d39d7f82fe6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f36336337633064642d646235612d633463352d666663342d3138636234326165353463312e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F63c7c0dd-db5a-c4c5-ffc4-18cb42ae54c1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=edfa03841f3e2d10b670faee9d1df917" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/63c7c0dd-db5a-c4c5-ffc4-18cb42ae54c1.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F63c7c0dd-db5a-c4c5-ffc4-18cb42ae54c1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f3db8f6006dc9f3d7dae68b29f27437a 1x" loading="lazy"></a></p>\n<p data-sourcepos="101:1-102:140">認証後のリダイレクト先として<code>localhost</code>を設定しておく必要がありました。<br>\nリダイレクト先に登録していないURLが<code>redirectTo</code>で指定されるとSITE URLに飛ぶようになっているようです。</p>\n<p data-sourcepos="105:1-105:125">少し苦戦しましたが、supabaseとってもいい感じなので、今後も使って楽々構築していきます。</p>\n',body:"# はじめに\n\nBaas(Backend As A Service)で何かサービスを構築してみたいと思い、\nfirebaseを触ってみようと思ったところ、Firebase の代替と謳われているsupabaseを発見。\n\n簡単なTodoアプリを公式を参考に構築してみましたが、パスワード再設定の部分で少し手こずったので書きます。\n\n簡単なTodoアプリの構築に関してはこちらで解説しております。\n\nhttps://qiita.com/doyaseizin/items/8820a095a433d09f300d\n\nhttps://qiita.com/doyaseizin/items/d6e0237b700448cc1826\n\nhttps://qiita.com/doyaseizin/items/2afe8df35e0a7adc7e00\n\nhttps://qiita.com/doyaseizin/items/fad493559bd5fad22f02\n\n\n# 使ったもの\n\n* Vite + Svelte + Typescript\n    * @supabase/supabase-js\n    * tailwind css\n\n* supabase\n    * auth\n    * db\n    * realtime\n\n\n# 詰まったこと\n\n1. パスワード再設定用メールの送信メソッドが叩けない\n    * `supabase.auth.api.resetPasswordForEmail()`\n1. パスワード再設定メール内のredirect_urlがサイトURLに引っ張られる\n1. パスワード再設定メソッドが叩けない\n    * `supabase.auth.update()`\n\n1と3は同じ原因だったため先に解説します。\n\n## 1. パスワード再設定用メールの送信メソッドが叩けない。<br>及び<br>3. パスワード再設定メソッドが叩けない\n\n### 概要\n\n公式リファレンスや、技術系の記事を読み、パスワード再設定用のEmailを送るために、\n`supabase.auth.api.resetPasswordForEmail()`を実行してみたが、`undefinedエラー`になってしまった。\nまた、パスワード情報を書き換えるために`supabase.auth.update()`をしたが、こちらも`undefinedエラー`になってしまった。\n\n### 原因・解決方法\n\nsupabase-jsは2022年10月に**v2**がリリースされ、一部メソッド名が変更となり、\n`resetPasswordForEmail`及び`update`のメソッドも変更されていた。\n\n公式のリファレンスでは画面上部に**v1**と**v2**を切り替えるボックスが用意されているので、\nこちらでリファレンスを切り替えて、確認した。\n\n参考) \n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/c2e76037-84f2-764f-0fb5-7db35cc61aad.png)\n\n```javascript\n// sendEmail - v1\nsupabase.auth.api.resetPasswordForEmail()\n// sendEmail - v2\nsupabase.auth.resetPasswordForEmail()\n\n// update - v1\nsupabase.auth.update()\n// update - v2\nsupabase.auth.updateUser()\n```\n\n他にも似たような名前で変更になっているものが多いので、注意が必要でした。\n\n## 2. パスワード再設定メール内のredirect_urlがサイトURLに引っ張られる\n\n### 概要\n\n私の場合、無料枠を利用しているためプロジェクト数に限りがある。\n節約のために、localの開発環境と展開しているproduction環境を同じsupabaseプロジェクトで管理していました。\n\nlocal環境でsendEmailのメソッドを叩き、メールの内容を確認したところ、\n`redirectUrl`を指定していたのにもかかわらず、`SITE URL`に登録しているproduction環境へリダイレクトしてしまった。\n\n参考)\n\n```javascript\nresetPasswordForEmail(email, {\n    redirectTo: 'http://localhost:8080/reset-password',\n})\n```\n\n### 解決方法\n\n1. supabaseの自分のプロジェクト管理画面を開く\n1. サイドメニューから、`Authentication`を開く\n1. `Configuration`内、`URL Configuration`を選択し、Redirect URLsに`http://localhost:8080/*`を追加する。\n\n参考) \n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/63c7c0dd-db5a-c4c5-ffc4-18cb42ae54c1.png)\n\n認証後のリダイレクト先として`localhost`を設定しておく必要がありました。\nリダイレクト先に登録していないURLが`redirectTo`で指定されるとSITE URLに飛ぶようになっているようです。\n\n\n少し苦戦しましたが、supabaseとってもいい感じなので、今後も使って楽々構築していきます。\n",coediting:!1,comments_count:0,created_at:"2022-11-28T17:02:14+09:00",group:null,id:"6b4972bc0af243ededfb",likes_count:2,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"BaaS",versions:[]},{name:"Svelte",versions:[]},{name:"Supabase",versions:[]}],title:"Supabase Auth パスワード再発行用のメール送信及びパスワード再設定",updated_at:"2022-11-30T21:03:49+09:00",url:"https://qiita.com/maaaashi/items/6b4972bc0af243ededfb",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:598,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:112">Baas(Backend As A Service)で何かサービスを構築してみたいと思い、<br>\nfirebaseを触ってみようと思ったところ、Firebase の代替と謳われているsupabaseを発見。</p>\n<p data-sourcepos="6:1-6:81">こちらの方が面白そうだと感じたため、構築してみることに</p>\n<h1 data-sourcepos="8:1-8:17">\n<span id="使ったもの" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>使ったもの</h1>\n<ul data-sourcepos="10:1-18:0">\n<li data-sourcepos="10:1-13:0">\n<p data-sourcepos="10:3-10:28">Vite + Svelte + Typescript</p>\n<ul data-sourcepos="11:5-13:0">\n<li data-sourcepos="11:5-11:27">@supabase/supabase-js</li>\n<li data-sourcepos="12:5-13:0">tailwind css</li>\n</ul>\n</li>\n<li data-sourcepos="14:1-18:0">\n<p data-sourcepos="14:3-14:10">supabase</p>\n<ul data-sourcepos="15:5-18:0">\n<li data-sourcepos="15:5-15:10">auth</li>\n<li data-sourcepos="16:5-16:8">db</li>\n<li data-sourcepos="17:5-18:0">realtime</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos="19:1-19:14">\n<span id="これまで" class="fragment"></span><a href="#%E3%81%93%E3%82%8C%E3%81%BE%E3%81%A7"><i class="fa fa-link"></i></a>これまで</h1>\n<ol data-sourcepos="21:1-32:0">\n<li data-sourcepos="21:1-24:0">\n<p data-sourcepos="21:4-21:65">フロント側でsupabaseを呼び出せるところように</p>\n<p data-sourcepos="23:5-23:59"><a href="https://qiita.com/doyaseizin/items/8820a095a433d09f300d" class="autolink" id="reference-240a05a90757ff7448e4">https://qiita.com/doyaseizin/items/8820a095a433d09f300d</a></p>\n</li>\n<li data-sourcepos="25:1-28:0">\n<p data-sourcepos="25:4-25:27">データ取得・操作</p>\n<p data-sourcepos="27:5-27:59"><a href="https://qiita.com/doyaseizin/items/d6e0237b700448cc1826" class="autolink" id="reference-96bd0e86443c9cf5103f">https://qiita.com/doyaseizin/items/d6e0237b700448cc1826</a></p>\n</li>\n<li data-sourcepos="29:1-32:0">\n<p data-sourcepos="29:4-29:21">ポリシー設定</p>\n<p data-sourcepos="31:5-31:59"><a href="https://qiita.com/doyaseizin/items/2afe8df35e0a7adc7e00" class="autolink" id="reference-0b2ab3d3dceff3efd7b4">https://qiita.com/doyaseizin/items/2afe8df35e0a7adc7e00</a></p>\n</li>\n</ol>\n<h2 data-sourcepos="33:1-33:20">\n<span id="tasksテーブル" class="fragment"></span><a href="#tasks%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB"><i class="fa fa-link"></i></a>tasksテーブル</h2>\n<table data-sourcepos="35:1-41:17">\n<thead>\n<tr data-sourcepos="35:1-35:12">\n<th data-sourcepos="35:2-35:7">項目</th>\n<th data-sourcepos="35:9-35:11">型</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos="37:1-37:9">\n<td data-sourcepos="37:2-37:3">id</td>\n<td data-sourcepos="37:5-37:8">uuid</td>\n</tr>\n<tr data-sourcepos="38:1-38:14">\n<td data-sourcepos="38:2-38:8">user_id</td>\n<td data-sourcepos="38:10-38:13">uuid</td>\n</tr>\n<tr data-sourcepos="39:1-39:14">\n<td data-sourcepos="39:2-39:8">content</td>\n<td data-sourcepos="39:10-39:13">text</td>\n</tr>\n<tr data-sourcepos="40:1-40:17">\n<td data-sourcepos="40:2-40:8">is_done</td>\n<td data-sourcepos="40:10-40:16">boolean</td>\n</tr>\n<tr data-sourcepos="41:1-41:17">\n<td data-sourcepos="41:2-41:11">created_at</td>\n<td data-sourcepos="41:13-41:16">date</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos="43:1-43:122">前回まででこのテーブルから<code>自分が作成した</code>、<code>Todoの取得や操作</code>ができるようになった。</p>\n<h1 data-sourcepos="45:1-45:8">\n<span id="今回" class="fragment"></span><a href="#%E4%BB%8A%E5%9B%9E"><i class="fa fa-link"></i></a>今回</h1>\n<p data-sourcepos="47:1-48:87">共同作業などを行っているときは、<br>\n他の人の操作が即座に自分の画面に表示された方が都合がいい。</p>\n<p data-sourcepos="50:1-51:57">今回はsupabaseのリアルタイム機能を使って、DBの操作が行われたときに、<br>\n即座に画面に反映されるようにしていく。</p>\n<h3 data-sourcepos="53:1-53:33">\n<span id="1-realtimeを有効化する" class="fragment"></span><a href="#1-realtime%E3%82%92%E6%9C%89%E5%8A%B9%E5%8C%96%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>1. Realtimeを有効化する</h3>\n<ol data-sourcepos="55:1-58:0">\n<li data-sourcepos="55:1-55:62">サイドメニューより、<code>Table Editor</code>タブを開く</li>\n<li data-sourcepos="56:1-56:107">テーブルを選択し、テーブル名横の<code>∨</code>をクリックし、<code>Edit Table</code>を選択する。</li>\n<li data-sourcepos="57:1-58:0">\n<code>Enable Realtime</code>にチェックを入れて<code>Save</code>する</li>\n</ol>\n<h3 data-sourcepos="59:1-59:58">\n<span id="2-リアルタイムリスナーをセットアップ" class="fragment"></span><a href="#2-%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%BF%E3%82%A4%E3%83%A0%E3%83%AA%E3%82%B9%E3%83%8A%E3%83%BC%E3%82%92%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97"><i class="fa fa-link"></i></a>2. リアルタイムリスナーをセットアップ</h3>\n<ol data-sourcepos="61:1-83:0">\n<li data-sourcepos="61:1-66:0">\n<p data-sourcepos="61:4-61:22">Channelをセット</p>\n<div class="code-frame" data-lang="javascript" data-sourcepos="63:5-65:7"><div class="highlight"><pre><code>  <span class="kd">const</span> <span class="nx">TaskChannel</span> <span class="o">=</span> <span class="nx">supabase</span><span class="p">.</span><span class="nf">channel</span><span class="p">(</span><span class="dl">\'</span><span class="s1">task</span><span class="dl">\'</span><span class="p">)</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="67:1-83:0">\n<p data-sourcepos="67:4-67:63">イベントに対してのコールバック関数を設定</p>\n<p data-sourcepos="69:5-69:93">例) <code>tasks</code>テーブルに<code>INSERT</code>イベントが起きた時に着火させたい場合</p>\n<div class="code-frame" data-lang="javascript" data-sourcepos="71:5-82:7"><div class="highlight"><pre><code>  <span class="kd">const</span> <span class="nx">TaskChannel</span> <span class="o">=</span> <span class="nx">supabase</span><span class="p">.</span><span class="nf">channel</span><span class="p">(</span><span class="dl">\'</span><span class="s1">task</span><span class="dl">\'</span><span class="p">)</span>\n\n  <span class="nx">TaskChannel</span>\n    <span class="p">.</span><span class="nf">on </span><span class="p">(</span>\n      <span class="dl">\'</span><span class="s1">postgres_changes</span><span class="dl">\'</span><span class="p">,</span>\n      <span class="p">{</span> <span class="na">event</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">INSERT</span><span class="dl">\'</span><span class="p">,</span> <span class="na">schema</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">public</span><span class="dl">\'</span><span class="p">,</span> <span class="na">table</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">tasks</span><span class="dl">\'</span> <span class="p">},</span>\n      <span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n        <span class="c1">// こちらに処理を作成</span>\n      <span class="p">}</span>\n    <span class="p">)</span>\n</code></pre></div></div>\n</li>\n</ol>\n<p data-sourcepos="84:1-85:107">同様に<code>UPDATE</code>や<code>DELETE</code>のイベントが起きた時にも処理を作成することで、<br>\nDBの状態をリアルタイムに受け取り、ローカルへ反映させることが可能でした。</p>\n<p data-sourcepos="87:1-87:55">これでシンプルなToDoアプリの完成です。</p>\n<p data-sourcepos="89:1-89:100">次回はsupabaseをdocker-composeで起動し、利用した感想などを書いていきます。</p>\n<p data-sourcepos="91:1-91:44">supabase、とってもいい感じですね</p>\n',body:"# はじめに\n\nBaas(Backend As A Service)で何かサービスを構築してみたいと思い、\nfirebaseを触ってみようと思ったところ、Firebase の代替と謳われているsupabaseを発見。\n\nこちらの方が面白そうだと感じたため、構築してみることに\n\n# 使ったもの\n\n* Vite + Svelte + Typescript\n    * @supabase/supabase-js\n    * tailwind css\n\n* supabase\n    * auth\n    * db\n    * realtime\n\n# これまで\n\n1. フロント側でsupabaseを呼び出せるところように\n\n    https://qiita.com/doyaseizin/items/8820a095a433d09f300d\n\n1. データ取得・操作\n\n    https://qiita.com/doyaseizin/items/d6e0237b700448cc1826\n\n1. ポリシー設定\n\n    https://qiita.com/doyaseizin/items/2afe8df35e0a7adc7e00\n\n## tasksテーブル\n\n|項目|型|\n|----|----|\n|id|uuid|\n|user_id|uuid|\n|content|text|\n|is_done|boolean|\n|created_at|date|\n\n前回まででこのテーブルから`自分が作成した`、`Todoの取得や操作`ができるようになった。\n\n# 今回\n\n共同作業などを行っているときは、\n他の人の操作が即座に自分の画面に表示された方が都合がいい。\n\n今回はsupabaseのリアルタイム機能を使って、DBの操作が行われたときに、\n即座に画面に反映されるようにしていく。\n\n### 1. Realtimeを有効化する\n\n1. サイドメニューより、`Table Editor`タブを開く\n1. テーブルを選択し、テーブル名横の`∨`をクリックし、`Edit Table`を選択する。\n1. `Enable Realtime`にチェックを入れて`Save`する\n\n### 2. リアルタイムリスナーをセットアップ\n\n1. Channelをセット\n\n    ```javascript\n      const TaskChannel = supabase.channel('task')\n    ```\n\n1. イベントに対してのコールバック関数を設定\n\n    例) `tasks`テーブルに`INSERT`イベントが起きた時に着火させたい場合\n\n    ```javascript\n      const TaskChannel = supabase.channel('task')\n\n      TaskChannel\n        .on (\n          'postgres_changes',\n          { event: 'INSERT', schema: 'public', table: 'tasks' },\n          (payload) => {\n            // こちらに処理を作成\n          }\n        )\n    ```\n\n同様に`UPDATE`や`DELETE`のイベントが起きた時にも処理を作成することで、\nDBの状態をリアルタイムに受け取り、ローカルへ反映させることが可能でした。\n\nこれでシンプルなToDoアプリの完成です。\n\n次回はsupabaseをdocker-composeで起動し、利用した感想などを書いていきます。\n\nsupabase、とってもいい感じですね\n",coediting:!1,comments_count:0,created_at:"2022-11-27T13:45:14+09:00",group:null,id:"fad493559bd5fad22f02",likes_count:5,private:!1,reactions_count:0,stocks_count:1,tags:[{name:"JavaScript",versions:[]},{name:"BaaS",versions:[]},{name:"Svelte",versions:[]},{name:"Supabase",versions:[]}],title:"supabaseで簡単なTodoアプリを構築した話 - リアルタイム機能",updated_at:"2023-02-19T16:11:50+09:00",url:"https://qiita.com/maaaashi/items/fad493559bd5fad22f02",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:586,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:112">Baas(Backend As A Service)で何かサービスを構築してみたいと思い、<br>\nfirebaseを触ってみようと思ったところ、Firebase の代替と謳われているsupabaseを発見。</p>\n<p data-sourcepos="6:1-6:81">こちらの方が面白そうだと感じたため、構築してみることに</p>\n<h1 data-sourcepos="8:1-8:17">\n<span id="使ったもの" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>使ったもの</h1>\n<ul data-sourcepos="10:1-18:0">\n<li data-sourcepos="10:1-13:0">\n<p data-sourcepos="10:3-10:28">Vite + Svelte + Typescript</p>\n<ul data-sourcepos="11:5-13:0">\n<li data-sourcepos="11:5-11:27">@supabase/supabase-js</li>\n<li data-sourcepos="12:5-13:0">tailwind css</li>\n</ul>\n</li>\n<li data-sourcepos="14:1-18:0">\n<p data-sourcepos="14:3-14:10">supabase</p>\n<ul data-sourcepos="15:5-18:0">\n<li data-sourcepos="15:5-15:10">auth</li>\n<li data-sourcepos="16:5-16:8">db</li>\n<li data-sourcepos="17:5-18:0">realtime</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos="19:1-19:14">\n<span id="これまで" class="fragment"></span><a href="#%E3%81%93%E3%82%8C%E3%81%BE%E3%81%A7"><i class="fa fa-link"></i></a>これまで</h1>\n<ol data-sourcepos="21:1-29:0">\n<li data-sourcepos="21:1-24:0">\n<p data-sourcepos="21:4-21:65">フロント側でsupabaseを呼び出せるところように</p>\n<p data-sourcepos="23:5-23:59"><a href="https://qiita.com/doyaseizin/items/8820a095a433d09f300d" class="autolink" id="reference-12fb84bc6dcc10da49dd">https://qiita.com/doyaseizin/items/8820a095a433d09f300d</a></p>\n</li>\n<li data-sourcepos="25:1-29:0">\n<p data-sourcepos="25:4-25:27">データ取得・操作</p>\n<p data-sourcepos="27:5-27:59"><a href="https://qiita.com/doyaseizin/items/d6e0237b700448cc1826" class="autolink" id="reference-d2253da97bb34bf51728">https://qiita.com/doyaseizin/items/d6e0237b700448cc1826</a></p>\n</li>\n</ol>\n<h4 data-sourcepos="30:1-30:22">\n<span id="tasksテーブル" class="fragment"></span><a href="#tasks%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB"><i class="fa fa-link"></i></a>tasksテーブル</h4>\n<table data-sourcepos="31:1-37:17">\n<thead>\n<tr data-sourcepos="31:1-31:12">\n<th data-sourcepos="31:2-31:7">項目</th>\n<th data-sourcepos="31:9-31:11">型</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos="33:1-33:9">\n<td data-sourcepos="33:2-33:3">id</td>\n<td data-sourcepos="33:5-33:8">uuid</td>\n</tr>\n<tr data-sourcepos="34:1-34:14">\n<td data-sourcepos="34:2-34:8">user_id</td>\n<td data-sourcepos="34:10-34:13">uuid</td>\n</tr>\n<tr data-sourcepos="35:1-35:14">\n<td data-sourcepos="35:2-35:8">content</td>\n<td data-sourcepos="35:10-35:13">text</td>\n</tr>\n<tr data-sourcepos="36:1-36:17">\n<td data-sourcepos="36:2-36:8">is_done</td>\n<td data-sourcepos="36:10-36:16">boolean</td>\n</tr>\n<tr data-sourcepos="37:1-37:17">\n<td data-sourcepos="37:2-37:11">created_at</td>\n<td data-sourcepos="37:13-37:16">date</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos="39:1-39:100">前回まででこのテーブルからTodoの取得や新規登録ができるようになった。</p>\n<h3 data-sourcepos="41:1-41:10">\n<span id="今回" class="fragment"></span><a href="#%E4%BB%8A%E5%9B%9E"><i class="fa fa-link"></i></a>今回</h3>\n<p data-sourcepos="43:1-45:96">前回まででデータの取得・操作が行えるようになったが、<br>\nこのままだと自分が作ったTodo以外まで取得・操作できてしまうため、<br>\n自分が作ったものだけを操作できるようなポリシーの設定をしていく。</p>\n<h3 data-sourcepos="47:1-47:42">\n<span id="1-rlsrow-level-securityの有効化" class="fragment"></span><a href="#1-rlsrow-level-security%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96"><i class="fa fa-link"></i></a>1. RLS(Row Level Security)の有効化</h3>\n<ol data-sourcepos="49:1-52:0">\n<li data-sourcepos="49:1-49:64">サイドメニューより、<code>Authentication</code>タブを開く</li>\n<li data-sourcepos="50:1-50:86">\n<code>Policies</code>を選択し、<code>tasks</code>テーブル<code>Enable RLS</code>からRLSを有効化する</li>\n<li data-sourcepos="51:1-52:0">テーブル名の隣に<code>RLS enabled</code>となっていたら有効化になっている。</li>\n</ol>\n<h3 data-sourcepos="53:1-53:19">\n<span id="2-policy作成" class="fragment"></span><a href="#2-policy%E4%BD%9C%E6%88%90"><i class="fa fa-link"></i></a>2. Policy作成</h3>\n<p data-sourcepos="55:1-56:102">このままだと誰も閲覧・操作できないので、<br>\n例として、<code>自分のTodoのみ閲覧可能</code>にするようなポリシーを設定してみる。</p>\n<ol data-sourcepos="58:1-67:0">\n<li data-sourcepos="58:1-58:48">\n<code>New Policy</code>からポリシーを設定する</li>\n<li data-sourcepos="59:1-59:108">テンプレートはいろいろ用意されているが、今回は<code>For full customization</code>を選択。</li>\n<li data-sourcepos="60:1-60:75">\n<code>Policy name</code>には分かりやすい名前を設定。（日本語OK）</li>\n<li data-sourcepos="61:1-61:42">\n<code>Allowed operation</code>は<code>SELECT</code>を選択</li>\n<li data-sourcepos="62:1-62:104">\n<code>Target roles</code>はログイン済みのユーザーのみにしたいため、<code>authenticated</code>を選択</li>\n<li data-sourcepos="63:1-67:0">\n<code>USING expression</code>にはどういった条件を満たした時に、というものを記述する。<br>\n今回の場合は、ログインしてアクセスしてきているユーザー<strong>auth.uid()<strong>と、<br>\ntasksテーブルの</strong>user_id</strong>が一致しているという条件にしたいため、<br>\n<code>auth.uid() = user_id</code>と記述すればOK。</li>\n</ol>\n<p data-sourcepos="68:1-69:81">これを設定ことで自分のタスクのみ閲覧することができるようになるため、<br>\n↓のようにフロント側でわざわざ条件を付ける必要がない。</p>\n<div class="code-frame" data-lang="javascript" data-sourcepos="71:1-81:3"><div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">listTodo</span> <span class="o">=</span> <span class="nf">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="kd">const</span> <span class="nx">user_id</span> <span class="o">=</span> <span class="nx">session</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">id</span>\n  <span class="kd">const</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">supabase</span>\n    <span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="dl">\'</span><span class="s1">tasks</span><span class="dl">\'</span><span class="p">)</span>\n    <span class="p">.</span><span class="nf">select</span><span class="p">()</span>\n    <span class="p">.</span><span class="nf">match</span><span class="p">({</span><span class="dl">\'</span><span class="s1">user_id</span><span class="dl">\'</span><span class="p">:</span> <span class="nx">user_id</span><span class="p">})</span>  <span class="c1">// ユーザーIDで絞り込み</span>\n\n  <span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">query</span>\n<span class="p">}</span>\n</code></pre></div></div>\n<p data-sourcepos="83:1-84:82">同様にINSERT UPDATE DELETEに関してもポリシーを設定し、<br>\n自分のTodoしか閲覧・操作できないようにすることができた。</p>\n<p data-sourcepos="86:1-87:112">ここまででもTodoアプリとしては機能するが、共同作業などを行っているときは、<br>\n他の人が作成したTodoが即座に自分の画面に表示された方が都合がいい場合が多い。</p>\n<p data-sourcepos="89:1-90:57">次回はリアルタイム機能を使って、DBの操作が行われたときに、<br>\n即座に画面に反映されるようにしていく。</p>\n<p data-sourcepos="92:1-92:44">supabase、とってもいい感じですね</p>\n',body:"# はじめに\n\nBaas(Backend As A Service)で何かサービスを構築してみたいと思い、\nfirebaseを触ってみようと思ったところ、Firebase の代替と謳われているsupabaseを発見。\n\nこちらの方が面白そうだと感じたため、構築してみることに\n\n# 使ったもの\n\n* Vite + Svelte + Typescript\n    * @supabase/supabase-js\n    * tailwind css\n\n* supabase\n    * auth\n    * db\n    * realtime\n\n# これまで\n\n1. フロント側でsupabaseを呼び出せるところように\n\n    https://qiita.com/doyaseizin/items/8820a095a433d09f300d\n\n1. データ取得・操作\n\n    https://qiita.com/doyaseizin/items/d6e0237b700448cc1826\n\n\n#### tasksテーブル\n|項目|型|\n|----|----|\n|id|uuid|\n|user_id|uuid|\n|content|text|\n|is_done|boolean|\n|created_at|date|\n\n前回まででこのテーブルからTodoの取得や新規登録ができるようになった。\n\n### 今回\n\n前回まででデータの取得・操作が行えるようになったが、\nこのままだと自分が作ったTodo以外まで取得・操作できてしまうため、\n自分が作ったものだけを操作できるようなポリシーの設定をしていく。\n\n### 1. RLS(Row Level Security)の有効化\n\n1. サイドメニューより、`Authentication`タブを開く\n1. `Policies`を選択し、`tasks`テーブル`Enable RLS`からRLSを有効化する\n1. テーブル名の隣に`RLS enabled`となっていたら有効化になっている。\n\n### 2. Policy作成\n\nこのままだと誰も閲覧・操作できないので、\n例として、`自分のTodoのみ閲覧可能`にするようなポリシーを設定してみる。\n\n1. `New Policy`からポリシーを設定する\n1. テンプレートはいろいろ用意されているが、今回は`For full customization`を選択。\n1. `Policy name`には分かりやすい名前を設定。（日本語OK）\n1. `Allowed operation`は`SELECT`を選択\n1. `Target roles`はログイン済みのユーザーのみにしたいため、`authenticated`を選択\n1. `USING expression`にはどういった条件を満たした時に、というものを記述する。\n    今回の場合は、ログインしてアクセスしてきているユーザー**auth.uid()**と、\n    tasksテーブルの**user_id**が一致しているという条件にしたいため、\n    `auth.uid() = user_id`と記述すればOK。\n\nこれを設定ことで自分のタスクのみ閲覧することができるようになるため、\n↓のようにフロント側でわざわざ条件を付ける必要がない。\n\n```javascript\nconst listTodo = async () => {\n  const user_id = session.user.id\n  const query = supabase\n    .from('tasks')\n    .select()\n    .match({'user_id': user_id})  // ユーザーIDで絞り込み\n\n  const { data, error } = await query\n}\n```\n\n同様にINSERT UPDATE DELETEに関してもポリシーを設定し、\n自分のTodoしか閲覧・操作できないようにすることができた。\n\nここまででもTodoアプリとしては機能するが、共同作業などを行っているときは、\n他の人が作成したTodoが即座に自分の画面に表示された方が都合がいい場合が多い。\n\n次回はリアルタイム機能を使って、DBの操作が行われたときに、\n即座に画面に反映されるようにしていく。\n\nsupabase、とってもいい感じですね\n",coediting:!1,comments_count:0,created_at:"2022-11-26T16:36:18+09:00",group:null,id:"2afe8df35e0a7adc7e00",likes_count:2,private:!1,reactions_count:0,stocks_count:0,tags:[{name:"JavaScript",versions:[]},{name:"BaaS",versions:[]},{name:"Svelte",versions:[]},{name:"Supabase",versions:[]}],title:"supabaseで簡単なTodoアプリを構築した話 - ポリシー設定",updated_at:"2022-11-26T16:37:14+09:00",url:"https://qiita.com/maaaashi/items/2afe8df35e0a7adc7e00",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:626,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:112">Baas(Backend As A Service)で何かサービスを構築してみたいと思い、<br>\nfirebaseを触ってみようと思ったところ、Firebase の代替と謳われているsupabaseを発見。</p>\n<p data-sourcepos="6:1-6:81">こちらの方が面白そうだと感じたため、構築してみることに</p>\n<h1 data-sourcepos="8:1-8:17">\n<span id="使ったもの" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>使ったもの</h1>\n<ul data-sourcepos="10:1-18:0">\n<li data-sourcepos="10:1-13:0">\n<p data-sourcepos="10:3-10:28">Vite + Svelte + Typescript</p>\n<ul data-sourcepos="11:5-13:0">\n<li data-sourcepos="11:5-11:27">@supabase/supabase-js</li>\n<li data-sourcepos="12:5-13:0">tailwind css</li>\n</ul>\n</li>\n<li data-sourcepos="14:1-18:0">\n<p data-sourcepos="14:3-14:10">supabase</p>\n<ul data-sourcepos="15:5-18:0">\n<li data-sourcepos="15:5-15:10">auth</li>\n<li data-sourcepos="16:5-16:8">db</li>\n<li data-sourcepos="17:5-18:0">realtime</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos="19:1-19:8">\n<span id="前回" class="fragment"></span><a href="#%E5%89%8D%E5%9B%9E"><i class="fa fa-link"></i></a>前回</h1>\n<p data-sourcepos="21:1-21:68">フロント側でsupabaseを呼び出せるところまでやった</p>\n<p data-sourcepos="23:1-23:55"><iframe id="qiita-embed-content__91b41487d313c17d55f276e8c01c5c13" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__91b41487d313c17d55f276e8c01c5c13" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2F8820a095a433d09f300d" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n<h3 data-sourcepos="26:1-26:10">\n<span id="前提" class="fragment"></span><a href="#%E5%89%8D%E6%8F%90"><i class="fa fa-link"></i></a>前提</h3>\n<p data-sourcepos="28:1-29:42">前回の手順で、supabase上のsqlエディターから<br>\n↓のテーブルを作成してある。</p>\n<h4 data-sourcepos="31:1-31:22">\n<span id="tasksテーブル" class="fragment"></span><a href="#tasks%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB"><i class="fa fa-link"></i></a>tasksテーブル</h4>\n<table data-sourcepos="32:1-38:17">\n<thead>\n<tr data-sourcepos="32:1-32:12">\n<th data-sourcepos="32:2-32:7">項目</th>\n<th data-sourcepos="32:9-32:11">型</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos="34:1-34:9">\n<td data-sourcepos="34:2-34:3">id</td>\n<td data-sourcepos="34:5-34:8">uuid</td>\n</tr>\n<tr data-sourcepos="35:1-35:14">\n<td data-sourcepos="35:2-35:8">user_id</td>\n<td data-sourcepos="35:10-35:13">uuid</td>\n</tr>\n<tr data-sourcepos="36:1-36:14">\n<td data-sourcepos="36:2-36:8">content</td>\n<td data-sourcepos="36:10-36:13">text</td>\n</tr>\n<tr data-sourcepos="37:1-37:17">\n<td data-sourcepos="37:2-37:8">is_done</td>\n<td data-sourcepos="37:10-37:16">boolean</td>\n</tr>\n<tr data-sourcepos="38:1-38:17">\n<td data-sourcepos="38:2-38:11">created_at</td>\n<td data-sourcepos="38:13-38:16">date</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos="40:1-40:79">今回はこのテーブルからTodoの取得や新規登録をしてみる。</p>\n<h3 data-sourcepos="42:1-42:10">\n<span id="続き" class="fragment"></span><a href="#%E7%B6%9A%E3%81%8D"><i class="fa fa-link"></i></a>続き</h3>\n<ol data-sourcepos="44:1-97:0">\n<li data-sourcepos="44:1-66:0">\n<p data-sourcepos="44:4-44:81">submit時に<code>insertTodo</code>を実行するようなフォームを用意する。</p>\n<div class="code-frame" data-lang="vue" data-sourcepos="46:5-65:7"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">\'ts\'</span><span class="nt">&gt;</span>\n  <span class="kd">const</span> <span class="nx">new_todo</span> <span class="o">=</span> <span class="dl">\'\'</span><span class="p">;</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;form</span> <span class="na">on:submit</span><span class="err">|</span><span class="na">preventDefault=</span><span class="s">{insertTodo}</span> <span class="na">class=</span><span class="s">"todo-form"</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;div&gt;</span>\n    <span class="nt">&lt;input</span>\n      <span class="na">id=</span><span class="s">"content"</span>\n      <span class="na">name=</span><span class="s">"content"</span>\n      <span class="na">type=</span><span class="s">"text"</span>\n      <span class="na">placeholder=</span><span class="s">"新しいタスクを入力..."</span>\n      <span class="na">bind:value=</span><span class="s">"{new_todo}"</span>\n    <span class="nt">/&gt;</span>\n  <span class="nt">&lt;/div&gt;</span>\n  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>\n    作成\n  <span class="nt">&lt;/button&gt;</span>\n<span class="nt">&lt;/form&gt;</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="67:1-83:0">\n<p data-sourcepos="67:4-67:94">前回作った<code>supabaseClient.ts</code>を呼び出し、<code>insertTodo</code>メソッドを作成する</p>\n<div class="code-frame" data-lang="javascript" data-sourcepos="69:5-82:7"><div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">supabase</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">../supabaseClient</span><span class="dl">\'</span><span class="p">;</span>\n<span class="kd">const</span> <span class="nx">new_todo</span> <span class="o">=</span> <span class="dl">\'\'</span><span class="p">;</span>\n\n<span class="kd">const</span> <span class="nx">insertTodo</span> <span class="o">=</span> <span class="nf">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="kd">const</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">supabase</span>\n    <span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="dl">\'</span><span class="s1">tasks</span><span class="dl">\'</span><span class="p">)</span>\n    <span class="p">.</span><span class="nf">insert</span><span class="p">({</span>\n      <span class="na">content</span><span class="p">:</span> <span class="nx">new_todo</span>\n    <span class="p">})</span>\n\n  <span class="k">await</span> <span class="nx">query</span>\n<span class="p">}</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="84:1-85:0">\n<p data-sourcepos="84:4-84:42">これだけで新規登録ができた</p>\n</li>\n<li data-sourcepos="86:1-97:0">\n<p data-sourcepos="86:4-86:60">全件取得するには次のように取得できる。</p>\n<div class="code-frame" data-lang="javascript" data-sourcepos="88:5-96:7"><div class="highlight"><pre><code><span class="kd">const</span> <span class="nx">listTodo</span> <span class="o">=</span> <span class="nf">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="kd">const</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">supabase</span>\n    <span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="dl">\'</span><span class="s1">tasks</span><span class="dl">\'</span><span class="p">)</span>\n    <span class="p">.</span><span class="nf">select</span><span class="p">()</span>\n\n  <span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">query</span>\n<span class="p">}</span>\n</code></pre></div></div>\n</li>\n</ol>\n<p data-sourcepos="98:1-98:110">同様にUPDATEやDELETEもSQLを操作するようにsupabaseから値を取ってくることができる。</p>\n<p data-sourcepos="100:1-101:102">これだと他のユーザーが作ったものも操作できてしまう。<br>\n自分が作ったものだけを操作できるようなポリシーの設定を次回書きます。</p>\n<p data-sourcepos="103:1-103:35">supabase、とってもいい感じ</p>\n<h3 data-sourcepos="105:1-105:10">\n<span id="追記" class="fragment"></span><a href="#%E8%BF%BD%E8%A8%98"><i class="fa fa-link"></i></a>追記</h3>\n<p data-sourcepos="107:1-107:21">投稿しました。</p>\n<p data-sourcepos="109:1-109:55"><iframe id="qiita-embed-content__4f08f67d845ccdc403f14b639b9adb51" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__4f08f67d845ccdc403f14b639b9adb51" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2F2afe8df35e0a7adc7e00" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n',body:'# はじめに\n\nBaas(Backend As A Service)で何かサービスを構築してみたいと思い、\nfirebaseを触ってみようと思ったところ、Firebase の代替と謳われているsupabaseを発見。\n\nこちらの方が面白そうだと感じたため、構築してみることに\n\n# 使ったもの\n\n* Vite + Svelte + Typescript\n    * @supabase/supabase-js\n    * tailwind css\n\n* supabase\n    * auth\n    * db\n    * realtime\n\n# 前回\n\nフロント側でsupabaseを呼び出せるところまでやった\n\nhttps://qiita.com/doyaseizin/items/8820a095a433d09f300d\n\n\n### 前提\n\n前回の手順で、supabase上のsqlエディターから\n↓のテーブルを作成してある。\n\n#### tasksテーブル\n|項目|型|\n|----|----|\n|id|uuid|\n|user_id|uuid|\n|content|text|\n|is_done|boolean|\n|created_at|date|\n\n今回はこのテーブルからTodoの取得や新規登録をしてみる。\n\n### 続き\n\n1. submit時に`insertTodo`を実行するようなフォームを用意する。\n\n    ```vue\n    <script lang=\'ts\'>\n      const new_todo = \'\';\n    <\/script>\n\n    <form on:submit|preventDefault={insertTodo} class="todo-form">\n      <div>\n        <input\n          id="content"\n          name="content"\n          type="text"\n          placeholder="新しいタスクを入力..."\n          bind:value="{new_todo}"\n        />\n      </div>\n      <button type="submit">\n        作成\n      </button>\n    </form>\n    ```\n\n1. 前回作った`supabaseClient.ts`を呼び出し、`insertTodo`メソッドを作成する\n\n    ```javascript\n    import { supabase } from \'../supabaseClient\';\n    const new_todo = \'\';\n\n    const insertTodo = async () => {\n      const query = supabase\n        .from(\'tasks\')\n        .insert({\n          content: new_todo\n        })\n\n      await query\n    }\n    ```\n\n1. これだけで新規登録ができた\n\n1. 全件取得するには次のように取得できる。\n\n    ```javascript\n    const listTodo = async () => {\n      const query = supabase\n        .from(\'tasks\')\n        .select()\n\n      const { data, error } = await query\n    }\n    ```\n\n同様にUPDATEやDELETEもSQLを操作するようにsupabaseから値を取ってくることができる。\n\nこれだと他のユーザーが作ったものも操作できてしまう。\n自分が作ったものだけを操作できるようなポリシーの設定を次回書きます。\n\nsupabase、とってもいい感じ\n\n### 追記\n\n投稿しました。\n\nhttps://qiita.com/doyaseizin/items/2afe8df35e0a7adc7e00\n',coediting:!1,comments_count:0,created_at:"2022-11-25T13:33:03+09:00",group:null,id:"d6e0237b700448cc1826",likes_count:5,private:!1,reactions_count:0,stocks_count:3,tags:[{name:"JavaScript",versions:[]},{name:"BaaS",versions:[]},{name:"Svelte",versions:[]},{name:"Supabase",versions:[]}],title:"supabaseで簡単なTodoアプリを構築した話 - データ取得・操作",updated_at:"2022-11-26T16:39:55+09:00",url:"https://qiita.com/maaaashi/items/d6e0237b700448cc1826",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:1759,team_membership:null,organization_url_name:null},{rendered_body:'<h1 data-sourcepos="1:1-1:14">\n<span id="はじめに" class="fragment"></span><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>はじめに</h1>\n<p data-sourcepos="3:1-4:112">Baas(Backend As A Service)で何かサービスを構築してみたいと思い、<br>\nfirebaseを触ってみようと思ったところ、Firebase の代替と謳われているsupabaseを発見。</p>\n<p data-sourcepos="6:1-6:81">こちらの方が面白そうだと感じたため、構築してみることに</p>\n<h1 data-sourcepos="8:1-8:17">\n<span id="使ったもの" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>使ったもの</h1>\n<ul data-sourcepos="10:1-18:0">\n<li data-sourcepos="10:1-13:0">\n<p data-sourcepos="10:3-10:28">Vite + Svelte + Typescript</p>\n<ul data-sourcepos="11:5-13:0">\n<li data-sourcepos="11:5-11:27">@supabase/supabase-js</li>\n<li data-sourcepos="12:5-13:0">tailwind css</li>\n</ul>\n</li>\n<li data-sourcepos="14:1-18:0">\n<p data-sourcepos="14:3-14:10">supabase</p>\n<ul data-sourcepos="15:5-18:0">\n<li data-sourcepos="15:5-15:10">auth</li>\n<li data-sourcepos="16:5-16:8">db</li>\n<li data-sourcepos="17:5-18:0">realtime</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos="19:1-19:35">\n<span id="ローカル環境の構築手順" class="fragment"></span><a href="#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E7%92%B0%E5%A2%83%E3%81%AE%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86"><i class="fa fa-link"></i></a>ローカル環境の構築手順</h1>\n<h2 data-sourcepos="21:1-21:11">\n<span id="supabase" class="fragment"></span><a href="#supabase"><i class="fa fa-link"></i></a>supabase</h2>\n<ol data-sourcepos="23:1-39:0">\n<li data-sourcepos="23:1-24:0">\n<p data-sourcepos="23:4-23:88"><a href="https://app.supabase.com/" rel="nofollow noopener" target="_blank">supabase</a>でアカウント及びプロジェクト作成</p>\n</li>\n<li data-sourcepos="25:1-37:0">\n<p data-sourcepos="25:4-26:63">SQL Editorより以下を実行し、taskテーブルを作成する<br>\n(todoアプリ用のため、いらない人はスキップ)</p>\n<div class="code-frame" data-lang="sql" data-sourcepos="28:5-36:7"><div class="highlight"><pre><code><span class="k">create</span> <span class="k">table</span> <span class="n">if</span> <span class="k">not</span> <span class="k">exists</span> <span class="k">public</span><span class="p">.</span><span class="n">tasks</span> <span class="p">(</span>\n  <span class="n">id</span> <span class="n">uuid</span> <span class="k">not</span> <span class="k">null</span> <span class="k">primary</span> <span class="k">key</span> <span class="k">default</span> <span class="n">uuid_generate_v4</span><span class="p">(),</span>\n  <span class="n">user_id</span> <span class="n">uuid</span> <span class="k">not</span> <span class="k">null</span> <span class="k">references</span> <span class="n">auth</span><span class="p">.</span><span class="n">users</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="k">default</span> <span class="n">auth</span><span class="p">.</span><span class="n">uid</span><span class="p">(),</span>\n  <span class="n">content</span> <span class="nb">text</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>\n  <span class="n">is_done</span> <span class="nb">boolean</span> <span class="k">not</span> <span class="k">null</span> <span class="k">default</span> <span class="k">false</span><span class="p">,</span>\n  <span class="n">created_at</span> <span class="nb">timestamp</span> <span class="k">with</span> <span class="nb">time</span> <span class="k">zone</span> <span class="k">default</span> <span class="n">timezone</span><span class="p">(</span><span class="s1">\'utc\'</span> <span class="p">::</span> <span class="nb">text</span><span class="p">,</span> <span class="n">now</span><span class="p">())</span> <span class="k">not</span> <span class="k">null</span>\n<span class="p">);</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos="38:1-39:0">\n<p data-sourcepos="38:4-38:127">プロジェクトの設定 &gt; APIから、Project URL及びProject Project API Keys内のanon keyをコピーしておく。</p>\n</li>\n</ol>\n<h2 data-sourcepos="40:1-40:29">\n<span id="vite--svelte--typescript" class="fragment"></span><a href="#vite--svelte--typescript"><i class="fa fa-link"></i></a>Vite + Svelte + Typescript</h2>\n<h3 data-sourcepos="42:1-42:10">\n<span id="前提" class="fragment"></span><a href="#%E5%89%8D%E6%8F%90"><i class="fa fa-link"></i></a>前提</h3>\n<p data-sourcepos="43:1-43:33">nodejsが入った環境を準備</p>\n<h3 data-sourcepos="45:1-45:16">\n<span id="構築手順" class="fragment"></span><a href="#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86"><i class="fa fa-link"></i></a>構築手順</h3>\n<div class="code-frame" data-lang="bash" data-sourcepos="47:1-53:3"><div class="highlight"><pre><code><span class="nv">$ </span>npm init vite@latest\n  <span class="c"># svelte ⇒ typescriptと選択</span>\n<span class="nv">$ </span><span class="nb">cd</span> &lt;プロジェクト名&gt;\n<span class="nv">$ </span>npm <span class="nb">install</span>\n<span class="nv">$ </span>npm <span class="nb">install</span> @supabase/supabase-js\n</code></pre></div></div>\n<p data-sourcepos="55:1-55:23">vite.config.tsを修正</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="57:1-67:3"><div class="highlight"><pre><code><span class="c1">//vite.config.ts</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="nf">defineConfig</span><span class="p">({</span>\n  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nf">svelte</span><span class="p">()],</span>\n  <span class="na">server</span><span class="p">:</span> <span class="p">{</span>       <span class="c1">// 追加</span>\n    <span class="na">host</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// 追加</span>\n    <span class="na">port</span><span class="p">:</span> <span class="mi">8080</span>    <span class="c1">// 追加</span>\n  <span class="p">}</span>               <span class="c1">// 追加</span>\n<span class="p">})</span>\n</code></pre></div></div>\n<p data-sourcepos="69:1-69:103">ここまでで<code>http://localhost:8080</code>を開くとvite + svelteのwelcome画面が出ているはず。</p>\n<p data-sourcepos="71:1-71:100">次に.envファイルをルートディレクトリに作成しanon keyとapi keyを設定する。</p>\n<div class="code-frame" data-lang="text" data-sourcepos="73:1-76:3">\n<div class="code-lang"><span class="bold">.env</span></div>\n<div class="highlight"><pre><code>VITE_SUPABASE_URL=*****\nVITE_SUPABASE_ANON_KEY=******\n</code></pre></div>\n</div>\n<p data-sourcepos="78:1-78:63">src/supabaseClient.tsを作成し、呼び出しやすくする</p>\n<div class="code-frame" data-lang="typescript" data-sourcepos="80:1-97:3"><div class="highlight"><pre><code><span class="c1">// src/supabaseClient.ts</span>\n\n<span class="k">import</span> <span class="p">{</span> <span class="nx">createClient</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@supabase/supabase-js</span><span class="dl">\'</span>\n\n<span class="kd">const</span> <span class="nx">supabaseUrl</span> <span class="o">=</span> <span class="k">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">VITE_SUPABASE_URL</span>\n<span class="kd">const</span> <span class="nx">supabaseAnonKey</span> <span class="o">=</span> <span class="k">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">VITE_SUPABASE_ANON_KEY</span>\n\n<span class="kd">const</span> <span class="nx">realtime_opt</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">realtime</span><span class="p">:</span> <span class="p">{</span>\n    <span class="na">params</span><span class="p">:</span> <span class="p">{</span>\n      <span class="na">eventsPerSecond</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">supabase</span> <span class="o">=</span> <span class="nf">createClient</span><span class="p">(</span><span class="nx">supabaseUrl</span><span class="p">,</span> <span class="nx">supabaseAnonKey</span><span class="p">,</span> <span class="nx">realtime_opt</span><span class="p">)</span>\n</code></pre></div></div>\n<p data-sourcepos="99:1-101:61">これでsupabaseをフロントで使う準備ができた。<br>\nあとは自由にコーディングを進めることができる。<br>\n次回はsupabase上のdbの操作について書きます。</p>\n<p data-sourcepos="104:1-105:122">例)<br>\n<a href="https://camo.qiitausercontent.com/c399bb8de1a4785a85f3c2618a2223191106c9ac/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938353535302f34623234353465332d373137662d653739652d666133342d6636623865313035376464652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4b2454e3-717f-e79e-fa34-f6b8e1057dde.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=574304ad98fa35e9c52c3ffb88227514" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4b2454e3-717f-e79e-fa34-f6b8e1057dde.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2985550%2F4b2454e3-717f-e79e-fa34-f6b8e1057dde.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1da46850b133d16bd1f98d713fa50d21 1x" loading="lazy"></a></p>\n<div class="code-frame" data-lang="vuejs" data-sourcepos="108:1-128:3"><div class="highlight"><pre><code>// email＋passwordのサインインの場合\n\n<span class="nt">&lt;</span><span class="k">script</span> <span class="na">lang=</span><span class="s">"ts"</span><span class="nt">&gt;</span>\n  <span class="k">import</span> <span class="p">{</span> <span class="nx">supabase</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">../supabaseClient</span><span class="dl">\'</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">email</span> <span class="o">=</span> <span class="dl">\'\'</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">password</span> <span class="o">=</span> <span class="dl">\'\'</span><span class="p">;</span>\n\n  <span class="kd">const</span> <span class="nx">LoginHander</span> <span class="o">=</span> <span class="nf">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">supabase</span><span class="p">.</span><span class="nx">auth</span><span class="p">.</span><span class="nf">signInWithPassword</span><span class="p">({</span>\n      <span class="na">email</span><span class="p">:</span> <span class="nx">email</span><span class="p">,</span>\n      <span class="na">password</span><span class="p">:</span> <span class="nx">password</span><span class="p">,</span>\n    <span class="p">});</span>\n  <span class="p">}</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;form</span> <span class="na">on:submit</span><span class="err">|</span><span class="na">preventDefault=</span><span class="s">"{LoginHander}"</span><span class="nt">&gt;</span>\n  // 省略\n<span class="nt">&lt;/form&gt;</span>\n\n</code></pre></div></div>\n<p data-sourcepos="130:1-130:35">supabase、とってもいい感じ</p>\n<h3 data-sourcepos="133:1-133:10">\n<span id="追記" class="fragment"></span><a href="#%E8%BF%BD%E8%A8%98"><i class="fa fa-link"></i></a>追記</h3>\n<p data-sourcepos="135:1-135:21">投稿しました。</p>\n<p data-sourcepos="137:1-137:55"><iframe id="qiita-embed-content__0d2b6c45d5c99786f1333f0f6ab202ca" src="https://qiita.com/embed-contents/link-card#qiita-embed-content__0d2b6c45d5c99786f1333f0f6ab202ca" data-content="https%3A%2F%2Fqiita.com%2Fdoyaseizin%2Fitems%2Fd6e0237b700448cc1826" frameborder="0" scrolling="no" loading="lazy" style="width:100%;" height="29">\n</iframe>\n</p>\n',body:"# はじめに\n\nBaas(Backend As A Service)で何かサービスを構築してみたいと思い、\nfirebaseを触ってみようと思ったところ、Firebase の代替と謳われているsupabaseを発見。\n\nこちらの方が面白そうだと感じたため、構築してみることに\n\n# 使ったもの\n\n* Vite + Svelte + Typescript\n    * @supabase/supabase-js\n    * tailwind css\n\n* supabase\n    * auth\n    * db\n    * realtime\n\n# ローカル環境の構築手順\n\n## supabase\n\n1. [supabase](https://app.supabase.com/)でアカウント及びプロジェクト作成\n\n2. SQL Editorより以下を実行し、taskテーブルを作成する\n   (todoアプリ用のため、いらない人はスキップ)\n\n    ```sql\n    create table if not exists public.tasks (\n      id uuid not null primary key default uuid_generate_v4(),\n      user_id uuid not null references auth.users(id) default auth.uid(),\n      content text not null,\n      is_done boolean not null default false,\n      created_at timestamp with time zone default timezone('utc' :: text, now()) not null\n    );\n    ```\n\n3. プロジェクトの設定 > APIから、Project URL及びProject Project API Keys内のanon keyをコピーしておく。\n\n## Vite + Svelte + Typescript\n\n### 前提\nnodejsが入った環境を準備\n\n### 構築手順\n\n```bash\n$ npm init vite@latest\n  # svelte ⇒ typescriptと選択\n$ cd <プロジェクト名>\n$ npm install\n$ npm install @supabase/supabase-js\n```\n\nvite.config.tsを修正\n\n```typescript\n//vite.config.ts\n\nexport default defineConfig({\n  plugins: [svelte()],\n  server: {       // 追加\n    host: true,   // 追加\n    port: 8080    // 追加\n  }               // 追加\n})\n```\n\nここまでで`http://localhost:8080`を開くとvite + svelteのwelcome画面が出ているはず。\n\n次に.envファイルをルートディレクトリに作成しanon keyとapi keyを設定する。\n\n```.env\nVITE_SUPABASE_URL=*****\nVITE_SUPABASE_ANON_KEY=******\n```\n\nsrc/supabaseClient.tsを作成し、呼び出しやすくする\n\n```typescript\n// src/supabaseClient.ts\n\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\n\nconst realtime_opt = {\n  realtime: {\n    params: {\n      eventsPerSecond: 10,\n    }\n  }\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, realtime_opt)\n```\n\nこれでsupabaseをフロントで使う準備ができた。\nあとは自由にコーディングを進めることができる。\n次回はsupabase上のdbの操作について書きます。\n\n\n例) \n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2985550/4b2454e3-717f-e79e-fa34-f6b8e1057dde.png)\n\n\n```vuejs\n// email＋passwordのサインインの場合\n\n<script lang=\"ts\">\n  import { supabase } from '../supabaseClient';\n  let email = '';\n  let password = '';\n\n  const LoginHander = async () => {\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email: email,\n      password: password,\n    });\n  }\n<\/script>\n\n<form on:submit|preventDefault=\"{LoginHander}\">\n  // 省略\n</form>\n\n```\n\nsupabase、とってもいい感じ\n\n\n### 追記\n\n投稿しました。\n\nhttps://qiita.com/doyaseizin/items/d6e0237b700448cc1826\n\n",coediting:!1,comments_count:0,created_at:"2022-11-24T14:03:58+09:00",group:null,id:"8820a095a433d09f300d",likes_count:5,private:!1,reactions_count:0,stocks_count:2,tags:[{name:"JavaScript",versions:[]},{name:"BaaS",versions:[]},{name:"Svelte",versions:[]},{name:"Supabase",versions:[]}],title:"supabaseで簡単なTodoアプリを構築した話 - ０からフロント側の設定まで",updated_at:"2022-11-30T08:52:16+09:00",url:"https://qiita.com/maaaashi/items/8820a095a433d09f300d",user:{description:"都内のweb系の企業でエンジニアをしています。\r\nサーバレス大好きです。\r\n\r\n主に備忘録として書きますが、どなたかのお役に立てれば幸いです。\r\n\r\n【Qiita Advent Calendar 2022】完走賞いただきました！",facebook_id:"",followees_count:12,followers_count:10,github_login_name:null,id:"maaaashi",items_count:56,linkedin_id:"",location:"千葉",name:"",organization:"",permanent_id:2985550,profile_image_url:"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2985550/6528cb551ba394c700da26cb135be1fc3f2928b5/x_large.png?1669290275",team_only:!1,twitter_screen_name:"pg_maaaashi",website_url:"https://maaaashi-portfolio.mss-rep.com/"},page_views_count:827,team_membership:null,organization_url_name:null}]},"./src/libs/images/qiita.png":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={src:"static/media/src/libs/images/qiita.png",height:630,width:1200,blurDataURL:"static/media/src/libs/images/qiita.png"}}}]);